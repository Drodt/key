/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */
package de.uka.ilkd.key.strategy.feature;

import de.uka.ilkd.key.proof.Goal;

import org.key_project.prover.rules.RuleApp;
import org.key_project.prover.sequent.PosInOccurrence;
import org.key_project.prover.strategy.costbased.MutableState;
import org.key_project.prover.strategy.costbased.RuleAppCost;
import org.key_project.prover.strategy.costbased.feature.Feature;
import org.key_project.prover.strategy.costbased.termProjection.ProjectionToTerm;
import org.key_project.prover.strategy.costbased.termProjection.TermBuffer;


/**
 * Feature for locally binding a <code>TermBuffer</code> to a certain value, namely to a term that
 * is generated by a <code>ProjectionToTerm</code>. This is mostly useful to make feature terms more
 * readable, and to avoid repeated evaluation of projections.
 */
public class LetFeature implements Feature<Goal> {

    private final TermBuffer var;
    private final ProjectionToTerm value;
    private final Feature<Goal> body;

    public static Feature<Goal> create(TermBuffer var, ProjectionToTerm value, Feature<Goal> body) {
        return new LetFeature(var, value, body);
    }

    private LetFeature(TermBuffer var, ProjectionToTerm value, Feature<Goal> body) {
        this.var = var;
        this.value = value;
        this.body = body;
    }

    public RuleAppCost computeCost(RuleApp app, PosInOccurrence pos, Goal goal,
            MutableState mState) {
        final var outerVarContent = var.getContent(mState);

        var.setContent(value.toTerm(app, pos, goal, mState), mState);
        final RuleAppCost res = body.computeCost(app, pos, goal, mState);

        var.setContent(outerVarContent, mState);
        return res;
    }

}
