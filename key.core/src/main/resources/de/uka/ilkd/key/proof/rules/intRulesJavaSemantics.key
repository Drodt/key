\schemaVariables {
    \term int left, right, i, i0, i1;
    \term numbers iz, jz;
}

/**
  READ FIRST BEFORE EDITING:
    This file interpretes integer semantics sensitive functions
  faithfully to their definition in the Java Language Specification.

  In case of changes PLEASE preserve the files intended meaning. If
  you want to test some rules before implementing them completely,
  please create a new file and include it into the standardRules.key

  Files:
     // rules treating Java programs

     integerAssignment2UpdateRules.key: all integer related assignment
                                        rules


     integerCommonRules.key: integer semantics independent rules which
         transform programs

     // rules treating integer semantics sensitive functions

     intRules.key: rules interpreting the generic translation
        functions 'java...' faithfully according to the Java Language
        Specification (sound, but a lot of divisions and modulo
        computation need to be performed)

     intRulesIgnoringOverflow.key: rules interpreting the generic translation
        functions 'java...' without overflow (not sound)

     intRulesArith.key: rules interpreting the generic translation
        functions 'java...' as in intRulesIgnoringOverflow.key, but
        requires to show absence of overflow or that the property to
        be proven does not depend on the value of an expression where
        an overflow occurred (sound, but incomplete)

     // rules treating integer semantics insensitive functions

     integerSimplificationRules.key: rules for arithmetic functions
         that do not depend on the chosen integer semantics

*/

\rules(programRules:Java, intRules:javaSemantics) {

    // --------------------------------------------------------------------------
    // Axioms defining the integer translation functions
    // --------------------------------------------------------------------------

    translateJavaUnaryMinusInt {
        \find(javaUnaryMinusInt(left))
        \replacewith(unaryMinusJint(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnaryMinus"
    };

    translateJavaUnaryMinusLong {
        \find(javaUnaryMinusLong(left))
        \replacewith(unaryMinusJlong(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnaryMinus"
    };

    translateJavaBitwiseNegation {
        \find(javaBitwiseNegation(left))
        \replacewith(sub(neg(left), 1))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnaryMinus"
    };

    translateJavaAddInt {
        \find(javaAddInt(left, right))
        \replacewith(addJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaAdd"
    };

    translateJavaAddLong {
        \find(javaAddLong(left, right))
        \replacewith(addJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaAdd"
    };

    translateJavaSubInt {
        \find(javaSubInt(left, right))
        \replacewith(subJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaSub"
    };

    translateJavaSubLong {
        \find(javaSubLong(left, right))
        \replacewith(subJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaSub"
    };

    translateJavaMulInt {
        \find(javaMulInt(left, right))
        \replacewith(mulJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaMul"
    };

    translateJavaMulLong {
        \find(javaMulLong(left, right))
        \replacewith(mulJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaMul"
    };

    translateJavaMod {
        \find(javaMod(left, right))
        \replacewith(jmod(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaMod"
    };

    translateJavaDivInt {
        \find(javaDivInt(left, right))
        \replacewith(divJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaDiv"
    };

    translateJavaDivLong {
        \find(javaDivLong(left, right))
        \replacewith(divJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaDiv"
    };

    translateJavaCastByte {
        \find(javaCastByte(left))
        \replacewith(moduloByte(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastShort {
        \find(javaCastShort(left))
        \replacewith(moduloShort(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastInt {
        \find(javaCastInt(left))
        \replacewith(moduloInt(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastLong {
        \find(javaCastLong(left))
        \replacewith(moduloLong(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastChar {
        \find(javaCastChar(left))
        \replacewith(moduloChar(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaShiftRightInt {
        \find(javaShiftRightInt(left, right))
        \replacewith(shiftrightJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftRight"
    };

    translateJavaShiftRightLong {
        \find(javaShiftRightLong(left, right))
        \replacewith(shiftrightJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftRight"
    };

    translateJavaShiftLeftInt {
        \find(javaShiftLeftInt(left, right))
        \replacewith(shiftleftJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftLeft"
    };

    translateJavaShiftLeftLong {
        \find(javaShiftLeftLong(left, right))
        \replacewith(shiftleftJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftLeft"
    };

    translateJavaUnsignedShiftRightInt {
        \find(javaUnsignedShiftRightInt(left, right))
        \replacewith(unsignedshiftrightJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnsignedShiftRight"
    };

    translateJavaUnsignedShiftRightLong {
        \find(javaUnsignedShiftRightLong(left, right))
        \replacewith(unsignedshiftrightJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnsignedShiftRight"
    };

    translateJavaBitwiseOrInt {
        \find(javaBitwiseOrInt(left, right))
        \replacewith(orJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseOr"
    };

    translateJavaBitwiseOrLong {
        \find(javaBitwiseOrLong(left, right))
        \replacewith(orJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseOr"
    };

    translateJavaBitwiseAndInt {
        \find(javaBitwiseAndInt(left, right))
        \replacewith(andJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseAnd"
    };

    translateJavaBitwiseAndLong {
        \find(javaBitwiseAndLong(left, right))
        \replacewith(andJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseAnd"
    };

    translateJavaBitwiseXOrInt {
        \find(javaBitwiseXOrInt(left, right))
        \replacewith(xorJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseXOr"
    };

    translateJavaBitwiseXOrLong {
        \find(javaBitwiseXOrLong(left, right))
        \replacewith(xorJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseXOr"
    };
}
