/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    Integer simplification rules.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \term int i, i0, i1, i2, i3, i4, j, j0, j1, t, t1, t2;
    \term [rigid] int ir, i0r;
    \variables int k, j2, c, nv;
    \skolemTerm int sk, sk2;

    \term numbers iz, jz;
    \formula b, psi, phi, post, inv;

    \term int commLeft, commRight;
    \term int distSummand0, distSummand1, distCoeff;
    \term int invertLeft, invertRight;
    \term int pullOutCommon, pullOutLeft, pullOutRight;
    \term int homoLeft, homoRight;
    \term int addAssocMono, addAssocPoly0, addAssocPoly1;
    \term int mulAssocAtom, mulAssocMono0, mulAssocMono1;
    \term int applyEqDividend, applyEqDivisor;
    \term [rigid] int applyEqDivisorr;
    \term int cpLeft1, cpLeft2, cpRight1, cpRight2;
    \term int esLeft, esRight1, esRight2, esCoeff1, esCoeff2;
    \term int sepPosMono, sepNegMono, sepResidue;
    \term int multLeft, multRight, multFac;
    \term int multFacLeft, multFacRight;
    \term int divX, divXBoundPos, divXBoundNonPos, divXBoundNeg, divXBoundNonNeg;
    \term int divY;
    \term int divProd, divProdBoundPos, divProdBoundNonPos;
    \term int divProdBoundNeg, divProdBoundNonNeg;
    \term int squareFac;
    \term int subsumLeft, subsumRightBigger, subsumRightSmaller,
    subsumCoeffBigger, subsumCoeffSmaller;
    \term int contradLeft, contradRightBigger, contradRightSmaller,
    contradCoeffBigger, contradCoeffSmaller;
    \term int strengthenLeft, strengthenRight;
    \term int splitEqLeft, splitEqRight;
    \term int signCasesLeft;
    \term int elimGcdLeft, elimGcdRight, elimGcd;

    \term int elimGcdLeftDiv, elimGcdRightDiv;
    \term int divNum, divDenom, polyDivCoeff;
    \term int modNumLeft, modNumRight, modDenom;
    \term int newSymLeft, newSymLeftCoeff, newSymRight, newSymDef;
    \skolemTerm int l, quotient;
    \term int applyEqLeft, applyEqRight, applyEqOther;
    \term int tautLeft, tautRightBigger, tautRightSmaller;
    \term int weakenLeft, weakenRightSmaller, weakenRightBigger;
    \term int antiSymmLeft, antiSymmRightSmaller, antiSymmRightBigger;
    \term int aePseudoLeft, aePseudoLeftCoeff, aePseudoRight;
    \term int aePseudoTargetLeft, aePseudoTargetRight, aePseudoTargetFactor;

    // attention strategy depends on this var.name
    \term int castedTerm;

    \variables int uSub, uSub1, uSub2;
    \term int tInt;
}

\rules {

    // --------------------------------------------------------------------
    // some of these taclets are from Isabelle theory IntArith
    // --------------------------------------------------------------------

    // reviewed 04/16/2004, St.S.
    minus_distribute_1 {
        \find(neg(add(i, i1)))
        \replacewith(add(neg(i), neg(i1)))
        //\heuristics(simplify_int)
        \displayname "minus_distribute"
    };
    // reviewed 04/16/2004, St.S.
    minus_distribute_2 {
        \find(neg(sub(i, i1)))
        \replacewith(add(neg(i), i1))
        //\heuristics(simplify_int)
        \displayname "minus_distribute"
    };

    // reviewed 04/16/2004, St.S.
    leq_diff1_eq {
        \find(leq(i0, sub(i1, 1)))
        \replacewith(lt(i0, i1))
        //\heuristics(simplify_int)
    };

    // reviewed 04/16/2004, St.S.
    le1_add1_eq_le {
        \find(lt(i0, add(i1, 1)))
        \replacewith(leq(i0, i1))
        //\heuristics(simplify_int)
    };

    // reviewed 04/16/2004, St.S.
    square_nonneg {
        \find(leq(0, mul(i0, i0)))
        \replacewith(true)
        //\heuristics(simplify_int)
    };

    // reviewed 04/16/2004, St.S.
    leq_diff_1 {
        \find(leq(i0, add(i0, 1)))
        \replacewith(true)
        //\heuristics(int_arithmetic)
    };

    // reviewed 04/16/2004, St.S.
    lt_diff_1 {
        \find(lt(i0, add(i0, 1)))
        \replacewith(true)
        //\heuristics(int_arithmetic)
    };

    // reviewed 04/16/2004, St.S.
    geq_diff_1 {
        \find(geq(add(i0, 1), i0))
        \replacewith(true)
        //\heuristics(int_arithmetic)
    };

    // reviewed 04/16/2004, St.S.
    gt_diff_1 {
        \find(gt(add(i0, 1), i0))
        \replacewith(true)
        //\heuristics(int_arithmetic)
    };

    // reviewed 04/16/2004, St.S.
    i_minus_i_is_zero {
        \find(sub(i, i))
        \replacewith(0)
        //\heuristics(simplify_int)
    };

    // reviewed 04/15/2004, St.S.
    times_one_1 {
        \find(mul(i, 1))
        \replacewith(i)
        //\heuristics(simplify_int)
        \displayname "times_one"
    };
    // reviewed 04/15/2004, St.S.
    times_one_2 {
        \find(mul(1, i))
        \replacewith(i)
        //\heuristics(simplify_int)
        \displayname "times_one"
    };
    // reviewed 04/15/2004, St.S.
    times_minus_one_1 {
        \find(mul(i, -1))
        \replacewith(neg(i))
        //\heuristics(simplify_int)
        \displayname "times_minus_one"
    };
    // reviewed 04/15/2004, St.S.
    times_minus_one_2 {
        \find(mul(-1, i))
        \replacewith(neg(i))
        //\heuristics(simplify_int)
        \displayname "times_minus_one"
    };
    // reviewed 04/15/2004, St.S.
    times_zero_1 {
        \find(mul(i, 0))
        \replacewith(0)
        //\heuristics(simplify_literals)
        \displayname "times_zero"
    };
    // reviewed 04/15/2004, St.S.
    times_zero_2 {
        \find(mul(0, i))
        \replacewith(0)
        //\heuristics(simplify_literals)
        \displayname "times_zero"
    };

    // reviewed 04/15/2004, St.S.
    less_base {
        \find(lt(i, i))
        \replacewith(false)
        //\heuristics(simplify_int)
    };

    // reviewed 04/15/2004, St.S.
    add_zero_left {
        \find(add(0, i))
        \replacewith(i)
        //\heuristics(simplify_literals)
    };
    // reviewed 04/15/2004, St.S.
    add_zero_right {
        \find(add(i, 0))
        \replacewith(i)
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    add_eq_back {
        \find(add(i1, i) = add(i1, i0))
        \replacewith(i = i0)
        //\heuristics(simplify_int)
    };

    // new, not reviewed but proven: see ../proof/rules/proven_rules/add_eq_back_2.proof
    add_eq_back_2 {
        \find(add(i, i1) = add(i0, i1))
        \replacewith(i = i0)
        //\heuristics(simplify_int)
        \displayname "add_eq_back"
    };

    // new, not reviewed, but proven: see ../proof/rules/proven_rules/add_eq_back_2_fst_comm.proof
    add_eq_back_2_fst_comm {
        \find(add(i1, i) = add(i0, i1))
        \replacewith(i = i0)
        //\heuristics(simplify_int)
        \displayname "add_eq_back"
    };

    // new, not reviewed, but proven: see ../proof/rules/proven_rules/add_eq_back_3.proof
    add_eq_back_3 {
        \find(i1 = add(i1, i0))
        \replacewith(0 = i0)
        //\heuristics(simplify_int)
        \displayname "add_eq_back"
    };

    // reviewed 04/15/2004, St.S.
    add_less_back {
        \find(lt(add(i1, i), add(i1, i0)))
        \replacewith(lt(i, i0))
        //\heuristics(simplify_int)
    };

    // reviewed 04/15/2004, St.S.
    add_less_back_zero_1 {
        \find(lt(i, add(i, i1)))
        \replacewith(lt(0, i1))
        //\heuristics(simplify_int)
        \displayname "add_less_back"
    };

    // new, not reviewed, but proven: see ../proof/rules/proven_rules/add_less_back_zero_1_comm.proof
    add_less_back_zero_1_comm {
        \find(lt(i, add(i1, i)))
        \replacewith(lt(0, i1))
        //\heuristics(simplify_int)
        \displayname "add_less_back"
    };

    // reviewed 04/15/2004, St.S.
    add_less_back_zero_2 {
        \find(lt(add(i, i1), i))
        \replacewith(lt(i1, 0))
        //\heuristics(simplify_int)
        \displayname "add_less_back"
    };

    // new, not reviewed, but proven: see ../proof/rules/proven_rules/add_less_back_zero_2_comm.proof
    add_less_back_zero_2_comm {
        \find(lt(add(i1, i), i))
        \replacewith(lt(i1, 0))
        //\heuristics(simplify_int)
        \displayname "add_less_back"
    };

    // reviewed 04/15/2004, St.S.
    sub {
        \find(sub(i, i0))
        \replacewith(add(i, neg(i0)))
        //\heuristics(simplify_int)
    };
    // reviewed 04/15/2004, St.S.
    sub_zero_1 {
        \find(Z(neglit(0(#))))
        \replacewith(Z(0(#)))
        //\heuristics(simplify_literals)
    };
    // reviewed 04/15/2004, St.S.
    sub_zero_2 {
        \find(sub(i, 0))
        \replacewith(i)
        //\heuristics(simplify_int)
    };
    // reviewed 04/15/2004, St.S.
    add_sub_elim_left {
        \find(add(neg(i), i))
        \replacewith(0)
        //\heuristics(simplify_int)
    };
    // reviewed 04/15/2004, St.S.
    add_sub_elim_right {
        \find(add(i, neg(i)))
        \replacewith(0)
        //\heuristics(simplify_int)
    };

    // reviewed 04/15/2004, St.S.
    sub_sub_elim {
        \find(neg(neg(i)))
        \replacewith(i)
        //\heuristics(simplify_int)
    };

    // reviewed 04/15/2004, St.S.
    lt_to_leq_1 {
        \find(lt(i, j) | i = j)
        \replacewith(leq(i, j))
        //\heuristics(simplify_int)
    };

    // reviewed 04/15/2004, St.S.
    lt_to_leq_2 {
        \assumes( ==> lt(i, j))
        \find( ==> i = j)
        \replacewith( ==> leq(i, j))
        //\heuristics(simplify_int)
    };

    // -------------------------------------------------------
    // ------------- Rules for integer literals --------------
    // -------------------------------------------------------

    // reviewed 04/20/2004, St.S.
    double_unary_minus_literal {
        \find(Z(neglit(neglit(iz))))
        \replacewith(Z(iz))
        //\heuristics(simplify_literals)
        \displayname "double_unary_minus"
    };

    // reviewed 04/15/2004, St.S.
    add_literals {
        \find(add(Z(iz), Z(jz)))
        \replacewith(#add(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    sub_literals {
        \find(sub(Z(iz), Z(jz)))
        \replacewith(#sub(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    mul_literals {
        \find(mul(Z(iz), Z(jz)))
        \replacewith(#mul(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    div_literals {
        \find(div(Z(iz), Z(jz)))
        \replacewith(#div(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    less_literals {
        \find(lt(Z(iz), Z(jz)))
        \replacewith(#less(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    greater_literals {
        \find(gt(Z(iz), Z(jz)))
        \replacewith(#greater(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    leq_literals {
        \find(leq(Z(iz), Z(jz)))
        \replacewith(#leq(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    geq_literals {
        \find(geq(Z(iz), Z(jz)))
        \replacewith(#geq(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    equal_literals {
        \find(Z(iz) = Z(jz))
        \replacewith(#eq(Z(iz), Z(jz)))
        //\heuristics(simplify_literals)
    };

    // reviewed 04/15/2004, St.S.
    neg_literal {
        \find(neg(Z(iz)))
        \replacewith(Z(neglit(iz)))
        //\heuristics(simplify_literals)
    };

    pow_literals {
        \find(pow(Z(iz), Z(jz)))
        \replacewith(#pow(Z(iz), Z(jz)))
        //\heuristics(simplify_literals, nonDuplicateAppCheckEq)
    };

}

// ---------------------------------------------------------
// - multiply both sides of an (in)equation with some term -
// ---------------------------------------------------------

\rules/*(integerSimplificationRules:full)*/ {
    multiply_2_inEq0 {
        \assumes(multFacLeft <= multFacRight ==>)
        \find(multLeft <= multRight ==>)
        \add(multLeft * multFacLeft >=
            -multRight * multFacRight
            + multRight * multFacLeft
            + multLeft * multFacRight ==>)
        //\heuristics(inEqSimp_nonLin,inEqSimp_nonLin_multiply)
    };

    multiply_2_inEq1 {
        \assumes(multFacLeft >= multFacRight ==>)
        \find(multLeft <= multRight ==>)
        \add(multLeft * multFacLeft <=
            -multRight * multFacRight
            + multRight * multFacLeft
            + multLeft * multFacRight ==>)
        //\heuristics(inEqSimp_nonLin,inEqSimp_nonLin_multiply)
    };

    multiply_2_inEq2 {
        \assumes(multFacLeft <= multFacRight ==>)
        \find(multLeft >= multRight ==>)
        \add(multLeft * multFacLeft <=
            -multRight * multFacRight
            + multRight * multFacLeft
            + multLeft * multFacRight ==>)
        //\heuristics(inEqSimp_nonLin,inEqSimp_nonLin_multiply)
    };

    multiply_2_inEq3 {
        \assumes(multFacLeft >= multFacRight ==>)
        \find(multLeft >= multRight ==>)
        \add(multLeft * multFacLeft >=
            -multRight * multFacRight
            + multRight * multFacLeft
            + multLeft * multFacRight ==>)
        //\heuristics(inEqSimp_nonLin,inEqSimp_nonLin_multiply)
    };

    divide_inEq0 {
        \assumes(divX >= divXBoundPos ==>)
        \find(divProd <= divProdBoundNonNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundPos >= 1 ->
            divProdBoundNonNeg >= 0 ->
            divY <= divProdBoundNonNeg/divXBoundPos ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_inEq1 {
        \assumes(divX >= divXBoundNonNeg ==>)
        \find(divProd <= divProdBoundNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundNonNeg >= 0 ->
            divProdBoundNeg <= -1 ->
            divY <= -1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_neg)
    };

    divide_inEq2 {
        \assumes(divX >= divXBoundPos ==>)
        \find(divProd >= divProdBoundNonPos ==>)
        \add(divProd = divX * divY ->
            divXBoundPos >= 1 ->
            divProdBoundNonPos <= 0 ->
            divY >= (divProdBoundNonPos + divXBoundPos - 1)
            /divXBoundPos ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_inEq3 {
        \assumes(divX >= divXBoundNonNeg ==>)
        \find(divProd >= divProdBoundPos ==>)
        \add(divProd = divX * divY ->
            divXBoundNonNeg >= 0 ->
            divProdBoundPos >= 1 ->
            divY >= 1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_pos)
    };

    divide_inEq4 {
        \assumes(divX <= divXBoundNeg ==>)
        \find(divProd >= divProdBoundNonPos ==>)
        \add(divProd = divX * divY ->
            divXBoundNeg <= -1 ->
            divProdBoundNonPos <= 0 ->
            divY <= divProdBoundNonPos/divXBoundNeg ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_inEq5 {
        \assumes(divX <= divXBoundNonPos ==>)
        \find(divProd >= divProdBoundPos ==>)
        \add(divProd = divX * divY ->
            divXBoundNonPos <= 0 ->
            divProdBoundPos >= 1 ->
            divY <= -1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_neg)
    };

    divide_inEq6 {
        \assumes(divX <= divXBoundNeg ==>)
        \find(divProd <= divProdBoundNonNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundNeg <= -1 ->
            divProdBoundNonNeg >= 0 ->
            divY >= divProdBoundNonNeg/divXBoundNeg ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_inEq7 {
        \assumes(divX <= divXBoundNonPos ==>)
        \find(divProd <= divProdBoundNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundNonPos <= 0 ->
            divProdBoundNeg <= -1 ->
            divY >= 1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_pos)
    };

    divide_eq0 {
        \assumes(divX >= divXBoundPos ==>)
        \find(divProd = divProdBoundNonNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundPos >= 1 ->
            divProdBoundNonNeg >= 0 ->
            divY <= divProdBoundNonNeg/divXBoundPos ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_eq1 {
        \assumes(divX >= divXBoundNonNeg ==>)
        \find(divProd = divProdBoundNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundNonNeg >= 0 ->
            divProdBoundNeg <= -1 ->
            divY <= -1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_neg)
    };

    divide_eq2 {
        \assumes(divX >= divXBoundPos ==>)
        \find(divProd = divProdBoundNonPos ==>)
        \add(divProd = divX * divY ->
            divXBoundPos >= 1 ->
            divProdBoundNonPos <= 0 ->
            divY >= (divProdBoundNonPos + divXBoundPos - 1)
            /divXBoundPos ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_eq3 {
        \assumes(divX >= divXBoundNonNeg ==>)
        \find(divProd = divProdBoundPos ==>)
        \add(divProd = divX * divY ->
            divXBoundNonNeg >= 0 ->
            divProdBoundPos >= 1 ->
            divY >= 1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_pos)
    };

    divide_eq4 {
        \assumes(divX <= divXBoundNeg ==>)
        \find(divProd = divProdBoundNonPos ==>)
        \add(divProd = divX * divY ->
            divXBoundNeg <= -1 ->
            divProdBoundNonPos <= 0 ->
            divY <= divProdBoundNonPos/divXBoundNeg ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_eq5 {
        \assumes(divX <= divXBoundNonPos ==>)
        \find(divProd = divProdBoundPos ==>)
        \add(divProd = divX * divY ->
            divXBoundNonPos <= 0 ->
            divProdBoundPos >= 1 ->
            divY <= -1 ==>)
        //\heuristics(inEqSimp_special_nonLin, inEqSimp_nonLin_neg)
    };

    divide_eq6 {
        \assumes(divX <= divXBoundNeg ==>)
        \find(divProd = divProdBoundNonNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundNeg <= -1 ->
            divProdBoundNonNeg >= 0 ->
            divY >= divProdBoundNonNeg/divXBoundNeg ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_divide)
    };

    divide_eq7 {
        \assumes(divX <= divXBoundNonPos ==>)
        \find(divProd = divProdBoundNeg ==>)
        \add(divProd = divX * divY ->
            divXBoundNonPos <= 0 ->
            divProdBoundNeg <= -1 ->
            divY >= 1 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonLin_pos)
    };
}

// ##########################################################################################################
// ------------- integer induction rules    --------------
// ##########################################################################################################

\rules {
    // reviewed 04/15/2004, St.S.
    int_induction {
        "Base Case":
            \add( ==> {\subst nv; 0}(b));
        "Step Case":
            \add( ==> \forall nv; ((geq(nv, 0) & b) -> {\subst nv; (nv + 1)}b));
        "Use Case":
            \add(\forall nv; (geq(nv, 0) -> b) ==>)
    };
}

// ---------------------------------------------------------
// ------------- split an equation into inequations --------
// ---------------------------------------------------------

\rules {
    splitEquationSucc {
        \find( ==> splitEqLeft = splitEqRight)
        \replacewith( ==> splitEqLeft >= splitEqRight);
        \replacewith( ==> splitEqLeft <= splitEqRight)
        //\heuristics(inEqSimp_nonLin, inEqSimp_split_eq, notHumanReadable)
    };
}

// ---------------------------------------------------------
// ------------- normalisation of polynomials --------------
// ---------------------------------------------------------

\rules {
    polySimp_elimSub {
        \find(sub(i, i0))
        \replacewith(add(i, mul(i0, -1)))
        //\heuristics(polySimp_expand, polySimp_elimSubNeg)
    };

    polySimp_elimNeg {
        \find(neg(i))
        \replacewith(mul(i, -1))
        //\heuristics(polySimp_expand, polySimp_elimSubNeg)
    };

    polySimp_elimOne {
        \find(mul(i, 1))
        \replacewith(i)
        //\heuristics(polySimp_expand, polySimp_elimOneRight)
    };

    polySimp_elimOneLeft0 {
        \find(mul(1, i))
        \replacewith(i)
        //\heuristics(polySimp_expand, polySimp_elimOneLeft)
    };

    polySimp_elimOneLeft1 {
        \find(mul(mul(i0, 1), i))
        \replacewith(mul(i0, i))
        //\heuristics(polySimp_expand, polySimp_elimOneLeft)
    };

    polySimp_homoEq {
        \find(homoLeft = homoRight)
        \replacewith(add(homoRight, mul(homoLeft, -1)) = 0)
        //\heuristics(polySimp_expand, polySimp_homo, notHumanReadable)
    };

    polySimp_rightDist {
        \find(mul(distCoeff, add(distSummand0, distSummand1)))
        \replacewith(add(mul(distCoeff, distSummand0),
                mul(distSummand1, distCoeff)))
        //\heuristics(polySimp_expand, polySimp_dist)
    };

    polySimp_addAssoc {
        \find(add(addAssocPoly0, add(addAssocPoly1, addAssocMono)))
        \replacewith(add(add(addAssocPoly0, addAssocPoly1), addAssocMono))
        //\heuristics(polySimp_expand, polySimp_addAssoc)
    };

    polySimp_mulAssoc {
        \find(mul(mulAssocMono0, mul(mulAssocMono1, mulAssocAtom)))
        \replacewith(mul(mul(mulAssocMono0, mulAssocMono1), mulAssocAtom))
        //\heuristics(polySimp_expand, polySimp_mulAssoc)
    };

    polySimp_addComm0 {
        \find(add(commLeft, commRight))
        \replacewith(add(commRight, commLeft))
        //\heuristics(polySimp_expand, polySimp_addOrder)
    };

    polySimp_addComm1 {
        \find(add(add(i0, commLeft), commRight))
        \replacewith(add(add(i0, commRight), commLeft))
        //\heuristics(polySimp_expand, polySimp_addOrder)
    };

    polySimp_mulComm0 {
        \find(mul(commLeft, commRight))
        \replacewith(mul(commRight, commLeft))
        //\heuristics(polySimp_expand, polySimp_mulOrder)
    };

    polySimp_mulComm1 {
        \find(mul(mul(i0, commLeft), commRight))
        \replacewith(mul(mul(i0, commRight), commLeft))
        //\heuristics(polySimp_expand, polySimp_mulOrder)
    };

    polySimp_addLiterals {
        \find(add(add(i, Z(iz)), Z(jz)))
        \replacewith(add(i, #add(Z(iz), Z(jz))))
        //\heuristics(simplify_literals)
    };

    polySimp_mulLiterals {
        \find(mul(mul(i, Z(iz)), Z(jz)))
        \replacewith(mul(i, #mul(Z(iz), Z(jz))))
        //\heuristics(simplify_literals)
    };

    polySimp_pullOutFactor0 {
        \find(add(mul(pullOutCommon, pullOutLeft),
                mul(pullOutCommon, pullOutRight)))
        \replacewith(mul(pullOutCommon,
                add(pullOutLeft, pullOutRight)))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor1 {
        \find(add(pullOutCommon,
                mul(pullOutCommon, pullOutRight)))
        \replacewith(mul(pullOutCommon,
                add(1, pullOutRight)))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor2 {
        \find(add(mul(pullOutCommon, pullOutLeft),
                pullOutCommon))
        \replacewith(mul(pullOutCommon,
                add(pullOutLeft, 1)))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor3 {
        \find(add(pullOutCommon, pullOutCommon))
        \replacewith(mul(pullOutCommon, 2))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor0b {
        \find(add(add(i0, mul(pullOutCommon, pullOutLeft)),
                mul(pullOutCommon, pullOutRight)))
        \replacewith(add(i0, mul(pullOutCommon,
                    add(pullOutLeft, pullOutRight))))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor1b {
        \find(add(add(i0, pullOutCommon),
                mul(pullOutCommon, pullOutRight)))
        \replacewith(add(i0, mul(pullOutCommon,
                    add(1, pullOutRight))))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor2b {
        \find(add(add(i0, mul(pullOutCommon, pullOutLeft)),
                pullOutCommon))
        \replacewith(add(i0, mul(pullOutCommon,
                    add(pullOutLeft, 1))))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_pullOutFactor3b {
        \find(add(add(i0, pullOutCommon), pullOutCommon))
        \replacewith(add(i0, mul(pullOutCommon, 2)))
        //\heuristics(polySimp_expand, polySimp_pullOutFactor)
    };

    polySimp_invertEq {
        \find(invertLeft = invertRight)
        \replacewith(invertLeft * (-1) = invertRight * (-1))
        //\heuristics(polySimp_directEquations, polySimp_normalise)
    };

    polySimp_sepPosMonomial {
        \find(add(sepResidue, sepPosMono) = 0)
        \replacewith(sepPosMono = mul(sepResidue, -1))
        //\heuristics(polySimp_directEquations, polySimp_balance, notHumanReadable)
    };

    polySimp_sepNegMonomial {
        \find(add(sepResidue, sepNegMono) = 0)
        \replacewith(mul(sepNegMono, -1) = sepResidue)
        //\heuristics(polySimp_directEquations, polySimp_balance)
    };

    apply_eq_monomials {
        \assumes(applyEqDivisor = i0 ==>)
        \find(applyEqDividend)
        \sameUpdateLevel
        \replacewith(#divideMonomials(applyEqDividend, applyEqDivisor) *
            (i0 + applyEqDivisor * -1)
            + applyEqDividend)
        //\heuristics(polySimp_applyEq, apply_equations, notHumanReadable)
    };

    apply_eq_monomials_rigid {
        \assumes(applyEqDivisorr = i0r ==>)
        \find(applyEqDividend)
        \replacewith(#divideMonomials(applyEqDividend, applyEqDivisorr) *
            (i0r + applyEqDivisorr * -1)
            + applyEqDividend)
        //\heuristics(polySimp_applyEqRigid, apply_equations, notHumanReadable)
    };

    apply_eq_pseudo_eq {
        \assumes(aePseudoLeft * aePseudoLeftCoeff = aePseudoRight ==>)
        \find(aePseudoTargetLeft = aePseudoTargetRight)
        \sameUpdateLevel
        \replacewith(\if(aePseudoTargetLeft = aePseudoLeft * aePseudoTargetFactor
                & aePseudoLeftCoeff != 0)
                \then(aePseudoRight * aePseudoTargetFactor
                    = aePseudoTargetRight * aePseudoLeftCoeff)
                \else(aePseudoTargetLeft = aePseudoTargetRight))
        //\heuristics(polySimp_leftNonUnit, polySimp_applyEqPseudo, notHumanReadable, notHumanReadable)
    };

    apply_eq_pseudo_leq {
        \assumes(aePseudoLeft * aePseudoLeftCoeff = aePseudoRight ==>)
        \find(aePseudoTargetLeft <= aePseudoTargetRight)
        \sameUpdateLevel
        \replacewith(\if(aePseudoTargetLeft = aePseudoLeft * aePseudoTargetFactor
                & aePseudoLeftCoeff > 0)
                \then(aePseudoRight * aePseudoTargetFactor
                    <= aePseudoTargetRight * aePseudoLeftCoeff)
                \else(aePseudoTargetLeft <= aePseudoTargetRight))
        //\heuristics(polySimp_leftNonUnit, polySimp_applyEqPseudo, notHumanReadable)
    };

    apply_eq_pseudo_geq {
        \assumes(aePseudoLeft * aePseudoLeftCoeff = aePseudoRight ==>)
        \find(aePseudoTargetLeft >= aePseudoTargetRight)
        \sameUpdateLevel
        \replacewith(\if(aePseudoTargetLeft = aePseudoLeft * aePseudoTargetFactor
                & aePseudoLeftCoeff > 0)
                \then(aePseudoRight * aePseudoTargetFactor
                    >= aePseudoTargetRight * aePseudoLeftCoeff)
                \else(aePseudoTargetLeft >= aePseudoTargetRight))
        //\heuristics(polySimp_leftNonUnit, polySimp_applyEqPseudo, notHumanReadable)
    };

    polySimp_critPair {
        \assumes(cpLeft1 = cpRight1 ==>)
        \find(cpLeft2 = cpRight2 ==>)
        \add(#divideLCRMonomials(cpLeft2, cpLeft1)
            * (-1 * cpRight1 + cpLeft1)
            +
            #divideLCRMonomials(cpLeft1, cpLeft2)
            * (cpRight2 + -1 * cpLeft2)
            = 0 ==>)
        //\heuristics(polySimp_saturate, polySimp_critPair, notHumanReadable)
    };

}

// ---------------------------------------------------------
// ------------- normalisation of inequations --------------
// ---------------------------------------------------------

\rules {
    inEqSimp_ltRight {
        \find( ==> i < i0)
        \replacewith((-1) * i0 + i >= 0 ==>)
        //\heuristics(inEqSimp_expand, inEqSimp_moveLeft, notHumanReadable)
    };

    inEqSimp_gtRight {
        \find( ==> i > i0)
        \replacewith((-1) * i0 + i <= 0 ==>)
        //\heuristics(inEqSimp_expand, inEqSimp_moveLeft, notHumanReadable)
    };

    inEqSimp_leqRight {
        \find( ==> i <= i0)
        \replacewith((-1) + (-1) * i0 + i >= 0 ==>)
        //\heuristics(inEqSimp_expand, inEqSimp_moveLeft, notHumanReadable)
    };

    inEqSimp_geqRight {
        \find( ==> i >= i0)
        \replacewith(1 + (-1) * i0 + i <= 0 ==>)
        //\heuristics(inEqSimp_expand, inEqSimp_moveLeft, notHumanReadable)
    };

    inEqSimp_ltToLeq {
        \find(i < i0)
        \replacewith(1 + (-1) * i0 + i <= 0)
        //\heuristics(inEqSimp_expand, inEqSimp_makeNonStrict, notHumanReadable)
    };

    inEqSimp_gtToGeq {
        \find(i > i0)
        \replacewith((-1) + (-1) * i0 + i >= 0)
        //\heuristics(inEqSimp_expand, inEqSimp_makeNonStrict, notHumanReadable)
    };

    inEqSimp_commuteLeq {
        \find(commLeft <= commRight)
        \replacewith(commRight >= commLeft)
        //\heuristics(inEqSimp_expand, inEqSimp_commute)
    };

    inEqSimp_commuteGeq {
        \find(commLeft >= commRight)
        \replacewith(commRight <= commLeft)
        //\heuristics(inEqSimp_expand, inEqSimp_commute)
    };

    inEqSimp_homoInEq0 {
        \find(homoLeft <= homoRight)
        \replacewith(add(homoRight, mul(homoLeft, -1)) >= 0)
        //\heuristics(inEqSimp_expand, inEqSimp_homo, notHumanReadable)
    };

    inEqSimp_homoInEq1 {
        \find(homoLeft >= homoRight)
        \replacewith(add(homoRight, mul(homoLeft, -1)) <= 0)
        //\heuristics(inEqSimp_expand, inEqSimp_homo, notHumanReadable)
    };

    inEqSimp_invertInEq0 {
        \find(invertLeft <= invertRight)
        \replacewith(invertLeft * (-1) >= invertRight * (-1))
        //\heuristics(inEqSimp_directInEquations, inEqSimp_normalise, notHumanReadable)
    };

    inEqSimp_invertInEq1 {
        \find(invertLeft >= invertRight)
        \replacewith(invertLeft * (-1) <= invertRight * (-1))
        //\heuristics(inEqSimp_directInEquations, inEqSimp_normalise, notHumanReadable)
    };

    inEqSimp_sepPosMonomial0 {
        \find(add(sepResidue, sepPosMono) <= 0)
        \replacewith(sepPosMono <= mul(sepResidue, -1))
        //\heuristics(inEqSimp_directInEquations, inEqSimp_balance, notHumanReadable)
    };

    inEqSimp_sepNegMonomial0 {
        \find(add(sepResidue, sepNegMono) <= 0)
        \replacewith(mul(sepNegMono, -1) >= sepResidue)
        //\heuristics(inEqSimp_directInEquations, inEqSimp_balance, notHumanReadable)
    };

    inEqSimp_sepPosMonomial1 {
        \find(add(sepResidue, sepPosMono) >= 0)
        \replacewith(sepPosMono >= mul(sepResidue, -1))
        //\heuristics(inEqSimp_directInEquations, inEqSimp_balance, notHumanReadable)
    };

    inEqSimp_sepNegMonomial1 {
        \find(add(sepResidue, sepNegMono) >= 0)
        \replacewith(mul(sepNegMono, -1) <= sepResidue)
        //\heuristics(inEqSimp_directInEquations, inEqSimp_balance, notHumanReadable)
    };

    inEqSimp_antiSymm {
        \assumes(i <= i0 ==>)
        \find(i >= i0 ==>)
        \add(i = i0 ==>)
        //\heuristics(inEqSimp_saturate, inEqSimp_antiSymm)
    };

    inEqSimp_exactShadow0 {
        \assumes(mul(esLeft, esCoeff1) <= esRight1 ==>)
        \find(mul(esLeft, esCoeff2) >= esRight2 ==>)
        \add((esCoeff1 > 0 & esCoeff2 > 0)
            ->
            (-1) * mul(esCoeff1, esRight2)
            + mul(esCoeff2, esRight1) >= 0
            ==>)
        //\heuristics(inEqSimp_saturate, inEqSimp_exactShadow, notHumanReadable)
    };

    inEqSimp_exactShadow1 {
        \assumes(esLeft <= esRight1 ==>)
        \find(mul(esLeft, esCoeff2) >= esRight2 ==>)
        \add((esCoeff2 > 0)
            ->
            (-1) * esRight2 + mul(esCoeff2, esRight1) >= 0
            ==>)
        //\heuristics(inEqSimp_saturate, inEqSimp_exactShadow, notHumanReadable)
    };

    inEqSimp_exactShadow2 {
        \assumes(mul(esLeft, esCoeff1) <= esRight1 ==>)
        \find(esLeft >= esRight2 ==>)
        \add((esCoeff1 > 0)
            ->
            (-1) * mul(esCoeff1, esRight2) + esRight1 >= 0
            ==>)
        //\heuristics(inEqSimp_saturate, inEqSimp_exactShadow, notHumanReadable)
    };

    inEqSimp_exactShadow3 {
        \assumes(esLeft <= esRight1 ==>)
        \find(esLeft >= esRight2 ==>)
        \add((-1) * esRight2 + esRight1 >= 0 ==>)
        //\heuristics(inEqSimp_saturate, inEqSimp_exactShadow, notHumanReadable)
    };

    inEqSimp_subsumption0 {
        \assumes(subsumLeft <= subsumRightSmaller ==>)
        \find(subsumLeft <= subsumRightBigger)
        \sameUpdateLevel
        \replacewith(subsumRightSmaller <= subsumRightBigger |
            subsumLeft <= subsumRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_subsumption, notHumanReadable)
    };

    inEqSimp_subsumption1 {
        \assumes(subsumLeft >= subsumRightBigger ==>)
        \find(subsumLeft >= subsumRightSmaller)
        \sameUpdateLevel
        \replacewith(subsumRightSmaller <= subsumRightBigger |
            subsumLeft >= subsumRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_subsumption, notHumanReadable)
    };

    inEqSimp_subsumption2 {
        \assumes(subsumLeft * subsumCoeffSmaller <= subsumRightSmaller ==>)
        \find(subsumLeft * subsumCoeffBigger <= subsumRightBigger)
        \sameUpdateLevel
        \replacewith((subsumCoeffSmaller > 0
                & subsumCoeffBigger > 0
                & subsumCoeffBigger * subsumRightSmaller <=
                subsumCoeffSmaller * subsumRightBigger) |
            subsumLeft * subsumCoeffBigger <= subsumRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_subsumption, notHumanReadable)
    };

    inEqSimp_subsumption4 {
        \assumes(subsumLeft <= subsumRightSmaller ==>)
        \find(subsumLeft * subsumCoeffBigger <= subsumRightBigger)
        \sameUpdateLevel
        \replacewith((subsumCoeffBigger > 0
                & subsumCoeffBigger * subsumRightSmaller <=
                subsumRightBigger) |
            subsumLeft * subsumCoeffBigger <= subsumRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_subsumption, notHumanReadable)
    };

    inEqSimp_subsumption5 {
        \assumes(subsumLeft * subsumCoeffBigger >= subsumRightBigger ==>)
        \find(subsumLeft * subsumCoeffSmaller >= subsumRightSmaller)
        \sameUpdateLevel
        \replacewith((subsumCoeffSmaller > 0
                & subsumCoeffBigger > 0
                & subsumCoeffBigger * subsumRightSmaller <=
                subsumCoeffSmaller * subsumRightBigger) |
            subsumLeft * subsumCoeffSmaller >= subsumRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_subsumption, notHumanReadable)
    };

    inEqSimp_subsumption6 {
        \assumes(subsumLeft >= subsumRightBigger ==>)
        \find(subsumLeft * subsumCoeffSmaller >= subsumRightSmaller)
        \sameUpdateLevel
        \replacewith((subsumCoeffSmaller > 0
                & subsumRightSmaller <=
                subsumCoeffSmaller * subsumRightBigger) |
            subsumLeft * subsumCoeffSmaller >= subsumRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_subsumption, notHumanReadable)
    };

    inEqSimp_contradInEq0 {
        \assumes(contradLeft <= contradRightSmaller ==>)
        \find(contradLeft >= contradRightBigger)
        \sameUpdateLevel
        \replacewith(contradRightSmaller >= contradRightBigger &
            contradLeft >= contradRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradInEqs, notHumanReadable)
    };

    inEqSimp_contradInEq1 {
        \assumes(contradLeft >= contradRightBigger ==>)
        \find(contradLeft <= contradRightSmaller)
        \sameUpdateLevel
        \replacewith(contradRightSmaller >= contradRightBigger &
            contradLeft <= contradRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradInEqs, notHumanReadable)
    };

    inEqSimp_contradInEq2 {
        \assumes(contradLeft * contradCoeffSmaller <= contradRightSmaller ==>)
        \find(contradLeft * contradCoeffBigger >= contradRightBigger)
        \sameUpdateLevel
        \replacewith((contradCoeffSmaller > 0 ->
                contradCoeffBigger > 0 ->
                contradCoeffBigger * contradRightSmaller >=
                contradCoeffSmaller * contradRightBigger) &
            contradLeft * contradCoeffBigger >= contradRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradInEqs, notHumanReadable)
    };

    inEqSimp_contradInEq3 {
        \assumes(contradLeft <= contradRightSmaller ==>)
        \find(contradLeft * contradCoeffBigger >= contradRightBigger)
        \sameUpdateLevel
        \replacewith((contradCoeffBigger > 0 ->
                contradCoeffBigger * contradRightSmaller >=
                contradRightBigger) &
            contradLeft * contradCoeffBigger >= contradRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradInEqs, notHumanReadable)
    };

    inEqSimp_contradInEq4 {
        \assumes(contradLeft * contradCoeffBigger >= contradRightBigger ==>)
        \find(contradLeft * contradCoeffSmaller <= contradRightSmaller)
        \sameUpdateLevel
        \replacewith((contradCoeffSmaller > 0 ->
                contradCoeffBigger > 0 ->
                contradCoeffBigger * contradRightSmaller >=
                contradCoeffSmaller * contradRightBigger) &
            contradLeft * contradCoeffSmaller <= contradRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradInEqs, notHumanReadable)
    };

    inEqSimp_contradInEq5 {
        \assumes(contradLeft >= contradRightBigger ==>)
        \find(contradLeft * contradCoeffSmaller <= contradRightSmaller)
        \sameUpdateLevel
        \replacewith((contradCoeffSmaller > 0 ->
                contradRightSmaller >=
                contradCoeffSmaller * contradRightBigger) &
            contradLeft * contradCoeffSmaller <= contradRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradInEqs, notHumanReadable)
    };

    inEqSimp_strengthen0 {
        \assumes( ==> strengthenLeft = strengthenRight)
        \find(strengthenLeft <= strengthenRight ==>)
        \replacewith(strengthenLeft <= -1 + strengthenRight ==>)
        //\heuristics(inEqSimp_propagation, inEqSimp_strengthen, notHumanReadable)
    };

    inEqSimp_strengthen1 {
        \assumes( ==> strengthenLeft = strengthenRight)
        \find(strengthenLeft >= strengthenRight ==>)
        \replacewith(strengthenLeft >= 1 + strengthenRight ==>)
        //\heuristics(inEqSimp_propagation, inEqSimp_strengthen, notHumanReadable)
    };

    inEqSimp_contradEq3 {
        \assumes(contradLeft <= contradRightSmaller ==>)
        \find(contradLeft = contradRightBigger)
        \sameUpdateLevel
        \replacewith(contradRightSmaller + (-1) * contradRightBigger >= 0 &
            contradLeft = contradRightBigger)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradEqs, notHumanReadable)
    };

    inEqSimp_contradEq7 {
        \assumes(contradLeft >= contradRightBigger ==>)
        \find(contradLeft = contradRightSmaller)
        \sameUpdateLevel
        \replacewith(contradRightBigger + (-1) * contradRightSmaller <= 0 &
            contradLeft = contradRightSmaller)
        //\heuristics(inEqSimp_propagation, inEqSimp_contradEqs, notHumanReadable)
    };

    \lemma
    irrflConcrete1 {
        \find(i < i ==>)
        \replacewith(false ==>)
        //\heuristics(concrete)
    };
    \lemma
    irrflConcrete2 {
        \find(i > i ==>)
        \replacewith(false ==>)
        //\heuristics(concrete)
    };

    // PHS 13.03.2019
    // This taclet appears here because its proof uses  induction
    \lemma
    cancel_gtPos {
        \schemaVar \term int Less, More, Fac;
        \assumes(Fac > 0 ==>)
        \find(Less < More ==>)
        \add(Less * Fac < More * Fac ==>)
    };

    // PHS 14.03.2019
    // This taclet appears here because its proof uses  induction
    \lemma
    cancel_gtNeg {
        \schemaVar \term int Less, More, Fac;
        \assumes(Fac < 0 ==>)
        \find(Less < More ==>)
        \add(Less * Fac > More * Fac ==>)
    };

}

// ---------------------------------------------------------------------------
// ------------- formula normalisation ---------------------------------------
// ---------------------------------------------------------------------------

// conjunctions and disjunctions are normalised so that they are left-associative,
// <= is left of >= is left of = (provided that the left sides are equal)

\rules {

    inEqSimp_notLeq {
        \find(!(i <= i0))
        \replacewith((-1) + (-1) * i0 + i >= 0)
        //\heuristics(inEqSimp_forNormalisation, notHumanReadable)
    };

    inEqSimp_notGeq {
        \find(!(i >= i0))
        \replacewith(1 + (-1) * i0 + i <= 0)
        //\heuristics(inEqSimp_forNormalisation, notHumanReadable)
    };

    inEqSimp_and_antiSymm0 {
        \find(i <= i0 & i >= i0)
        \replacewith(i = i0)
        //\heuristics(inEqSimp_forNormalisation)
    };

    inEqSimp_and_antiSymm1 {
        \find((b & i <= i0) & i >= i0)
        \replacewith(b & i = i0)
        //\heuristics(inEqSimp_forNormalisation)
    };

    inEqSimp_and_contradInEq0 {
        \find(contradLeft <= contradRightSmaller
            & contradLeft >= contradRightBigger)
        \replacewith((contradLeft <= contradRightSmaller
                & contradLeft >= contradRightBigger)
            & contradRightSmaller >= contradRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_and_contradInEqs,
            notHumanReadable)*/
    };

    inEqSimp_and_contradInEq1 {
        \find((b & contradLeft <= contradRightSmaller)
            & contradLeft >= contradRightBigger)
        \replacewith(((b & contradLeft <= contradRightSmaller)
                & contradLeft >= contradRightBigger)
            & contradRightSmaller >= contradRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_and_contradInEqs,
            notHumanReadable)*/
    };

    inEqSimp_and_strengthen0 {
        \find(strengthenLeft <= strengthenRight
            & strengthenLeft != strengthenRight)
        \replacewith(strengthenLeft <= -1 + strengthenRight)
        //\heuristics(inEqSimp_forNormalisation, notHumanReadable)

    };

    inEqSimp_and_strengthen1 {
        \find(strengthenLeft >= strengthenRight
            & strengthenLeft != strengthenRight)
        \replacewith(strengthenLeft >= 1 + strengthenRight)
        //\heuristics(inEqSimp_forNormalisation, notHumanReadable)
    };

    inEqSimp_and_strengthen2 {
        \find((b & strengthenLeft <= strengthenRight)
            & strengthenLeft != strengthenRight)
        \replacewith(b & strengthenLeft <= -1 + strengthenRight)
        //\heuristics(inEqSimp_forNormalisation, notHumanReadable)

    };

    inEqSimp_and_strengthen3 {
        \find((b & strengthenLeft >= strengthenRight)
            & strengthenLeft != strengthenRight)
        \replacewith(b & strengthenLeft >= 1 + strengthenRight)
        //\heuristics(inEqSimp_forNormalisation, notHumanReadable)
    };

    inEqSimp_and_subsumption0 {
        \find(subsumLeft <= subsumRightSmaller
            & subsumLeft <= subsumRightBigger)
        \replacewith(subsumLeft <= subsumRightSmaller
            & (subsumRightSmaller <= subsumRightBigger
                | subsumLeft <= subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption, notHumanReadable)*/
    };

    inEqSimp_and_subsumption1 {
        \find((b & subsumLeft <= subsumRightSmaller)
            & subsumLeft <= subsumRightBigger)
        \replacewith((b & subsumLeft <= subsumRightSmaller)
            & (subsumRightSmaller <= subsumRightBigger
                | subsumLeft <= subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption, notHumanReadable)*/
    };

    inEqSimp_and_subsumption2 {
        \find(subsumLeft >= subsumRightSmaller
            & subsumLeft >= subsumRightBigger)
        \replacewith((subsumRightSmaller <= subsumRightBigger
                | subsumLeft >= subsumRightSmaller)
            & subsumLeft >= subsumRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption, notHumanReadable)*/
    };

    inEqSimp_and_subsumption3 {
        \find((b & subsumLeft >= subsumRightSmaller)
            & subsumLeft >= subsumRightBigger)
        \replacewith((b & (subsumRightSmaller <= subsumRightBigger
                    | subsumLeft >= subsumRightSmaller))
            & subsumLeft >= subsumRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption, notHumanReadable)*/
    };

    inEqSimp_and_subsumption4 {
        \find(subsumLeft <= subsumRightSmaller
            & subsumLeft != subsumRightBigger)
        \replacewith(subsumLeft <= subsumRightSmaller
            & (subsumRightSmaller < subsumRightBigger
                | subsumLeft != subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_and_subsumptionEq, notHumanReadable)*/
    };

    inEqSimp_and_subsumption5 {
        \find((b & subsumLeft <= subsumRightSmaller)
            & subsumLeft != subsumRightBigger)
        \replacewith((b & subsumLeft <= subsumRightSmaller)
            & (subsumRightSmaller < subsumRightBigger
                | subsumLeft != subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_and_subsumptionEq, notHumanReadable)*/
    };

    inEqSimp_and_subsumption6 {
        \find(subsumLeft >= subsumRightBigger
            & subsumLeft != subsumRightSmaller)
        \replacewith(subsumLeft >= subsumRightBigger
            & (subsumRightSmaller < subsumRightBigger
                | subsumLeft != subsumRightSmaller))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_and_subsumptionEq, notHumanReadable)*/
    };

    inEqSimp_and_subsumption7 {
        \find((b & subsumLeft >= subsumRightBigger)
            & subsumLeft != subsumRightSmaller)
        \replacewith((b & subsumLeft >= subsumRightBigger)
            & (subsumRightSmaller < subsumRightBigger
                | subsumLeft != subsumRightSmaller))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_and_subsumptionEq, notHumanReadable)*/
    };

    inEqSimp_or_antiSymm0 {
        \find(antiSymmLeft <= antiSymmRightSmaller
            | antiSymmLeft >= antiSymmRightBigger)
        \replacewith(\if(2 + antiSymmRightSmaller
                = antiSymmRightBigger)
                \then(antiSymmLeft != 1 + antiSymmRightSmaller)
                \else(antiSymmLeft <= antiSymmRightSmaller
                    | antiSymmLeft >= antiSymmRightBigger))
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_antiSymm, notHumanReadable)
    };

    inEqSimp_or_antiSymm1 {
        \find((b | antiSymmLeft <= antiSymmRightSmaller)
            | antiSymmLeft >= antiSymmRightBigger)
        \replacewith(b |
            \if(2 + antiSymmRightSmaller
                = antiSymmRightBigger)
                \then(antiSymmLeft != 1 + antiSymmRightSmaller)
                \else(antiSymmLeft <= antiSymmRightSmaller
                    | antiSymmLeft >= antiSymmRightBigger))
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_antiSymm, notHumanReadable)
    };

    inEqSimp_or_tautInEq0 {
        \find(tautLeft <= tautRightBigger
            | tautLeft >= tautRightSmaller)
        \replacewith((tautLeft <= tautRightBigger
                | tautLeft >= tautRightSmaller)
            | tautRightBigger >= (-1) + tautRightSmaller)
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_tautInEqs, notHumanReadable)
    };

    inEqSimp_or_tautInEq1 {
        \find((b | tautLeft <= tautRightBigger)
            | tautLeft >= tautRightSmaller)
        \replacewith(((b | tautLeft <= tautRightBigger)
                | tautLeft >= tautRightSmaller)
            | tautRightBigger >= (-1) + tautRightSmaller)
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_tautInEqs, notHumanReadable)
    };

    inEqSimp_or_tautInEq2 {
        \find(tautLeft >= tautRightSmaller
            | tautLeft <= tautRightBigger)
        \replacewith((tautLeft >= tautRightSmaller
                | tautLeft <= tautRightBigger)
            | tautRightBigger >= (-1) + tautRightSmaller)
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_tautInEqs, notHumanReadable)
    };

    inEqSimp_or_tautInEq3 {
        \find((b | tautLeft >= tautRightSmaller)
            | tautLeft <= tautRightBigger)
        \replacewith(((b | tautLeft >= tautRightSmaller)
                | tautLeft <= tautRightBigger)
            | tautRightBigger >= (-1) + tautRightSmaller)
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_tautInEqs, notHumanReadable)
    };

    inEqSimp_or_weaken0 {
        \find(weakenLeft <= weakenRightSmaller
            | weakenLeft = weakenRightBigger)
        \replacewith(\if(weakenRightBigger = 1 + weakenRightSmaller)
                \then(weakenLeft <= weakenRightBigger)
                \else(weakenLeft <= weakenRightSmaller
                    | weakenLeft = weakenRightBigger))
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_weaken, notHumanReadable)
    };

    inEqSimp_or_weaken1 {
        \find(weakenLeft = weakenRightSmaller
            | weakenLeft >= weakenRightBigger)
        \replacewith(\if(weakenRightBigger = 1 + weakenRightSmaller)
                \then(weakenLeft >= weakenRightSmaller)
                \else(weakenLeft = weakenRightSmaller
                    | weakenLeft >= weakenRightBigger))
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_weaken, notHumanReadable)
    };

    inEqSimp_or_weaken2 {
        \find((b | weakenLeft <= weakenRightSmaller)
            | weakenLeft = weakenRightBigger)
        \replacewith(b |
            \if(weakenRightBigger = 1 + weakenRightSmaller)
                \then(weakenLeft <= weakenRightBigger)
                \else(weakenLeft <= weakenRightSmaller
                    | weakenLeft = weakenRightBigger))
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_weaken, notHumanReadable)
    };

    inEqSimp_or_weaken3 {
        \find((b | weakenLeft = weakenRightSmaller)
            | weakenLeft >= weakenRightBigger)
        \replacewith(b |
            \if(weakenRightBigger = 1 + weakenRightSmaller)
                \then(weakenLeft >= weakenRightSmaller)
                \else(weakenLeft = weakenRightSmaller
                    | weakenLeft >= weakenRightBigger))
        //\heuristics(inEqSimp_forNormalisation, inEqSimp_or_weaken, notHumanReadable)
    };

    inEqSimp_or_subsumption0 {
        \find(subsumLeft <= subsumRightSmaller
            | subsumLeft <= subsumRightBigger)
        \replacewith((subsumRightSmaller >= subsumRightBigger
                & subsumLeft <= subsumRightSmaller)
            | subsumLeft <= subsumRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption1 {
        \find((b | subsumLeft <= subsumRightSmaller)
            | subsumLeft <= subsumRightBigger)
        \replacewith((b | (subsumRightSmaller >= subsumRightBigger
                    & subsumLeft <= subsumRightSmaller))
            | subsumLeft <= subsumRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption2 {
        \find(subsumLeft >= subsumRightSmaller
            | subsumLeft >= subsumRightBigger)
        \replacewith(subsumLeft >= subsumRightSmaller
            | (subsumRightSmaller >= subsumRightBigger
                & subsumLeft >= subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption3 {
        \find((b | subsumLeft >= subsumRightSmaller)
            | subsumLeft >= subsumRightBigger)
        \replacewith((b | subsumLeft >= subsumRightSmaller)
            | (subsumRightSmaller >= subsumRightBigger
                & subsumLeft >= subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption4 {
        \find(subsumLeft = subsumRightSmaller
            | subsumLeft <= subsumRightBigger)
        \replacewith((subsumRightSmaller > subsumRightBigger
                & subsumLeft = subsumRightSmaller)
            | subsumLeft <= subsumRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption5 {
        \find((b | subsumLeft = subsumRightSmaller)
            | subsumLeft <= subsumRightBigger)
        \replacewith((b | (subsumRightSmaller > subsumRightBigger
                    & subsumLeft = subsumRightSmaller))
            | subsumLeft <= subsumRightBigger)
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption6 {
        \find(subsumLeft >= subsumRightSmaller
            | subsumLeft = subsumRightBigger)
        \replacewith(subsumLeft >= subsumRightSmaller
            | (subsumRightSmaller > subsumRightBigger
                & subsumLeft = subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    inEqSimp_or_subsumption7 {
        \find((b | subsumLeft >= subsumRightSmaller)
            | subsumLeft = subsumRightBigger)
        \replacewith((b | subsumLeft >= subsumRightSmaller)
            | (subsumRightSmaller > subsumRightBigger
                & subsumLeft = subsumRightBigger))
        /*\heuristics(inEqSimp_forNormalisation,
            inEqSimp_andOr_subsumption,
            notHumanReadable)*/
    };

    applyEq_and_int0 {
        \find(applyEqLeft >= applyEqOther
            & applyEqLeft = applyEqRight)
        \replacewith(applyEqRight >= applyEqOther
            & applyEqLeft = applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int1 {
        \find((b & applyEqLeft >= applyEqOther)
            & applyEqLeft = applyEqRight)
        \replacewith((b & applyEqRight >= applyEqOther)
            & applyEqLeft = applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int2 {
        \find(applyEqLeft <= applyEqOther
            & applyEqLeft = applyEqRight)
        \replacewith(applyEqRight <= applyEqOther
            & applyEqLeft = applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int3 {
        \find((b & applyEqLeft <= applyEqOther)
            & applyEqLeft = applyEqRight)
        \replacewith((b & applyEqRight <= applyEqOther)
            & applyEqLeft = applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int4 {
        \find(applyEqLeft = applyEqRight
            & applyEqLeft >= applyEqOther)
        \replacewith(applyEqLeft = applyEqRight
            & applyEqRight >= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int5 {
        \find((b & applyEqLeft = applyEqRight)
            & applyEqLeft >= applyEqOther)
        \replacewith((b & applyEqLeft = applyEqRight)
            & applyEqRight >= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int6 {
        \find(applyEqLeft = applyEqRight
            & applyEqLeft <= applyEqOther)
        \replacewith(applyEqLeft = applyEqRight
            & applyEqRight <= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_and_int7 {
        \find((b & applyEqLeft = applyEqRight)
            & applyEqLeft <= applyEqOther)
        \replacewith((b & applyEqLeft = applyEqRight)
            & applyEqRight <= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int0 {
        \find(applyEqLeft >= applyEqOther
            | applyEqLeft != applyEqRight)
        \replacewith(applyEqRight >= applyEqOther
            | applyEqLeft != applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int1 {
        \find((b | applyEqLeft >= applyEqOther)
            | applyEqLeft != applyEqRight)
        \replacewith((b | applyEqRight >= applyEqOther)
            | applyEqLeft != applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int2 {
        \find(applyEqLeft <= applyEqOther
            | applyEqLeft != applyEqRight)
        \replacewith(applyEqRight <= applyEqOther
            | applyEqLeft != applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int3 {
        \find((b | applyEqLeft <= applyEqOther)
            | applyEqLeft != applyEqRight)
        \replacewith((b | applyEqRight <= applyEqOther)
            | applyEqLeft != applyEqRight)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int4 {
        \find(applyEqLeft != applyEqRight
            | applyEqLeft >= applyEqOther)
        \replacewith(applyEqLeft != applyEqRight
            | applyEqRight >= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int5 {
        \find((b | applyEqLeft != applyEqRight)
            | applyEqLeft >= applyEqOther)
        \replacewith((b | applyEqLeft != applyEqRight)
            | applyEqRight >= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int6 {
        \find(applyEqLeft != applyEqRight
            | applyEqLeft <= applyEqOther)
        \replacewith(applyEqLeft != applyEqRight
            | applyEqRight <= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

    applyEq_or_int7 {
        \find((b | applyEqLeft != applyEqRight)
            | applyEqLeft <= applyEqOther)
        \replacewith((b | applyEqLeft != applyEqRight)
            | applyEqRight <= applyEqOther)
        //\heuristics(apply_equations_andOr)
    };

}

// ---------------------------------------------------------------------------
// ------------- dividing equations and inequations by literals --------------
// ---------------------------------------------------------------------------

\rules/*(integerSimplificationRules:full)*/ {
    cancel_equation {
        \schemaVar \term int eqLeft, eqRight, Fac;
        \find(eqLeft * Fac = eqRight * Fac)
        \replacewith(eqLeft = eqRight);
        \add( ==> Fac != 0)
        //\heuristics(simplify_enlarging)
    };

    elimGcdEq {
        \find(elimGcdLeft = elimGcdRight)
        \replacewith(\if(elimGcdLeftDiv * elimGcd = elimGcdLeft
                & elimGcdRight + (elimGcd * (-1)) * elimGcdRightDiv
                <= (-1) + elimGcd
                & elimGcdRight + (elimGcd * (-1)) * elimGcdRightDiv
                >= 0)
                \then(elimGcdRight + (elimGcd * (-1)) * elimGcdRightDiv = 0
                    & elimGcdLeftDiv = elimGcdRightDiv)
                \else(elimGcdLeft = elimGcdRight))
        //\heuristics(polySimp_pullOutGcd, notHumanReadable)
    };

    elimGcdLeq {
        \find(elimGcdLeft <= elimGcdRight)
        \replacewith(\if(1 - elimGcd
                + (elimGcd * (-1)) * elimGcdRightDiv + elimGcdRight
                + elimGcdLeftDiv * elimGcd + elimGcdLeft * (-1)
                <= 0
                & (elimGcd * (-1)) * elimGcdRightDiv + elimGcdRight
                + elimGcdLeftDiv * elimGcd + elimGcdLeft * (-1)
                >= 0)
                \then(elimGcdLeftDiv <= elimGcdRightDiv)
                \else(elimGcdLeft <= elimGcdRight))
        //\heuristics(inEqSimp_pullOutGcd, inEqSimp_pullOutGcd_leq, notHumanReadable)
    };

    elimGcdGeq {
        \find(elimGcdLeft >= elimGcdRight)
        \replacewith(\if(elimGcd - 1
                + (elimGcd * (-1)) * elimGcdRightDiv + elimGcdRight
                + elimGcdLeftDiv * elimGcd + elimGcdLeft * (-1)
                >= 0
                & (elimGcd * (-1)) * elimGcdRightDiv + elimGcdRight
                + elimGcdLeftDiv * elimGcd + elimGcdLeft * (-1)
                <= 0)
                \then(elimGcdLeftDiv >= elimGcdRightDiv)
                \else(elimGcdLeft >= elimGcdRight))
        //\heuristics(inEqSimp_pullOutGcd, inEqSimp_pullOutGcd_geq, notHumanReadable)
    };

    elimGcdLeq_antec {
        \find(elimGcdLeft <= elimGcdRight ==>)
        \replacewith(elimGcd <= 0
            | -elimGcd
            + (elimGcd * (-1)) * elimGcdRightDiv + elimGcdRight
            + elimGcdLeftDiv * elimGcd + elimGcdLeft * (-1)
            >= 0
            | elimGcdLeftDiv <= elimGcdRightDiv ==>)
        //\heuristics(inEqSimp_pullOutGcd, inEqSimp_pullOutGcd_leq, inEqSimp_pullOutGcd_antec, notHumanReadable)
    };

    elimGcdGeq_antec {
        \find(elimGcdLeft >= elimGcdRight ==>)
        \replacewith(elimGcd <= 0
            | elimGcd
            + (elimGcd * (-1)) * elimGcdRightDiv + elimGcdRight
            + elimGcdLeftDiv * elimGcd + elimGcdLeft * (-1)
            <= 0
            | elimGcdLeftDiv >= elimGcdRightDiv ==>)
        //\heuristics(inEqSimp_pullOutGcd, inEqSimp_pullOutGcd_geq, inEqSimp_pullOutGcd_antec, notHumanReadable)
    };

}

// ---------------------------------------------------------------------------
// ------------- case distinctions on the sign of a term ---------------------
// ---------------------------------------------------------------------------

\rules {
    sign_case_distinction {
        "#signCasesLeft is negative":
            \add(signCasesLeft <= -1 ==>);
        "#signCasesLeft is zero":
            \add(signCasesLeft = 0 ==>);
        "#signCasesLeft is positive":
            \add(signCasesLeft >= 1 ==>)
        //\heuristics(inEqSimp_signCases)
    };

    // ---------------------------------------------------------------------------
    // ------------- squares are always non-negative -----------------------------
    // ---------------------------------------------------------------------------

    add_non_neg_square {
        \add(squareFac * squareFac >= 0 ==>)
        //\heuristics(inEqSimp_special_nonLin,inEqSimp_nonNegSquares)
    };
}

// ---------------------------------------------------------------------------
// ------------- introduce new symbols for basis transformations -------------
// ---------------------------------------------------------------------------

/*\rules(integerSimplificationRules:full) {
    newSym_eq {
        \find(newSymLeft * newSymLeftCoeff = newSymRight ==>)
        \varcond(\newDependingOn(l, newSymDef),
            \newDependingOn(l, newSymLeft))
        \add(newSymLeft = l + newSymDef ==>)
        \heuristics(polySimp_leftNonUnit,
            polySimp_newSym, polySimp_newSmallSym)
    };

}*/
