/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    This file contains all rules moving an integer related assignment
    from the inside of a modality to the logic (as an update). The
    Rust operators are therefore mapped to their generic logic
    function. These generic functions (rust...) are later interpreted
    as mathematical function dependent on the chosen Rust semantics.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \modalOperator {diamond, box} #allmodal;

    \program RustU8Expression seu8, seu80, seu81;
    \program RustU16Expression seu16, seu160, seu161;
    \program RustU32Expression seu32, seu320, seu321;
    \program RustU64Expression seu64, seu640, seu641;
    \program RustU128Expression seu128, seu1280, seu1281;
    \program RustUsizeExpression seusize, seusize0, seusize1;

    \program RustI8Expression sei8, sei80, sei81;
    \program RustI16Expression sei16, sei160, sei161;
    \program RustI32Expression sei32, sei320, sei321;
    \program RustI64Expression sei64, sei640, sei641;
    \program RustI128Expression sei128, sei1280, sei1281;
    \program RustIsizeExpression seisize, seisize0, seisize1;

    \program Variable loc;

    \formula post;
}

\rules {
    // ------------------------------------------------------------------------
    // ----------- Rules for binary arithmetic operators
    // ------------------------------------------------------------------------

    // ------------- multiplication

    assignmentMultiplicationU8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu80 * s#seu81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u8(mul(seu80, seu81)))
        };
        \replacewith({loc := mul(seu80, seu81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationU16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu160 * s#seu161
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u16(mul(seu160, seu161)))
        };
        \replacewith({loc := mul(seu160, seu161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 * s#seu321
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u32(mul(seu320, seu321)))
        };
        \replacewith({loc := mul(seu320, seu321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationU64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu640 * s#seu641
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u64(mul(seu640, seu641)))
        };
        \replacewith({loc := mul(seu640, seu641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationU128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu1280 * s#seu1281
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u128(mul(seu1280, seu1281)))
        };
        \replacewith({loc := mul(seu1280, seu1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationUsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seusize0 * s#seusize1
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_usize(mul(seusize0, seusize1)))
        };
        \replacewith({loc := mul(seusize0, seusize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationI8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei80 * s#sei81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i8(mul(sei80, sei81)))
        };
        \replacewith({loc := mul(sei80, sei81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationI16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei160 * s#sei161
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i16(mul(sei160, sei161)))
        };
        \replacewith({loc := mul(sei160, sei161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationI32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei320 * s#sei321
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i32(mul(sei320, sei321)))
        };
        \replacewith({loc := mul(sei320, sei321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationI64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei640 * s#sei641
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i64(mul(sei640, sei641)))
        };
        \replacewith({loc := mul(sei640, sei641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationI128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei1280 * s#sei1281
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i128(mul(sei1280, sei1281)))
        };
        \replacewith({loc := mul(sei1280, sei1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationIsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seisize0 * s#seisize1
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_isize(mul(seisize0, seisize1)))
        };
        \replacewith({loc := mul(seisize0, seisize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    // ------------- subtraction

    assignmentSubtractionU8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu80 - s#seu81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u8(sub(seu80, seu81)))
        };
        \replacewith({loc := sub(seu80, seu81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionU16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu160 - s#seu161
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u16(sub(seu160, seu161)))
        };
        \replacewith({loc := sub(seu160, seu161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 - s#seu321
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u32(sub(seu320, seu321)))
        };
        \replacewith({loc := sub(seu320, seu321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionU64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu640 - s#seu641
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u64(sub(seu640, seu641)))
        };
        \replacewith({loc := sub(seu640, seu641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionU128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu1280 - s#seu1281
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u128(sub(seu1280, seu1281)))
        };
        \replacewith({loc := sub(seu1280, seu1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionUsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seusize0 - s#seusize1
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_usize(sub(seusize0, seusize1)))
        };
        \replacewith({loc := sub(seusize0, seusize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionI8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei80 - s#sei81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i8(sub(sei80, sei81)))
        };
        \replacewith({loc := sub(sei80, sei81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionI16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei160 - s#sei161
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i16(sub(sei160, sei161)))
        };
        \replacewith({loc := sub(sei160, sei161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionI32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei320 - s#sei321
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i32(sub(sei320, sei321)))
        };
        \replacewith({loc := sub(sei320, sei321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionI64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei640 - s#sei641
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i64(sub(sei640, sei641)))
        };
        \replacewith({loc := sub(sei640, sei641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionI128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei1280 - s#sei1281
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i128(sub(sei1280, sei1281)))
        };
        \replacewith({loc := sub(sei1280, sei1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionIsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seisize0 - s#seisize1
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_isize(sub(seisize0, seisize1)))
        };
        \replacewith({loc := sub(seisize0, seisize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    // ------------- addition

    assignmentAdditionU8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu80 + s#seu81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u8(add(seu80, seu81)))
        };
        \replacewith({loc := add(seu80, seu81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionU16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu160 + s#seu161
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u16(add(seu160, seu161)))
        };
        \replacewith({loc := add(seu160, seu161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 + s#seu321
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u32(add(seu320, seu321)))
        };
        \replacewith({loc := add(seu320, seu321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionU64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu640 + s#seu641
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u64(add(seu640, seu641)))
        };
        \replacewith({loc := add(seu640, seu641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionU128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu1280 + s#seu81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u128(add(seu1280, seu81)))
        };
        \replacewith({loc := add(seu1280, seu1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionUsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seusize0 + s#seusize1
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_usize(add(seusize0, seusize1)))
        };
        \replacewith({loc := add(seusize0, seusize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionI8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei80 + s#sei81
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i8(add(sei80, sei81)))
        };
        \replacewith({loc := add(sei80, sei81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionI16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei160 + s#sei161
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i16(add(sei160, sei161)))
        };
        \replacewith({loc := add(sei160, sei161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionI32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei320 + s#sei321
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i32(add(sei320, sei321)))
        };
        \replacewith({loc := add(sei320, sei321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionI64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei640 + s#sei641
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i64(add(sei640, sei641)))
        };
        \replacewith({loc := add(sei640, sei641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionI128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei1280 + s#sei1281
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_i128(add(sei1280, sei1281)))
        };
        \replacewith({loc := add(sei1280, sei1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionIsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seisize0 + s#seisize1
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_isize(add(seisize0, seisize1)))
        };
        \replacewith({loc := add(seisize0, seisize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };
}

// ------------- division

\rules(panics:ignore) {
    assignmentDivisionU8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu80 / s#seu81
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu80 = u8_MIN & seu81 = -1))
        };
        \replacewith({loc := rdiv(seu80, seu81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionU8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu80 / s#seu81
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu80 = u8_MIN & seu81 = -1))
        };
        \replacewith(\if(seu81 != 0) \then({loc := rdiv(seu80, seu81)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionU16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu160 / s#seu161
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu160 = u16_MIN & seu161 = -1))
        };
        \replacewith({loc := rdiv(seu160, seu161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionU16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu160 / s#seu161
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu160 = u16_MIN & seu161 = -1))
        };
        \replacewith(\if(seu161 != 0) \then({loc := rdiv(seu160, seu161)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 / s#seu321
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu320 = u32_MIN & seu321 = -1))
        };
        \replacewith({loc := rdiv(seu320, seu321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 / s#seu321
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu320 = u32_MIN & seu321 = -1))
        };
        \replacewith(\if(seu321 != 0) \then({loc := rdiv(seu320, seu321)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionU64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu640 / s#seu641
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu640 = u64_MIN & seu641 = -1))
        };
        \replacewith({loc := rdiv(seu640, seu641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionU64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu640 / s#seu641
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu640 = u64_MIN & seu641 = -1))
        };
        \replacewith(\if(seu641 != 0) \then({loc := rdiv(seu640, seu641)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionU128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu1280 / s#seu1281
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu1280 = u128_MIN & seu1281 = -1))
        };
        \replacewith({loc := rdiv(seu1280, seu1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionU128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu1280 / s#seu1281
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seu1280 = u128_MIN & seu1281 = -1))
        };
        \replacewith(\if(seu1281 != 0) \then({loc := rdiv(seu1280, seu1281)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionUsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seusize0 / s#seusize1
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seusize0 = usize_MIN & seusize1 = -1))
        };
        \replacewith({loc := rdiv(seusize0, seusize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionUsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seusize0 / s#seusize1
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seusize0 = usize_MIN & seusize1 = -1))
        };
        \replacewith(\if(seusize1 != 0) \then({loc := rdiv(seusize0, seusize1)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionI8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei80 / s#sei81
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei80 = i8_MIN & sei81 = -1))
        };
        \replacewith({loc := rdiv(sei80, sei81)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionI8 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei80 / s#sei81
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei80 = i8_MIN & sei81 = -1))
        };
        \replacewith(\if(sei81 != 0) \then({loc := rdiv(sei80, sei81)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionI16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei160 / s#sei161
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei160 = i16_MIN & sei161 = -1))
        };
        \replacewith({loc := rdiv(sei160, sei161)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionI16 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei160 / s#sei161
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei160 = i16_MIN & sei161 = -1))
        };
        \replacewith(\if(sei161 != 0) \then({loc := rdiv(sei160, sei161)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionI32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei320 / s#sei321
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei320 = i32_MIN & sei321 = -1))
        };
        \replacewith({loc := rdiv(sei320, sei321)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionI32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei320 / s#sei321
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei320 = i32_MIN & sei321 = -1))
        };
        \replacewith(\if(sei321 != 0) \then({loc := rdiv(sei320, sei321)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionI64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei640 / s#sei641
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei640 = i64_MIN & sei641 = -1))
        };
        \replacewith({loc := rdiv(sei640, sei641)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionI64 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei640 / s#sei641
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei640 = i64_MIN & sei641 = -1))
        };
        \replacewith(\if(sei641 != 0) \then({loc := rdiv(sei640, sei641)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionI128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei1280 / s#sei1281
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei1280 = i128_MIN & sei1281 = -1))
        };
        \replacewith({loc := rdiv(sei1280, sei1281)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionI128 {
        \find(\modality{#allmodal}{c#
                s#loc = s#sei1280 / s#sei1281
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(sei1280 = i128_MIN & sei1281 = -1))
        };
        \replacewith(\if(sei1281 != 0) \then({loc := rdiv(sei1280, sei1281)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:ignore) {
    assignmentDivisionIsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seisize0 / s#seisize1
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seisize0 = isize_MIN & seisize1 = -1))
        };
        \replacewith({loc := rdiv(seisize0, seisize1)}
        \modality{#allmodal}{c# () #c}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionIsize {
        \find(\modality{#allmodal}{c#
                s#loc = s#seisize0 / s#seisize1
            #c}\endmodality (post))
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> !(seisize0 = isize_MIN & seisize1 = -1))
        };
        \replacewith(\if(seisize1 != 0) \then({loc := rdiv(seisize0, seisize1)}
            \modality{#allmodal}{c# () #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}
