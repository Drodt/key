/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    This file contains all rules moving an integer related assignment
    from the inside of a modality to the logic (as an update). The
    Rust operators are therefore mapped to their generic logic
    function. These generic functions (rust...) are later interpreted
    as mathematical function dependent on the chosen Rust semantics.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \modalOperator {diamond, box} #allmodal;

    \program SimpleExpression se, se0, se1;
    \program RustU8Expression seu8, seu80, seu81;
    \program RustU16Expression seu16, seu160, seu161;
    \program RustU32Expression seu32, seu320, seu321;
    \program RustU64Expression seu64, seu640, seu641;
    \program RustU128Expression seu128, seu1280, seu1281;

    \program Variable loc;

    \formula post;
}

\rules {
    // ------------------------------------------------------------------------
    // ----------- Rules for binary arithmetic operators
    // ------------------------------------------------------------------------

    // ------------- multiplication

    assignmentMultiplicationU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 * s#seu321;
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u32(mul(seu320, seu321)))
        };
        \replacewith({loc := mul(seu320, seu321)}
        \modality{#allmodal}{c# #c}\endmodality (post))
        //\heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    // ------------- subtraction

    assignmentSubtractionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 - s#seu321;
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u32(sub(seu320, seu321)))
        };
        \replacewith({loc := sub(seu320, seu321)}
        \modality{#allmodal}{c# #c}\endmodality (post))
        //\heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    // ------------- addition

    assignmentAdditionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 + s#seu321;
            #c}\endmodality (post))
        \sameUpdateLevel
        (intRules:rustSemantics) {
            "Overflow check":
                \add(==> in_u32(add(seu320, seu321)))
        };
        \replacewith({loc := add(seu320, seu321)}
        \modality{#allmodal}{c# #c}\endmodality (post))
        //\heuristics(executeIntegerAssignment)
        \displayname "addition"
    };
}

\rules(panics:ignore) {
    assignmentDivisionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 / s#seu321;
            #c}\endmodality (post))
        \replacewith({loc := rdiv(seu320, seu321)}
        \modality{#allmodal}{c# #c}\endmodality (post))
        //\heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}

\rules(panics:allow) {
    assignmentDivisionU32 {
        \find(\modality{#allmodal}{c#
                s#loc = s#seu320 / s#seu321;
            #c}\endmodality (post))
        \replacewith(\if(seu321 != 0) \then({loc := rdiv(seu320, seu321)}
            \modality{#allmodal}{c# #c}\endmodality (post))
        \else (\modality{#allmodal}{c# panic!() #c}\endmodality (post))) // TODO: panic message
        //\heuristics(executeIntegerAssignment)
        \displayname "division"
    };
}