/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/*
 * This file contains the known taclet options (aka choices) as well as their documentation.
 */

 \optionsDecl {
    /*! This option controls how integer numbers are modeled. */
    intRules: {
        /*! 'Arithmetic without overflow checking' treats integers as pure
         *   mathematical objects. The proof obligations are often easier to
         *   discharge. However, the model allows the verification of properties
         *   which do not hold on Rust's actual semantics. This is the default
         *   option.
         *   @choiceDefaultOption @choiceUnsound
         */
        ignoreOverFlow,
        /*! 'Rust semantics' treat integers the same way Rust would treat them.
         *  The different integer types operate within their respective value
         *  ranges. This is sound and complete. Proof obligations tend
         *  to get more complex with this setting.*/
        javaSemantics
    };

    /*! Rules dealing Rust language constructs can be turned off by setting this to 'None'. */
    programRules: {Rust, /*! @choiceIncomplete */ None};
 }
