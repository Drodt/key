\programSource "./rustSrc";

\proofObligation
{
    "class": "org.key_project.rusty.proof.init.loader.FunctionOperationContractPOLoader",
    "contract": "test_array_enumerate.array.0",
    "name": "test_array_enumerate.array"
}

\proof {
    (branch "dummy"
        (rule "impRight" (formula "1"))
        (rule "function_body_expand" (formula "2"))
        (rule "let_ident_pat_assign_no_type" (formula "2"))
        (rule "let_ident_pat_no_type" (formula "2"))
        (rule "assign_enumerate_unfold" (formula "2"))
        (rule "let_ident_pat_assign" (formula "2"))
        (rule "let_ident_pat" (formula "2"))
        (rule "assign_subtraction_unfold_left" (formula "2"))
        (rule "let_ident_pat_assign" (formula "2"))
        (rule "let_ident_pat" (formula "2"))
        (rule "assignmentAdditionI32" (formula "2"))
        (rule "add_literals" (formula "2") (term "0,0"))
        (rule "simple_expr_stmt" (formula "2") (term "1"))
        (rule "assignmentSubtractionI32" (formula "2") (term "1"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "applyOnElementary" (formula "2") (term "1,0"))
        (rule "applyOnRigidTerm" (formula "2") (term "0,1,0"))
        (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
        (rule "simplifyUpdate2" (formula "2"))
        (rule "simple_expr_stmt" (formula "2") (term "1"))
        (rule "assign_enumerate_unfold" (formula "2") (term "1"))
        (rule "let_ident_pat_assign" (formula "2") (term "1"))
        (rule "let_ident_pat" (formula "2") (term "1"))
        (rule "assignmentAdditionI32" (formula "2") (term "1"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "simplifyUpdate3" (formula "2") (term "1,0"))
        (rule "simple_expr_stmt" (formula "2") (term "1"))
        (rule "assign_enumerate" (formula "2") (term "1"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "applyOnElementary" (formula "2") (term "1,0"))
        (rule "applyOnRigidTerm" (formula "2") (term "0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "2,0,1,0"))
        (rule "applyOnPV" (formula "2") (term "2,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
        (rule "applyOnRigidTerm" (formula "2") (term "0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "2,0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1,0"))
        (rule "applyOnRigidTerm" (formula "2") (term "0,0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "2,0,0,0,1,0"))
        (rule "applyOnPV" (formula "2") (term "2,0,0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "0,0,0,0,1,0"))
        (rule "simplifyUpdate2" (formula "2"))
        (rule "simple_expr_stmt" (formula "2") (term "1"))
        (rule "implicit_return_unfold" (formula "2") (term "1"))
        (rule "let_ident_pat_assign_no_type" (formula "2") (term "1"))
        (rule "let_ident_pat_no_type" (formula "2") (term "1"))
        (rule "assign_array_index" (formula "2") (term "1"))
        (branch "0 in bounds"
            (rule "sequentialToParallel2" (formula "3"))
            (rule "applyOnElementary" (formula "3") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "3") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "3") (term "0,0,1,0"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "simple_expr_stmt" (formula "3") (term "1"))
            (rule "implicit_return" (formula "3") (term "1"))
            (rule "assignment" (formula "3") (term "1"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "applyOnElementary" (formula "3") (term "1,0"))
            (rule "applyOnPV" (formula "3") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "simple_expr_stmt" (formula "3") (term "1"))
            (rule "empty_modality" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "get_of_set" (formula "3") (term "0"))
            (rule "eqClose" (formula "3") (term "0,0"))
            (rule "ifthenelse_true" (formula "3") (term "0"))
            (rule "sub_literals" (formula "3") (term "0"))
            (rule "eqClose" (formula "3"))
            (rule "closeTrue" (formula "3"))
        )
        (branch "0 out of bounds"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "greater_literals" (formula "1") (term "0"))
            (rule "concrete_not_1" (formula "1"))
            (rule "closeFalse" (formula "1"))
        )
    )
}