\programSource "./rustPath";

\proofObligation
{
    "class": "org.key_project.rusty.proof.init.loader.FunctionOperationContractPOLoader",
    "contract": "mul.normal specification case 0.0",
    "name": "mul.normal specification case 0.0"
}

\proof {
    (branch "dummy ID"
        (rule "impRight" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "andLeft" (formula "4"))
        (rule "functionBodyExpand" (formula "6") (term "1"))
        (rule "sequentialToParallel2" (formula "6"))
        (rule "applyOnParallel" (formula "6") (term "1,0"))
        (rule "simplifyUpdate3" (formula "6") (term "0,1,0"))
        (rule "applyOnElementary" (formula "6") (term "0,1,0"))
        (rule "applyOnPV" (formula "6") (term "0,0,1,0"))
        (rule "simplifyUpdate3" (formula "6") (term "1,1,0"))
        (rule "applyOnElementary" (formula "6") (term "1,1,0"))
        (rule "applyOnPV" (formula "6") (term "0,1,1,0"))
        (rule "letIdentPatAssignMut" (formula "6") (term "1"))
        (rule "letIdentPatMut" (formula "6") (term "1"))
        (rule "assignment" (formula "6") (term "1"))
        (rule "letIdentPatAssign" (formula "6") (term "1,1"))
        (rule "letIdentPat" (formula "6") (term "1,1"))
        (rule "assignment" (formula "6") (term "1,1"))
        (rule "sequentialToParallel2" (formula "6"))
        (rule "simplifyUpdate2" (formula "6"))
        (rule "simplifyUpdate3" (formula "6") (term "1,0"))
        (rule "sequentialToParallel2" (formula "6"))
        (rule "simplifyUpdate3" (formula "6") (term "1,0"))
        (rule "applyOnElementary" (formula "6") (term "1,0"))
        (rule "applyOnPV" (formula "6") (term "0,1,0"))
        (rule "loopScopeInvDia" (formula "6") (term "1"))
        (branch "Initially"
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate1" (formula "6") (term "0"))
            (rule "applyOnPV" (formula "6") (term "0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1"))
            (rule "applyOnPV" (formula "6") (term "0,1"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,1"))
            (rule "applyOnPV" (formula "6") (term "0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,1"))
            (rule "applyOnPV" (formula "6") (term "1,1,1"))
            (rule "i_minus_i_is_zero" (formula "6") (term "1,1"))
            (rule "times_zero_1" (formula "6") (term "1"))
            (rule "eqClose" (formula "6"))
            (rule "closeTrue" (formula "6"))
        )
        (branch "Use & preserve"
            (rule "letIdentPat" (formula "6") (term "1"))
            (rule "letIdentPatNoType" (formula "6") (term "1"))
            (rule "letIdentPatNoType" (formula "6") (term "1"))
            (rule "emptyModality" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnParallel" (formula "6") (term "1,0"))
            (rule "applyOnParallel" (formula "6") (term "0,1,0"))
            (rule "simplifyUpdate3" (formula "6") (term "0,0,1,0"))
            (rule "applyOnElementary" (formula "6") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0,1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,1,0"))
            (rule "simplifyUpdate3" (formula "6") (term "1,1,0"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,0"))
            (rule "applyOnPV" (formula "6") (term "0,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,1,0"))
            (rule "applyOnPV" (formula "6") (term "1,1,1,0"))
            (rule "impRight" (formula "6"))
            (rule "letIdentPat" (formula "7") (term "1"))
            (rule "ifUnfold" (formula "7") (term "1"))
            (rule "letIdentPatAssign" (formula "7") (term "1"))
            (rule "letIdentPat" (formula "7") (term "1"))
            (rule "equalityComparisonSimple" (formula "7") (term "1"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0"))
            (rule "applyOnElementary" (formula "7") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
            (rule "if" (formula "7") (term "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "simplifyUpdate2" (formula "7") (term "0"))
            (rule "applyOnRigidFormula" (formula "7") (term "0"))
            (rule "applyOnPV" (formula "7") (term "0,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0"))
            (rule "ifthenelse_concrete3" (formula "7") (term "0"))
            (rule "bool_not_equal_2" (formula "7") (term "1,0"))
            (rule "concrete_or_4" (formula "7") (term "0"))
            (rule "ifthenelse_split_for" (formula "7"))
            (branch "_b_0 true"
                (rule "blockBreakValue" (formula "8") (term "1"))
                (rule "blockBreakValue" (formula "8") (term "1"))
                (rule "lsBreakValue" (formula "8") (term "1"))
                (rule "assignment" (formula "8") (term "1"))
                (rule "assignment" (formula "8") (term "1"))
            )
            (branch "_b_0 false"
                (rule "applyOnPV" (formula "8") (term "0,0"))
            )
        )
    )
}