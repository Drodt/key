\programSource "./rustPath";

\withOptions intRules:rustSemantics;

\proofObligation
{
    "class": "org.key_project.rusty.proof.init.loader.FunctionOperationContractPOLoader",
    "contract": "mul.normal specification case 0.0",
    "name": "mul.normal specification case 0.0"
}

\proof {
    (branch "dummy ID"
        (rule "impRight" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "andLeft" (formula "4"))
        (rule "functionBodyExpand" (formula "6") (term "1"))
        (rule "sequentialToParallel2" (formula "6"))
        (rule "applyOnParallel" (formula "6") (term "1,0"))
        (rule "simplifyUpdate3" (formula "6") (term "0,1,0"))
        (rule "applyOnElementary" (formula "6") (term "0,1,0"))
        (rule "applyOnPV" (formula "6") (term "0,0,1,0"))
        (rule "simplifyUpdate3" (formula "6") (term "1,1,0"))
        (rule "applyOnElementary" (formula "6") (term "1,1,0"))
        (rule "applyOnPV" (formula "6") (term "0,1,1,0"))
        (rule "letIdentPatAssignMut" (formula "6") (term "1"))
        (rule "letIdentPatMut" (formula "6") (term "1"))
        (rule "assignment" (formula "6") (term "1"))
        (rule "simpleExprStmt" (formula "6") (term "1,1"))
        (rule "letIdentPatAssign" (formula "6") (term "1,1"))
        (rule "letIdentPat" (formula "6") (term "1,1"))
        (rule "assignment" (formula "6") (term "1,1"))
        (rule "simpleExprStmt" (formula "6") (term "1,1,1"))
        (rule "sequentialToParallel2" (formula "6"))
        (rule "simplifyUpdate2" (formula "6"))
        (rule "simplifyUpdate3" (formula "6") (term "1,0"))
        (rule "sequentialToParallel2" (formula "6"))
        (rule "simplifyUpdate3" (formula "6") (term "1,0"))
        (rule "applyOnElementary" (formula "6") (term "1,0"))
        (rule "applyOnPV" (formula "6") (term "0,1,0"))
        (rule "loopScopeInvDia" (formula "6") (term "1"))
        (branch "Initially"
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,1,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,1,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,1,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,1,0,0"))
            (rule "applyOnPV" (formula "6") (term "1,1,1,0,0"))
            (rule "i_minus_i_is_zero" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "eqClose" (formula "6") (term "0,0"))
            (rule "concrete_and_1" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,0"))
            (rule "applyOnPV" (formula "6") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1"))
            (rule "applyOnPV" (formula "6") (term "0,1"))
            (rule "replace_known_left" (formula "6") (term "0"))
            (rule "concrete_and_1" (formula "6"))
            (rule "expand_in_u64" (formula "6"))
            (rule "replace_u64_MIN" (formula "6") (term "0,0"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "replace_u64_MAX" (formula "6") (term "1,1"))
            (rule "leq_literals" (formula "6") (term "1"))
            (rule "concrete_and_1" (formula "6"))
            (rule "closeTrue" (formula "6"))
        )
        (branch "Use & preserve"
            (rule "letIdentPat" (formula "6") (term "1"))
            (rule "letIdentPatNoType" (formula "6") (term "1"))
            (rule "letIdentPatNoType" (formula "6") (term "1"))
            (rule "emptyModality" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnParallel" (formula "6") (term "1,0"))
            (rule "applyOnParallel" (formula "6") (term "0,1,0"))
            (rule "simplifyUpdate3" (formula "6") (term "0,0,1,0"))
            (rule "applyOnElementary" (formula "6") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0,1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,1,0"))
            (rule "simplifyUpdate3" (formula "6") (term "1,1,0"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,0,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,0,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,0,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,1,0,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,1,0,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,1,0,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,1,0,0,0"))
            (rule "applyOnPV" (formula "6") (term "1,1,1,0,0,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0"))
            (rule "impRight" (formula "6"))
            (rule "letIdentPat" (formula "7") (term "1"))
            (rule "ifUnfold" (formula "7") (term "1"))
            (rule "letIdentPatAssign" (formula "7") (term "1"))
            (rule "letIdentPat" (formula "7") (term "1"))
            (rule "equalityComparisonSimple" (formula "7") (term "1"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0"))
            (rule "applyOnElementary" (formula "7") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
            (rule "simpleExprStmt" (formula "7") (term "1"))
            (rule "if" (formula "7") (term "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "simplifyUpdate2" (formula "7") (term "0"))
            (rule "applyOnRigidFormula" (formula "7") (term "0"))
            (rule "applyOnPV" (formula "7") (term "0,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0"))
            (rule "ifthenelse_concrete3" (formula "7") (term "0"))
            (rule "bool_not_equal_2" (formula "7") (term "1,0"))
            (rule "concrete_or_4" (formula "7") (term "0"))
            (rule "ifthenelse_split_for" (formula "7"))
            (branch "_b_0 true"
                (rule "blockBreakValue" (formula "8") (term "1"))
                (rule "blockBreakValue" (formula "8") (term "1"))
                (rule "blockBreakValue" (formula "8") (term "1"))
                (rule "lsBreakValue" (formula "8") (term "1"))
                (rule "assignment" (formula "8") (term "1"))
                (rule "sequentialToParallel2" (formula "8"))
                (rule "simplifyUpdate2" (formula "8"))
                (rule "simpleExprStmt" (formula "8") (term "1"))
                (rule "implicitReturn" (formula "8") (term "1"))
                (rule "assignment" (formula "8") (term "1"))
                (rule "simpleExprStmt" (formula "8") (term "1,1"))
                (rule "emptyModality" (formula "8") (term "1,1"))
                (rule "sequentialToParallel2" (formula "8"))
                (rule "simplifyUpdate3" (formula "8") (term "1,0,0"))
                (rule "simplifyUpdate3" (formula "8") (term "1,0,1,0"))
                (rule "simplifyUpdate3" (formula "8") (term "1,0"))
                (rule "applyOnElementary" (formula "8") (term "1,0"))
                (rule "applyOnPV" (formula "8") (term "0,1,0"))
                (rule "applyOnRigidFormula" (formula "8"))
                (rule "applyOnRigidFormula" (formula "8") (term "0"))
                (rule "applyOnRigidFormula" (formula "8") (term "0,0"))
                (rule "simplifyUpdate1" (formula "8") (term "0,0,0"))
                (rule "applyOnPV" (formula "8") (term "0,0,0"))
                (rule "simplifyUpdate1" (formula "8") (term "1,0,0"))
                (rule "eqClose" (formula "8") (term "0,0"))
                (rule "concrete_impl_1" (formula "8") (term "0"))
                (rule "applyOnRigidFormula" (formula "8") (term "0"))
                (rule "simplifyUpdate1" (formula "8") (term "0,0"))
                (rule "applyOnPV" (formula "8") (term "0,0"))
                (rule "applyOnRigidTerm" (formula "8") (term "1,0"))
                (rule "simplifyUpdate1" (formula "8") (term "0,1,0"))
                (rule "simplifyUpdate1" (formula "8") (term "1,1,0"))
                (rule "applyOnRigidFormula" (formula "8") (term "1"))
                (rule "applyOnRigidFormula" (formula "8") (term "0,1"))
                (rule "simplifyUpdate1" (formula "8") (term "0,0,1"))
                (rule "applyOnPV" (formula "8") (term "0,0,1"))
                (rule "simplifyUpdate1" (formula "8") (term "1,0,1"))
                (rule "bool_not_equal_1" (formula "8") (term "0,1"))
                (rule "concrete_impl_2" (formula "8") (term "1"))
                (rule "concrete_and_3" (formula "8"))
                (rule "andLeft" (formula "2"))
                (rule "andLeft" (formula "2"))
                (rule "applyEq" (formula "10") (term "0"))
                (rule "applyEq" (formula "10") (term "1,1,0"))
                (rule "sub_zero_2" (formula "10") (term "1,0"))
                (rule "eqClose" (formula "10"))
                (rule "closeTrue" (formula "10"))
            )
            (branch "_b_0 false"
                (rule "simpleExprStmt" (formula "8") (term "1"))
                (rule "emptyBlock" (formula "8") (term "1"))
                (rule "simpleExprStmt" (formula "8") (term "1"))
                (rule "compoundAssignPlus" (formula "8") (term "1"))
                (rule "assignmentAdditionU64" (formula "8") (term "1"))
                (branch "Check: n + a in u64"
                    (rule "applyOnRigidFormula" (formula "8"))
                    (rule "applyOnRigidTerm" (formula "8") (term "0"))
                    (rule "simplifyUpdate1" (formula "8") (term "0,0"))
                    (rule "applyOnPV" (formula "8") (term "0,0"))
                    (rule "simplifyUpdate1" (formula "8") (term "1,0"))
                    (rule "applyOnPV" (formula "8") (term "1,0"))
                    (rule "expand_in_u64" (formula "8"))
                    (rule "andLeft" (formula "1"))
                    (rule "expand_in_u64" (formula "2"))
                    (rule "andLeft" (formula "2"))
                    (rule "expand_in_u64" (formula "4"))
                    (rule "andLeft" (formula "4"))
                    (rule "andRight" (formula "11"))
                    (branch "0 <= n_0 + a"
                        (rule "polySimp_addComm0" (formula "11") (term "1"))
                        (rule "inEqSimp_leqRight" (formula "11"))
                        (rule "replace_u64_MIN" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "replace_u64_MIN" (formula "3") (term "1"))
                        (rule "replace_u64_MIN" (formula "5") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (assumesSeqFormula "1"))
                        (rule "times_zero_1" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "6") (assumesSeqFormula "3"))
                        (rule "qeq_literals" (formula "6") (term "0"))
                        (rule "concrete_and_2" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                    )
                    (branch "n_0 + a <= u64_MAX"
                        (rule "closeTrue" (formula "11"))
                    )
                )
                (branch "n + a is in range"
                    (rule "simpleExprStmt" (formula "8") (term "1,1"))
                    (rule "sequentialToParallel2" (formula "8"))
                    (rule "applyOnElementary" (formula "8") (term "1,0"))
                    (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
                    (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
                    (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
                    (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
                    (rule "applyOnPV" (formula "8") (term "1,0,1,0"))
                    (rule "compoundAssignMinus" (formula "8") (term "1"))
                    (rule "assignmentSubtractionU64" (formula "8") (term "1"))
                    (branch "Check: b - 1 in u64"
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "applyOnRigidTerm" (formula "8") (term "0"))
                        (rule "simplifyUpdate1" (formula "8") (term "0,0"))
                        (rule "applyOnPV" (formula "8") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "1,0"))
                        (rule "expand_in_u64" (formula "8"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "expand_in_u64" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andRight" (formula "11"))
                        (branch "u64_MIN <= _b_0 - 1"
                            (rule "leq_diff1_eq" (formula "11"))
                            (rule "leq_to_gt_alt" (formula "2"))
                            (rule "replace_known_right" (formula "2") (term "0"))
                            (rule "concrete_or_2" (formula "2"))
                            (rule "eqSymm" (formula "2"))
                            (rule "replace_u64_MIN" (formula "2") (term "1"))
                            (rule "closeAntec" (formula "2"))
                        )
                        (branch "_b_0 - 1 <= u64_MAX"
                            (rule "replace_u64_MAX" (formula "11") (term "1"))
                            (rule "polySimp_elimSub" (formula "11") (term "0"))
                            (rule "mul_literals" (formula "11") (term "1,0"))
                            (rule "polySimp_addComm0" (formula "11") (term "0"))
                            (rule "inEqSimp_leqRight" (formula "11"))
                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                            (rule "add_literals" (formula "1") (term "0,0"))
                            (rule "polySimp_addAssoc" (formula "1") (term "0"))
                            (rule "add_literals" (formula "1") (term "0,0"))
                            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                            (rule "mul_literals" (formula "1") (term "1"))
                            (rule "replace_u64_MAX" (formula "4") (term "1"))
                            (rule "inEqSimp_contradInEq1" (formula "4"))
                            (rule "qeq_literals" (formula "4") (term "0"))
                            (rule "concrete_and_2" (formula "4"))
                            (rule "closeFalse" (formula "4"))
                        )
                    )
                    (branch "b - 1 is in range"
                        (rule "simpleExprStmt" (formula "8") (term "1,1"))
                        (rule "emptyBlock" (formula "8") (term "1,1"))
                        (rule "simpleExprStmt" (formula "8") (term "1,1"))
                        (rule "lsContinue" (formula "8") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "8"))
                        (rule "applyOnElementary" (formula "8") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
                        (rule "sequentialToParallel2" (formula "8"))
                        (rule "applyOnElementary" (formula "8") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "0,1,0"))
                        (rule "simplifyUpdate2" (formula "8"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "applyOnRigidFormula" (formula "8") (term "0"))
                        (rule "applyOnRigidFormula" (formula "8") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "0,0,0"))
                        (rule "applyOnPV" (formula "8") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "1,0,0"))
                        (rule "bool_not_equal_2" (formula "8") (term "0,0"))
                        (rule "concrete_impl_2" (formula "8") (term "0"))
                        (rule "concrete_and_1" (formula "8"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "applyOnRigidFormula" (formula "8") (term "0"))
                        (rule "simplifyUpdate1" (formula "8") (term "0,0"))
                        (rule "applyOnPV" (formula "8") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "8") (term "1,0"))
                        (rule "eqClose" (formula "8") (term "0"))
                        (rule "concrete_impl_1" (formula "8"))
                        (rule "simplifyUpdate2" (formula "8") (term "1,0,1"))
                        (rule "concrete_and_3" (formula "8") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "andRight" (formula "8"))
                        (branch "{u}((n = _a * (old_b - _b) & in_u64(_b) & in_u64(n)))"
                            (rule "applyOnRigidFormula" (formula "8"))
                            (rule "andRight" (formula "8"))
                            (branch "{u}((n = _a * (old_b - _b) & in_u64(_b))"
                                (rule "applyOnRigidFormula" (formula "8"))
                                (rule "applyOnRigidFormula" (formula "8") (term "0"))
                                (rule "simplifyUpdate1" (formula "8") (term "0,0"))
                                (rule "applyOnPV" (formula "8") (term "0,0"))
                                (rule "applyOnRigidTerm" (formula "8") (term "1,0"))
                                (rule "simplifyUpdate1" (formula "8") (term "0,1,0"))
                                (rule "applyOnPV" (formula "8") (term "0,1,0"))
                                (rule "applyOnRigidTerm" (formula "8") (term "1,1,0"))
                                (rule "simplifyUpdate1" (formula "8") (term "0,1,1,0"))
                                (rule "applyOnPV" (formula "8") (term "0,1,1,0"))
                                (rule "simplifyUpdate1" (formula "8") (term "1,1,1,0"))
                                (rule "applyOnPV" (formula "8") (term "1,1,1,0"))
                                (rule "andLeft" (formula "1"))
                                (rule "andLeft" (formula "1"))
                                (rule "applyEq" (formula "10") (term "0,0,0"))
                                (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0"))
                                (rule "mul_literals" (formula "10") (term "1,1,1,1,0"))
                                (rule "polySimp_elimSub" (formula "10") (term "1,1,0"))
                                (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0"))
                                (rule "polySimp_elimSub" (formula "10") (term "1,0,0,0"))
                                (rule "polySimp_addComm0" (formula "10") (term "1,0,0,0"))
                                (rule "polySimp_addComm0" (formula "10") (term "1,1,1,1,0"))
                                (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                                (rule "polySimp_mulAssoc" (formula "10") (term "0,0,0,0"))
                                (rule "eqSymm" (formula "10") (term "0"))
                                (rule "polySimp_homoEq" (formula "10") (term "0"))
                                (rule "polySimp_mulComm1" (formula "10") (term "1,0,0"))
                                (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0"))
                                (rule "polySimp_rightDist" (formula "10") (term "1,1,1,0,0"))
                                (rule "mul_literals" (formula "10") (term "0,1,1,1,0,0"))
                                (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
                                (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                (rule "polySimp_mulAssoc" (formula "10") (term "1,1,0,0"))
                                (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                                (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,0"))
                                (rule "polySimp_mulAssoc" (formula "10") (term "1,0,1,0,0"))
                                (rule "polySimp_mulComm1" (formula "10") (term "0,1,0,1,0,0"))
                                (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0"))
                                (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0"))
                                (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                (rule "add_zero_right" (formula "10") (term "0,0"))
                                (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                (rule "polySimp_pullOutFactor1" (formula "10") (term "0,0,0,0"))
                                (rule "add_literals" (formula "10") (term "1,0,0,0,0"))
                                (rule "times_zero_1" (formula "10") (term "0,0,0,0"))
                                (rule "add_zero_left" (formula "10") (term "0,0,0"))
                                (rule "polySimp_pullOutFactor2" (formula "10") (term "0,0"))
                                (rule "add_literals" (formula "10") (term "1,0,0"))
                                (rule "times_zero_1" (formula "10") (term "0,0"))
                                (rule "eqClose" (formula "10") (term "0"))
                                (rule "concrete_and_1" (formula "10"))// remaining: {u}in_u64(_b)
                                (rule "applyOnRigidFormula" (formula "10"))
                                (rule "simplifyUpdate1" (formula "10") (term "0"))
                                (rule "applyOnPV" (formula "10") (term "0")) // in_u64(_b_0 - 1)
                                (rule "expand_in_u64" (formula "10"))
                                (rule "expand_in_u64" (formula "2"))
                                (rule "andLeft" (formula "2"))
                                (rule "andRight" (formula "11"))
                                (branch "u64_MIN <= _b_0 - 1"
                                    (rule "leq_diff1_eq" (formula "11"))
                                    (rule "leq_to_gt_alt" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0"))
                                    (rule "concrete_or_2" (formula "2"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "replace_u64_MIN" (formula "2") (term "1"))
                                    (rule "closeAntec" (formula "2"))
                                )
                                (branch "_b_0 - 1 <= u64_MAX"
                                    (rule "replace_u64_MAX" (formula "11") (term "1"))
                                    (rule "polySimp_elimSub" (formula "11") (term "0"))
                                    (rule "mul_literals" (formula "11") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "11") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "11"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "replace_u64_MAX" (formula "4") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (rule "concrete_and_2" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                )
                            )
                            (branch "{u}in_u64(n)"
                                (rule "applyOnRigidFormula" (formula "8"))
                                (rule "simplifyUpdate1" (formula "8") (term "0"))
                                (rule "applyOnPV" (formula "8") (term "0"))
                                (rule "closeTrue" (formula "8"))
                            )
                        )
                        (branch "{u} prec(_b,a_1)"
                            (rule "applyOnRigidFormula" (formula "8"))
                            (rule "simplifyUpdate1" (formula "8") (term "0"))
                            (rule "applyOnPV" (formula "8") (term "0"))
                            (rule "simplifyUpdate1" (formula "8") (term "1"))
                            (rule "applyOnPV" (formula "8") (term "1"))
                            (rule "precOfInt" (formula "8"))
                            (rule "andRight" (formula "8"))
                            (branch "0 <= _b_0 - 1"
                                (rule "leq_diff1_eq" (formula "8"))
                                (rule "andLeft" (formula "1"))
                                (rule "andLeft" (formula "1"))
                                (rule "expand_in_u64" (formula "2"))
                                (rule "andLeft" (formula "2"))
                                (rule "replace_u64_MIN" (formula "2") (term "0"))
                                (rule "leq_to_gt_alt" (formula "2"))
                                (rule "eqSymm" (formula "10"))
                                (rule "replace_known_right" (formula "2") (term "1"))
                                (rule "concrete_or_4" (formula "2"))
                                (rule "close" (formula "11"))
                            )
                            (branch "_b_0 - 1 < _b_0"
                                (rule "less_add_one" (formula "8"))
                                (rule "sub" (formula "8") (term "0,0"))
                                (rule "polySimp_addComm1" (formula "8") (term "0"))
                                (rule "neg_literal" (formula "8") (term "1,0"))
                                (rule "polySimp_addLiterals" (formula "8") (term "0"))
                                (rule "add_zero_right" (formula "8") (term "0"))
                                (rule "lt_diff_1" (formula "8"))
                                (rule "closeTrue" (formula "8"))
                            )
                        )
                    )
                )
            )
        )
    )
}