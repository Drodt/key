\profile "Rust Profile";

\withOptions intRules:rustSemantics;

\programVariables {
    u32 a;
    u32 b;
    u32 c;
}

\problem {
    \<{
        let mut x: &mut u32;
        a = 1u32;
        b = 2u32;
        x = &mut a;
        *x = 0u32;
        *x = 4u32;
        c = a + b;
        c
    }\> (c = 4)
}

\proof {
    (branch "dummy ID"
        (rule "letIdentPat" (formula "1"))
        (rule "assignment" (formula "1"))
        (rule "assignment" (formula "1") (term "1"))
        (rule "borrowMut" (formula "1") (term "1,1"))
        (rule "mutate" (formula "1") (term "1,1,1"))
        (rule "sequentialToParallel2" (formula "1"))
        (rule "simplifyUpdate3" (formula "1") (term "1,0"))
        (rule "sequentialToParallel2" (formula "1"))
        (rule "simplifyUpdate3" (formula "1") (term "1,0"))
        (rule "sequentialToParallel2" (formula "1"))
        (rule "simplifyUpdate3" (formula "1") (term "1,0"))
        (rule "applyOnMutating" (formula "1") (term "1,0"))
        (rule "applyOnPV" (formula "1") (term "0,1,0"))
        (rule "simplifyUpdate1" (formula "1") (term "1,1,0"))
        (rule "applyMutating" (formula "1") (term "1,0"))
        (rule "simplifyUpdate2" (formula "1"))
        (rule "mutate" (formula "1") (term "1"))
        (rule "sequentialToParallel2" (formula "1"))
        (rule "simplifyUpdate3" (formula "1") (term "1,0"))
        (rule "applyOnMutating" (formula "1") (term "1,0"))
        (rule "applyOnPV" (formula "1") (term "0,1,0"))
        (rule "simplifyUpdate1" (formula "1") (term "1,1,0"))
        (rule "applyMutating" (formula "1") (term "1,0"))
        (rule "simplifyUpdate2" (formula "1"))
        (rule "assignmentAdditionU32" (formula "1") (term "1"))
        (branch
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "applyOnPV" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "expandInU32" (formula "1"))
            (rule "replace_u32_MIN" (formula "1") (term "0,0"))
            (rule "replace_u32_MAX" (formula "1") (term "1,1"))
            (rule "leq_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1") (term "1"))
            (rule "concrete_and_1" (formula "1"))
            (rule "closeTrue" (formula "1"))
        )
        (branch
            (rule "sequentialToParallel2" (formula "1"))
            (rule "emptyModalityValue" (formula "1") (term "1"))
            (rule "applyOnElementary" (formula "1") (term "1,0"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "applyOnPV" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "equal_literals" (formula "1"))
            (rule "false_right" (formula "1"))
            // cannot close!
        )
    )
}