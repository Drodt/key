\profile "Rust Profile";

\programVariables {
    u32 a, b, r;
}

\problem {
    in_u32(a) & in_u32(b)
    -> \<{
        a = 1;
        b = 3;
        r = my_add(a, b);
    }\> (r = 4)
}

\proof {
    (branch "dummy ID"
        (rule "impRight" (formula "1"))
        (rule "assignment" (formula "2"))
        (rule "simpleExprStmt" (formula "2") (term "1"))
        (rule "assignment" (formula "2") (term "1"))
        (rule "simpleExprStmt" (formula "2") (term "1,1"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "simplifyUpdate3" (formula "2") (term "1,0"))
        (builtin "useContract" (contract "my_add.my_contract.0") (formula "2"))
        (branch "Post (my_add)"
            (rule "assignment" (formula "3") (term "1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "simplifyUpdate3" (formula "3") (term "1,0"))
            (rule "emptyModality" (formula "3") (term "1"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "applyOnRigidTerm" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0,1"))
            (rule "applyOnPV" (formula "2") (term "0,1"))
            (rule "simplifyUpdate1" (formula "2") (term "1,1"))
            (rule "applyOnPV" (formula "2") (term "1,1"))
            (rule "applyEq" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0"))
            (rule "eqClose" (formula "3"))
        )
        (branch "Pre (my_add)"
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnRigidFormula" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0"))
            (rule "applyOnPV" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
            (rule "concrete_and_1" (formula "2"))
            (rule "simplifyUpdate2" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0,1"))
            (rule "expand_in_u32" (formula "2") (term "0"))
            (rule "replace_u32_MIN" (formula "2") (term "0,0,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
            (rule "concrete_and_1" (formula "2") (term "0"))
            (rule "replace_u32_MAX" (formula "2") (term "1,0"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_and_1" (formula "2"))
            (rule "expand_in_u32" (formula "2"))
            (rule "replace_u32_MIN" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_and_1" (formula "2"))
            (rule "replace_u32_MAX" (formula "2") (term "1"))
            (rule "leq_literals" (formula "2"))
            (rule "closeTrue" (formula "2"))
        )
    )
}