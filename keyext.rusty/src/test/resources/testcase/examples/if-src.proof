\programSource "./rustSrc";

\proofObligation
{
    "class": "org.key_project.rusty.proof.init.loader.FunctionOperationContractPOLoader",
    "contract": "if_example.normal specification case 0.0",
    "name": "if_example.normal specification case 0.0"
}

\proof {
    (branch "dummy ID"
        (rule "impRight" (formula "1"))
        (rule "functionBodyExpand" (formula "2") (term "1"))
        (rule "unfoldImplicitReturn" (formula "2") (term "1"))
        (rule "letIdentPatAssignNoType" (formula "2") (term "1"))
        (rule "letIdentPatNoType" (formula "2") (term "1"))
        (rule "condition" (formula "2") (term "1"))
        (rule "ifElseUnfold" (formula "2") (term "1"))
        (rule "letIdentPatAssign" (formula "2") (term "1"))
        (rule "letIdentPat" (formula "2") (term "1"))
        (rule "greater_than_comparison" (formula "2") (term "1"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "applyOnElementary" (formula "2") (term "1,0"))
        (rule "applyOnRigidTerm" (formula "2") (term "0,1,0"))
        (rule "applyOnRigidFormula" (formula "2") (term "0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "0,0,0,1,0"))
        (rule "applyOnPV" (formula "2") (term "0,0,0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1,0"))
        (rule "applyOnPV" (formula "2") (term "1,0,0,1,0"))
        (rule "ifthenelse_split" (formula "2") (term "0,1,0"))
        (branch "a > b"
            (rule "simplifyUpdate1" (formula "3") (term "0,1,0"))
            (rule "simpleExprStmt" (formula "3") (term "1"))
            (rule "ifElse" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "simplifyUpdate1" (formula "3") (term "0,0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "eqClose" (formula "3") (term "0"))
            (rule "ifthenelse_true_for" (formula "3"))
            (rule "assignBlock" (formula "3") (term "1"))
            (rule "assignmentAdditionU32" (formula "3") (term "1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1"))
            (rule "emptyBlock" (formula "3") (term "1,1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1"))
            (rule "implicitReturn" (formula "3") (term "1,1"))
            (rule "assignment" (formula "3") (term "1,1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1,1"))
            (rule "emptyModality" (formula "3") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "simplifyUpdate3" (formula "3") (term "1,0"))
            (rule "applyOnElementary" (formula "3") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "3") (term "0,1,0"))
            (rule "applyOnPV" (formula "3") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0,1,0"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "applyOnElementary" (formula "3") (term "1,0"))
            (rule "applyOnPV" (formula "3") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,1"))
            (rule "gt_diff_1" (formula "3") (term "0"))
            (rule "concrete_and_1" (formula "3"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "inEqSimp_gtRight" (formula "3"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_gtToGeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
        )
        (branch "a <= b"
            (rule "simplifyUpdate1" (formula "3") (term "0,1,0"))
            (rule "simpleExprStmt" (formula "3") (term "1"))
            (rule "ifElse" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "simplifyUpdate1" (formula "3") (term "0,0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "bool_not_equal_2" (formula "3") (term "0"))
            (rule "ifthenelse_false_for" (formula "3"))
            (rule "assignBlock" (formula "3") (term "1"))
            (rule "assignmentAdditionU32" (formula "3") (term "1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1"))
            (rule "emptyBlock" (formula "3") (term "1,1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1"))
            (rule "implicitReturn" (formula "3") (term "1,1"))
            (rule "assignment" (formula "3") (term "1,1"))
            (rule "simpleExprStmt" (formula "3") (term "1,1,1"))
            (rule "emptyModality" (formula "3") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "simplifyUpdate3" (formula "3") (term "1,0"))
            (rule "applyOnElementary" (formula "3") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "3") (term "0,1,0"))
            (rule "applyOnPV" (formula "3") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0,1,0"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "applyOnElementary" (formula "3") (term "1,0"))
            (rule "applyOnPV" (formula "3") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,1"))
            (rule "andRight" (formula "3"))
            (branch "b + 2 > a"
                (rule "polySimp_addComm0" (formula "3") (term "0"))
                (rule "inEqSimp_gtRight" (formula "2"))
                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                (rule "polySimp_addComm0" (formula "1") (term "0"))
                (rule "inEqSimp_gtRight" (formula "3"))
                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                (rule "polySimp_elimOne" (formula "2") (term "0"))
                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                (rule "polySimp_rightDist" (formula "1") (term "1"))
                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                (rule "mul_literals" (formula "1") (term "0,1"))
                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                (rule "inEqSimp_contradInEq1" (formula "1"))
                (rule "andLeft" (formula "1"))
                (rule "inEqSimp_homoInEq1" (formula "1"))
                (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                (rule "mul_literals" (formula "1") (term "0,1,0"))
                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                (rule "add_literals" (formula "1") (term "1,1,0"))
                (rule "times_zero_1" (formula "1") (term "1,0"))
                (rule "add_zero_right" (formula "1") (term "0"))
                (rule "leq_literals" (formula "1"))
                (rule "closeFalse" (formula "1"))
            )
            (branch "b + 2 > b"
                (rule "polySimp_addComm0" (formula "3") (term "0"))
                (rule "inEqSimp_gtRight" (formula "3"))
                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                (rule "add_literals" (formula "1") (term "1,1,0"))
                (rule "times_zero_1" (formula "1") (term "1,0"))
                (rule "add_zero_right" (formula "1") (term "0"))
                (rule "leq_literals" (formula "1"))
                (rule "closeFalse" (formula "1"))
            )
        )
    )
}