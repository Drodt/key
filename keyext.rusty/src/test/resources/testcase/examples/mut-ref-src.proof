\programSource "./rustSrc";

\withOptions intRules:rustSemantics;

\proofObligation
{
    "class": "org.key_project.rusty.proof.init.loader.FunctionOperationContractPOLoader",
    "contract": "mut_example.normal specification case 0.0",
    "name": "mut_example.normal specification case 0.0"
}

\proof {
    (branch "dummy ID"
        (rule "impRight" (formula "1"))
        (rule "function_body_expand" (formula "2") (term "1"))
        (rule "let_ident_pat_assign_mut_no_type" (formula "2") (term "1"))
        (rule "let_ident_pat_mut_no_type" (formula "2") (term "1"))
        (rule "assign_mut_borrow" (formula "2") (term "1"))
        (rule "simple_expr_stmt" (formula "2") (term "1,1"))
        (rule "deref_assign" (formula "2") (term "1,1"))
        (rule "simple_expr_stmt" (formula "2") (term "1,1,1"))
        (rule "assign_mut_borrow" (formula "2") (term "1,1,1"))
        (rule "simple_expr_stmt" (formula "2") (term "1,1,1,1"))
        (rule "deref_assign" (formula "2") (term "1,1,1,1"))
        (rule "simple_expr_stmt" (formula "2") (term "1,1,1,1,1"))
        (rule "let_ident_pat_assign_no_type" (formula "2") (term "1,1,1,1,1"))
        (rule "let_ident_pat_no_type" (formula "2") (term "1,1,1,1,1"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "simplifyUpdate3" (formula "2") (term "1,0"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "applyOnMutating" (formula "2") (term "1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "0,1,0"))
        (rule "applyOnPV" (formula "2") (term "0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
        (rule "applyMutating" (formula "2") (term "1,0"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "simplifyUpdate3" (formula "2") (term "1,0"))
        (rule "simplifyUpdate2" (formula "2"))
        (rule "sequentialToParallel2" (formula "2"))
        (rule "applyOnMutating" (formula "2") (term "1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "0,1,0"))
        (rule "applyOnPV" (formula "2") (term "0,1,0"))
        (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
        (rule "applyMutating" (formula "2") (term "1,0"))
        (rule "assignmentAdditionU32" (formula "2") (term "1"))
        (branch "bounds check"
            (rule "simplifyUpdate2" (formula "2"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnRigidTerm" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "0,0"))
            (rule "applyOnPV" (formula "2") (term "0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0"))
            (rule "applyOnPV" (formula "2") (term "1,0"))
            (rule "add_literals" (formula "2") (term "0"))
            (rule "expand_in_u32" (formula "2"))
            (rule "replace_u32_MIN" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_and_1" (formula "2"))
            (rule "replace_u32_MAX" (formula "2") (term "1"))
            (rule "leq_literals" (formula "2"))
            (rule "closeTrue" (formula "2"))
        )
        (branch "use"
            (rule "simple_expr_stmt" (formula "2") (term "1,1"))
            (rule "implicit_return" (formula "2") (term "1,1"))
            (rule "assignment" (formula "2") (term "1,1"))
            (rule "simple_expr_stmt" (formula "2") (term "1,1,1"))
            (rule "empty_modality" (formula "2") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "2"))
            (rule "applyOnElementary" (formula "2") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "2") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "2") (term "1,0,1,0"))
            (rule "add_literals" (formula "2") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "sequentialToParallel2" (formula "2"))
            (rule "applyOnElementary" (formula "2") (term "1,0"))
            (rule "applyOnPV" (formula "2") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "eqClose" (formula "2"))
            (rule "closeTrue" (formula "2"))
        )
    )
}