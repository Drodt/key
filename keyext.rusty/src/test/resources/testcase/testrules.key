
//
//

// *** THESE RULES ARE FOR JUnit TESTS. PLEASE DO NOT MODIFY! ***
// *** THIS FILE WILL BE MOVED TO A DIFFERENT PLACE. ***
// Input file for KeY standalone prover version 0.497

\programVariables {
	u32 i;
	u32 j;
	bool b;
}

\sorts {
	nat;
	int;
	s;
	\generic G;
}

\predicates {  
	p(s);
	A;
	B;
	D;
}
\functions {
	s const;
	s f(s);
}


\schemaVariables {
	\formula b, c, d, e, post;
	\skolemTerm s sk ;
    \variables s u,v ;
    \term s w0 ;
    \term s w1 ;
    \term G g1 ;
    \variables G e1 ;
} 


\rules {
  close_goal { \assumes (b ==>) \find (==> b) \closegoal };
  close_by_false { \find (false ==>) \closegoal };
  close_by_true  { \find (==> true) \closegoal };
  true_left    { \find (true ==>) \replacewith(==>) };
  false_right  { \find (==> false) \replacewith(==>) };

  not_left  { \find (! b ==>) \replacewith(==> b) };
  not_right { \find (==> ! b) \replacewith(b ==>) };

  imp_left  { \find (b -> c ==>) 
		\replacewith(==> b); 
                \replacewith(c ==>) };
  imp_right { \find (==> b -> c) \replacewith(b ==> c) };


  and_left  { \find (b & c ==>) \replacewith(b, c ==>) };
  and_right { \find (==> b & c) \replacewith(==> b); \replacewith(==> c) };
  or_left   { \find (b | c ==>) \replacewith(b ==>); \replacewith(c ==>) };
  or_right  { \find (==> b | c) \replacewith(==> b, c) };
  equiv_left   { \find (b <-> c ==>) 
		      \replacewith(b, c ==>); 
                      \replacewith(==> b, c) };
  
  equiv_right  { \find (==> b <-> c) 
		      \replacewith(b ==> c);
                      \replacewith(c ==> b) };
  all_right { \find (==> \forall u; b) \varcond(\newDependingOn(sk, b) )
  		\replacewith (==> {\subst u; sk}b) };


  TestApplyTaclet_imp_right_add{\find (==> b->c) \replacewith(b==>c)
  	\addrules(cut{\add (b==>); \add (==>b)})};
   TestApplyTaclet_contradiction{ \find (b->c) \replacewith(!c -> !b)};
   TestApplyTaclet_cut{\add (b==>); \add (==>b)};
   TestApplyTaclet_cut_direct { \find ( b ) \sameUpdateLevel
    \replacewith ( true ) \add (b ==>);
    \replacewith ( false ) \add (==> b)
   };
  TestApplyTaclet_cut_direct_r {\find (==>b) \replacewith(==>b); \add (b==>)};
  TestApplyTaclet_hide_r{\find (==>b) \replacewith(==>)};

  apply_eq_nonrigid { \assumes ( w0=w1 ==> ) \find (w0) \sameUpdateLevel \replacewith (w1) };

  make_insert_eq_nonrigid { \find (w0 = w1 ==>)
  		\addrules ( insert_eq { \find (w0) \sameUpdateLevel \replacewith (w1) } ) };

  TestApplyTaclet_allPullOutBehindDiamond {
  	\find(\<{c# ; #c}\>(\forall e1; post))
  	\replacewith(\forall e1;\<{c# ; #c}\>(post))
  };
} 
