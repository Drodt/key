\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 100000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "src";

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.proof.init.FunctionalOperationContractPO",
    "contract" : "Simple[Simple::addAbsoluteValues(int,int)].JML normal_behavior operation contract.0",
    "name" : "Simple[Simple::addAbsoluteValues(int,int)].JML normal_behavior operation contract.0"
 }

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "daniel" ) (keyVersion "c12e9dae06c00a26bb394e881da8d84a3a7e2ef1"))

(autoModeTime "1030")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "polySimp_elimNeg" (formula "7") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_elimNeg" (formula "7") (term "1,1,1,0,0,0,0,1"))
(rule "polySimp_elimNeg" (formula "7") (term "0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimNeg" (formula "7") (term "1,1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_Simple" (formula "5") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "5"))
   (rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_addAbsoluteValues,savedHeapBefore_addAbsoluteValues,_iBefore_addAbsoluteValues,_jBefore_addAbsoluteValues"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "Block Contract (Internal)" (formula "6") (newnames "anonOut_heap,result_addAbsoluteValues_0,exc_0,heap_Before_BLOCK,savedHeap_Before_BLOCK,i_Before_BLOCK#20,o,f,anonOut__i"))
   (branch "Validity"
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")) (ifInst ""  (formula "1")) (ifInst ""  (formula "6")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
      (rule "true_left" (formula "5"))
      (rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
      (rule "eqSymm" (formula "6") (term "1,1,1,0,0,0,1"))
      (rule "eqSymm" (formula "6") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_elimNeg" (formula "6") (term "0,1,1,1,0,0,0,1"))
      (rule "polySimp_homoEq" (formula "6") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "6") (term "1,0,1,1,1,0,0,0,1"))
      (rule "variableDeclarationAssign" (formula "6") (term "1"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "exc_0_1"))
      (rule "assignment" (formula "6") (term "1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_sepPosMonomial" (formula "6") (term "1,1,1,0,0,0,1"))
      (rule "ifUnfold" (formula "6") (term "1") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "b"))
      (rule "less_than_comparison_simple" (formula "6") (term "1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,1,0"))
      (rule "ifSplit" (formula "6"))
      (branch "if b true"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "unaryMinusInt" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaUnaryMinusInt" (formula "7") (term "0,1,0"))
         (rule "polySimp_elimNeg" (formula "7") (term "0,1,0"))
         (rule "tryEmpty" (formula "7") (term "1"))
         (rule "blockEmptyLabel" (formula "7") (term "1"))
         (rule "blockEmpty" (formula "7") (term "1"))
         (rule "methodCallEmpty" (formula "7") (term "1"))
         (rule "emptyModality" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
         (rule "polySimp_homoEq" (formula "7") (term "0,1"))
         (rule "polySimp_homoEq" (formula "7") (term "1,1"))
         (rule "polySimp_pullOutFactor3" (formula "7") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,1"))
         (rule "add_literals" (formula "7") (term "1,0,1,1"))
         (rule "times_zero_1" (formula "7") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_geqRight" (formula "7"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if b false"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_leqRight" (formula "5"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "tryEmpty" (formula "7") (term "1"))
         (rule "blockEmptyLabel" (formula "7") (term "1"))
         (rule "blockEmpty" (formula "7") (term "1"))
         (rule "methodCallEmpty" (formula "7") (term "1"))
         (rule "emptyModality" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "7"))
      )
   )
   (branch "Precondition"
       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "4")) (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "6"))
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "eqSymm" (formula "5") (term "0,1,1"))
      (rule "eqSymm" (formula "5") (term "1,1,1"))
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "polySimp_elimNeg" (formula "6") (term "0,1"))
      (rule "polySimp_homoEq" (formula "6") (term "1"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "6") (term "1,0,1"))
      (rule "polySimp_sepPosMonomial" (formula "6") (term "1"))
      (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "b"))
      (rule "inequality_comparison_simple" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "ifSplit" (formula "10"))
      (branch "if b true"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if b false"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockEmpty" (formula "10") (term "1"))
          (builtin "Block Contract (Internal)" (formula "10") (newnames "anonOut_heap_0,result_addAbsoluteValues_1,exc_1,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,j_Before_BLOCK#22,o,f,anonOut__j"))
         (branch "Validity"
             (builtin "One Step Simplification" (formula "11"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")) (ifInst ""  (formula "3")) (ifInst ""  (formula "10")))
            (rule "andLeft" (formula "9"))
            (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "12") (term "1,1,1,0,0,1"))
            (rule "eqSymm" (formula "12") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimNeg" (formula "12") (term "0,1,1,1,0,0,1"))
            (rule "polySimp_homoEq" (formula "12") (term "1,1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,1,1,0,0,1"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc_1_1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_sepPosMonomial" (formula "12") (term "1,1,1,0,0,1"))
            (rule "selectCreatedOfAnonAsFormula" (formula "10"))
            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=b_1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
            (rule "greater_equal_than_comparison_simple" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "ifSplit" (formula "11"))
            (branch "if b_1 true"
                (builtin "One Step Simplification" (formula "12"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "blockBreakLabel" (formula "12") (term "1"))
               (rule "blockEmpty" (formula "12") (term "1"))
               (rule "tryEmpty" (formula "12") (term "1"))
               (rule "blockEmptyLabel" (formula "12") (term "1"))
               (rule "blockEmpty" (formula "12") (term "1"))
               (rule "methodCallEmpty" (formula "12") (term "1"))
               (rule "emptyModality" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "12"))
            )
            (branch "if b_1 false"
                (builtin "One Step Simplification" (formula "12"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "10"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "unaryMinusInt" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaUnaryMinusInt" (formula "12") (term "0,1,0"))
               (rule "polySimp_elimNeg" (formula "12") (term "0,1,0"))
               (rule "blockEmptyLabel" (formula "12") (term "1"))
               (rule "blockEmpty" (formula "12") (term "1"))
               (rule "tryEmpty" (formula "12") (term "1"))
               (rule "blockEmptyLabel" (formula "12") (term "1"))
               (rule "blockEmpty" (formula "12") (term "1"))
               (rule "methodCallEmpty" (formula "12") (term "1"))
               (rule "emptyModality" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
               (rule "polySimp_homoEq" (formula "12") (term "0,1"))
               (rule "polySimp_homoEq" (formula "12") (term "1,1"))
               (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,1"))
               (rule "add_literals" (formula "12") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,1"))
               (rule "add_literals" (formula "12") (term "1,0,1,1"))
               (rule "times_zero_1" (formula "12") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "Precondition"
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")) (ifInst ""  (formula "3")) (ifInst ""  (formula "9")))
            (rule "wellFormedAnon" (formula "10") (term "0"))
            (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
            (rule "selectCreatedOfAnonAsFormula" (formula "10"))
            (rule "orRight" (formula "10"))
            (rule "close" (formula "10") (ifseqformula "2"))
         )
         (branch "Usage"
             (builtin "One Step Simplification" (formula "11"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "eqSymm" (formula "11") (term "1"))
            (rule "eqSymm" (formula "11") (term "0"))
            (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "polySimp_elimNeg" (formula "11") (term "0,1"))
            (rule "polySimp_homoEq" (formula "11") (term "1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,1"))
            (rule "polySimp_sepPosMonomial" (formula "11") (term "1"))
            (rule "unusedLabel" (formula "14") (term "1"))
            (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=b_1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_1"))
            (rule "inequality_comparison_simple" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "ifSplit" (formula "14"))
            (branch "if b_1 true"
                (builtin "One Step Simplification" (formula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if b_1 false"
                (builtin "One Step Simplification" (formula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockEmpty" (formula "14") (term "1"))
               (rule "returnUnfold" (formula "14") (term "1") (inst "#v0=i_1"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_1"))
               (rule "assignmentAdditionInt" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
               (rule "methodCallReturn" (formula "14") (term "1"))
               (rule "assignment" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "methodCallEmpty" (formula "14") (term "1"))
               (rule "tryEmpty" (formula "14") (term "1"))
               (rule "emptyModality" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "eqSymm" (formula "14") (term "1,0,0,1"))
               (rule "polySimp_homoEq" (formula "14") (term "1,0,1,1,1,0"))
               (rule "polySimp_homoEq" (formula "14") (term "1,0,1,1,0"))
               (rule "polySimp_homoEq" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_homoEq" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1,0,1,1,1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,0"))
               (rule "polySimp_sepPosMonomial" (formula "14") (term "1,0,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "0,1,1,0,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,0,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,0,1,1,0,1,1,1,0"))
               (rule "polySimp_mulAssoc" (formula "14") (term "0,0,1,1,0,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0,0,1,1,0,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,0,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,0,1,1,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,1,0"))
               (rule "polySimp_sepPosMonomial" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "0,1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,0,1,1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "14") (term "0,0,1,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0,0,1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0"))
               (rule "Class_invariant_axiom_for_Simple" (formula "14") (term "1,1,1,1,0") (inst "sk=sk_1") (ifseqformula "3"))
               (branch "Use Axiom"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "andRight" (formula "14"))
                  (branch
                     (rule "andRight" (formula "14"))
                     (branch
                        (rule "impRight" (formula "14"))
                        (rule "andLeft" (formula "1"))
                        (rule "cut_direct" (formula "8") (term "0"))
                        (branch "CUT: i = anonOut__i TRUE"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                           (rule "applyEq" (formula "16") (term "0,1,1") (ifseqformula "8"))
                           (rule "polySimp_addComm1" (formula "16") (term "1"))
                           (rule "polySimp_pullOutFactor0" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "1,0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: i = anonOut__i FALSE"
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "8"))
                           (rule "polySimp_homoEq" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                           (rule "add_literals" (formula "15") (term "1,0"))
                           (rule "applyEq" (formula "17") (term "0,1,1") (ifseqformula "8"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                           (rule "polySimp_addComm1" (formula "17") (term "1"))
                           (rule "polySimp_pullOutFactor2" (formula "17") (term "0,1"))
                           (rule "add_literals" (formula "17") (term "1,0,1"))
                           (rule "times_zero_1" (formula "17") (term "0,1"))
                           (rule "add_zero_left" (formula "17") (term "1"))
                           (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "13"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "13"))
                           (rule "polySimp_homoEq" (formula "17"))
                           (rule "polySimp_pullOutFactor0" (formula "17") (term "0"))
                           (rule "add_literals" (formula "17") (term "1,0"))
                           (rule "polySimp_invertEq" (formula "17"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                           (rule "times_zero_2" (formula "17") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "closeFalse" (formula "12"))
                        )
                     )
                     (branch
                        (rule "andRight" (formula "14"))
                        (branch
                           (rule "impRight" (formula "14"))
                           (rule "andLeft" (formula "1"))
                           (rule "cut_direct" (formula "8") (term "0"))
                           (branch "CUT: i = anonOut__i TRUE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                              (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "8"))
                              (rule "polySimp_addComm1" (formula "16") (term "1"))
                              (rule "polySimp_pullOutFactor3" (formula "16") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: i = anonOut__i FALSE"
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "8"))
                              (rule "polySimp_homoEq" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "1,0"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                              (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "8"))
                              (rule "polySimp_addComm1" (formula "17") (term "1"))
                              (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1"))
                              (rule "add_literals" (formula "17") (term "1,0,1"))
                              (rule "times_zero_1" (formula "17") (term "0,1"))
                              (rule "add_zero_left" (formula "17") (term "1"))
                              (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "13"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "13"))
                              (rule "polySimp_homoEq" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                              (rule "add_literals" (formula "17") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_invertInEq1" (formula "2"))
                              (rule "times_zero_2" (formula "2") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                              (rule "leq_literals" (formula "7") (term "0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "elimGcdEq" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__j") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "add_zero_left" (formula "16") (term "0,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,1"))
                              (rule "add_zero_left" (formula "16") (term "0,1,0"))
                              (rule "add_literals" (formula "16") (term "1,0,0"))
                              (rule "times_zero_1" (formula "16") (term "0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "times_zero_1" (formula "16") (term "0,1,0"))
                              (rule "leq_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "qeq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "16"))
                              (rule "add_zero_right" (formula "2") (term "1"))
                              (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0"))
                              (rule "qeq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "false_right" (formula "16"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch
                           (rule "andRight" (formula "14"))
                           (branch
                              (rule "impRight" (formula "14"))
                              (rule "andLeft" (formula "1"))
                              (rule "cut_direct" (formula "8") (term "0"))
                              (branch "CUT: i = anonOut__i TRUE"
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "7"))
                                 (rule "polySimp_addComm1" (formula "15") (term "1"))
                                 (rule "polySimp_pullOutFactor2" (formula "15") (term "0,1"))
                                 (rule "add_literals" (formula "15") (term "1,0,1"))
                                 (rule "times_zero_1" (formula "15") (term "0,1"))
                                 (rule "add_zero_left" (formula "15") (term "1"))
                                 (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
                                 (rule "polySimp_homoEq" (formula "15"))
                                 (rule "polySimp_pullOutFactor0" (formula "15") (term "0"))
                                 (rule "add_literals" (formula "15") (term "1,0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                                 (rule "polySimp_invertEq" (formula "15"))
                                 (rule "times_zero_2" (formula "15") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "CUT: i = anonOut__i FALSE"
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "8"))
                                 (rule "polySimp_homoEq" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                                 (rule "add_literals" (formula "15") (term "1,0"))
                                 (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "8"))
                                 (rule "polySimp_addComm1" (formula "17") (term "1"))
                                 (rule "polySimp_pullOutFactor0" (formula "17") (term "0,1"))
                                 (rule "add_literals" (formula "17") (term "1,0,1"))
                                 (rule "inEqSimp_invertInEq1" (formula "1"))
                                 (rule "times_zero_2" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "elimGcdEq" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__i") (inst "elimGcd=Z(2(#))"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1"))
                                 (rule "add_literals" (formula "15") (term "1,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,1,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "times_zero_1" (formula "15") (term "0,1,0"))
                                 (rule "leq_literals" (formula "15") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "7") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "7"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                           )
                           (branch
                              (rule "impRight" (formula "14"))
                              (rule "andLeft" (formula "1"))
                              (rule "cut_direct" (formula "8") (term "0"))
                              (branch "CUT: i = anonOut__i TRUE"
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "7"))
                                 (rule "polySimp_addComm1" (formula "15") (term "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1"))
                                 (rule "add_literals" (formula "15") (term "1,0,1"))
                                 (rule "times_zero_1" (formula "15") (term "0,1"))
                                 (rule "add_zero_left" (formula "15") (term "1"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
                                 (rule "polySimp_homoEq" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                                 (rule "add_literals" (formula "15") (term "1,0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                                 (rule "inEqSimp_invertInEq1" (formula "1"))
                                 (rule "times_zero_2" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "elimGcdEq" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__j") (inst "elimGcd=Z(2(#))"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1"))
                                 (rule "add_zero_left" (formula "15") (term "0,1,0"))
                                 (rule "add_literals" (formula "15") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "leq_literals" (formula "15") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "times_zero_1" (formula "15") (term "0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "CUT: i = anonOut__i FALSE"
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "8"))
                                 (rule "polySimp_homoEq" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                                 (rule "add_literals" (formula "15") (term "1,0"))
                                 (rule "applyEq" (formula "17") (term "0,1,1") (ifseqformula "8"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                                 (rule "polySimp_addComm1" (formula "17") (term "1"))
                                 (rule "polySimp_pullOutFactor3" (formula "17") (term "0,1"))
                                 (rule "inEqSimp_invertInEq1" (formula "1"))
                                 (rule "times_zero_2" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "elimGcdEq" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__i") (inst "elimGcd=Z(2(#))"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "add_zero_left" (formula "15") (term "0,1,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1"))
                                 (rule "add_literals" (formula "15") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,1,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "qeq_literals" (formula "15") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "15"))
                                 (rule "add_zero_right" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
                  (branch
                     (rule "allRight" (formula "14") (inst "sk=f_0"))
                     (rule "allRight" (formula "14") (inst "sk=o_0"))
                     (rule "orRight" (formula "14"))
                     (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "16"))
                     (rule "selectCreatedOfAnonAsFormula" (formula "1") (term "0,1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "cut_direct" (formula "7") (term "0"))
                     (branch "CUT: i = anonOut__i TRUE"
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "cut_direct" (formula "12") (term "0"))
                        (branch "CUT: j = anonOut__j TRUE"
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "1"))
                              (rule "orRight" (formula "15"))
                              (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "18"))
                              (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")))
                              (rule "closeTrue" (formula "17"))
                           )
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) FALSE"
                              (rule "close" (formula "17") (ifseqformula "1"))
                           )
                        )
                        (branch "CUT: j = anonOut__j FALSE"
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
                           (rule "polySimp_homoEq" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "1,0"))
                           (rule "elimGcdEq" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__j") (inst "elimGcd=Z(2(#))"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,1,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,0"))
                           (rule "add_literals" (formula "14") (term "1,0,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "add_zero_left" (formula "14") (term "0,1,0"))
                           (rule "times_zero_1" (formula "14") (term "0,0,0"))
                           (rule "qeq_literals" (formula "14") (term "1,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "14"))
                           (rule "add_zero_right" (formula "11") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "11"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "orRight" (formula "14"))
                              (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "18"))
                              (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "15")))
                              (rule "closeTrue" (formula "17"))
                           )
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) FALSE"
                              (rule "close" (formula "17") (ifseqformula "1"))
                           )
                        )
                     )
                     (branch "CUT: i = anonOut__i FALSE"
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "7"))
                        (rule "polySimp_homoEq" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                        (rule "polySimp_pullOutFactor3" (formula "14") (term "0"))
                        (rule "elimGcdEq" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__i") (inst "elimGcd=Z(2(#))"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "add_zero_left" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_left" (formula "14") (term "0,1,0"))
                        (rule "add_literals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "times_zero_1" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "14"))
                        (rule "add_zero_right" (formula "6") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "6"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "false_right" (formula "14"))
                        (rule "cut_direct" (formula "12") (term "0"))
                        (branch "CUT: j = anonOut__j TRUE"
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "orRight" (formula "14"))
                              (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "18"))
                              (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
                              (rule "closeTrue" (formula "17"))
                           )
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) FALSE"
                              (rule "close" (formula "17") (ifseqformula "1"))
                           )
                        )
                        (branch "CUT: j = anonOut__j FALSE"
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
                           (rule "polySimp_homoEq" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "1,0"))
                           (rule "elimGcdEq" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=anonOut__j") (inst "elimGcd=Z(2(#))"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "add_zero_left" (formula "14") (term "0,0,0"))
                           (rule "add_literals" (formula "14") (term "1,0,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                           (rule "add_zero_left" (formula "14") (term "0,1,0"))
                           (rule "leq_literals" (formula "14") (term "0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "times_zero_1" (formula "14") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "14"))
                           (rule "add_zero_right" (formula "11") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "11"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "1"))
                              (rule "orRight" (formula "15"))
                              (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "18"))
                              (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")))
                              (rule "closeTrue" (formula "17"))
                           )
                           (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anonOut_heap<<anonHeapFunction>> = TRUE) FALSE"
                              (rule "close" (formula "17") (ifseqformula "1"))
                           )
                        )
                     )
                  )
               )
               (branch "Show Axiom Satisfiability"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "closeTrue" (formula "14"))
               )
            )
         )
      )
   )
)
(branch "Show Axiom Satisfiability"
    (builtin "One Step Simplification" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)
}
