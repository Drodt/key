\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 40000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_EXPAND",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_OFF",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\bootclasspath "boot";

\javaSource "src";

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.proof.init.FunctionalOperationContractPO",
    "contract" : "javacard.framework.Util[javacard.framework.Util::arrayFillNonAtomic([B,short,short,byte)].JML behavior operation contract.0",
    "name" : "javacard.framework.Util[javacard.framework.Util::arrayFillNonAtomic([B,short,short,byte)].JML behavior operation contract.0"
 }

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "c12e9dae06c00a26bb394e881da8d84a3a7e2ef1"))

(autoModeTime "2657")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f,heapAtPre_0,savedHeapAtPre,o,f,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "7") (term "0,1,0,0,1,1,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "7") (term "0,1,1,0,1,1,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "2,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "7") (term "1,2,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "7") (term "2,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "7") (term "0,2,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,0,1,1,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,1,1,1,0,1,1,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,1,1,1,0,1,1,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "1,1,1,1,0,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,1,1,0,1,1,0,0,1"))
(rule "polySimp_addComm1" (formula "7") (term "0,1,1,1,1,0,1,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,1,1,1,0,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,1,1,0,1,1,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,1,1,1,0,1,1,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,1,1,1,0,1,1,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,1,1,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,1,1,1,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,1,1,1,0,1,1,0,0,1"))
(rule "inEqSimp_sepNegMonomial1" (formula "7") (term "1,1,1,1,0,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,1,1,0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,1,1,1,1,0,1,1,0,0,1"))
(rule "elementOfArrayRange" (formula "7") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "nnf_imp2or" (formula "7") (term "0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_arrayFillNonAtomic,savedHeapBefore_arrayFillNonAtomic,_bArrayBefore_arrayFillNonAtomic,_bOffsetBefore_arrayFillNonAtomic,_lengthBefore_arrayFillNonAtomic,_valueBefore_arrayFillNonAtomic"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "b"))
(rule "equality_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifSplit" (formula "7"))
(branch "if b true"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "7") (term "0,1,0,1,0") (ifseqformula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "Evaluate Query" (formula "6") (term "0") (newnames "callee,queryResult,res_getTransactionDepth"))
   (rule "replaceKnownQuery0_0" (formula "7") (term "0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "7") (term "0,0,1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "queryResult"))
   (rule "applyEqRigid" (formula "7") (term "0,0,0,1") (ifseqformula "6"))
   (rule "eqSymm" (formula "7") (term "0,0,1"))
    (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_getTransactionDepth,result_getTransactionDepth,exc_0") (contract "javacard.framework.JCSystem[javacard.framework.JCSystem::getTransactionDepth()].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (getTransactionDepth)"
       (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "8"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "emptyModality" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
      (rule "throwUnfold" (formula "12") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "n"))
      (rule "activeUseStaticFieldReadAccess" (formula "12") (term "1"))
      (rule "assignment_read_static_attribute" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "methodCallParamThrow" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "tryCatchThrow" (formula "12") (term "1"))
      (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=b_1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_1"))
      (rule "equality_comparison_simple" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "ifElseSplit" (formula "12"))
      (branch "if b_1 true"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if b_1 false"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "elim_double_block" (formula "12") (term "1"))
         (rule "ifElseSplit" (formula "12"))
         (branch "if n instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "emptyModality" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "4")) (ifInst ""  (formula "10")))
            (rule "closeTrue" (formula "12"))
         )
         (branch "if n instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Exceptional Post (getTransactionDepth)"
       (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "7"))
      (rule "close" (formula "10") (ifseqformula "9"))
   )
   (branch "Pre (getTransactionDepth)"
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "4")))
      (rule "closeTrue" (formula "7"))
   )
)
(branch "if b false"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=b_1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "b_1"))
   (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
   (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=b_2"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "b_2"))
   (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
   (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=b_3"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "b_3"))
   (rule "less_than_comparison_simple" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,1,0"))
   (rule "ifElseSplit" (formula "8"))
   (branch "if b_3 true"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifElseSkipElse" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "ifEnterThen" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0") (ifseqformula "3"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
       (builtin "Evaluate Query" (formula "7") (term "0") (newnames "callee,queryResult,res_getTransactionDepth"))
      (rule "replaceKnownQuery01_0" (formula "8") (term "0"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "8") (term "0,0,1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "queryResult"))
      (rule "applyEqRigid" (formula "8") (term "0,0,0,1") (ifseqformula "7"))
      (rule "eqSymm" (formula "8") (term "0,0,1"))
       (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_getTransactionDepth,result_getTransactionDepth,exc_0") (contract "javacard.framework.JCSystem[javacard.framework.JCSystem::getTransactionDepth()].JML normal_behavior operation contract.0") (modality "diamond"))
      (branch "Post (getTransactionDepth)"
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "eqSymm" (formula "9"))
         (rule "assignment" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "methodCallEmpty" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "emptyModality" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "notRight" (formula "10"))
         (rule "applyEq" (formula "10") (term "1") (ifseqformula "1"))
         (rule "throwUnfold" (formula "14") (term "1") (inst "#v0=a"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "a"))
         (rule "activeUseStaticFieldReadAccess" (formula "14") (term "1"))
         (rule "assignment_read_static_attribute" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallParamThrow" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "tryCatchThrow" (formula "14") (term "1"))
         (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=b_4"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_4"))
         (rule "equality_comparison_simple" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "replace_known_right" (formula "14") (term "0,0,1,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "ifElseSplit" (formula "14"))
         (branch "if b_4 true"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if b_4 false"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "14") (term "1"))
            (rule "ifElseSplit" (formula "14"))
            (branch "if a instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "emptyModality" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "4")) (ifInst ""  (formula "13")))
               (rule "closeTrue" (formula "14"))
            )
            (branch "if a instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Exceptional Post (getTransactionDepth)"
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "8"))
         (rule "close" (formula "11") (ifseqformula "10"))
      )
      (branch "Pre (getTransactionDepth)"
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "4")))
         (rule "closeTrue" (formula "8"))
      )
   )
   (branch "if b_3 false"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "5"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,0"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,1,0"))
      (rule "ifElseSplit" (formula "9"))
      (branch "if b_2 true"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifEnterThen" (formula "10") (term "1"))
         (rule "assignment" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0") (ifseqformula "3"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0") (ifseqformula "4"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "Evaluate Query" (formula "8") (term "0") (newnames "callee,queryResult,res_getTransactionDepth"))
         (rule "replaceKnownQuery011_0" (formula "9") (term "0"))
         (rule "notLeft" (formula "1"))
         (rule "eqSymm" (formula "9") (term "0,0,1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "queryResult"))
         (rule "applyEqRigid" (formula "9") (term "0,0,0,1") (ifseqformula "8"))
         (rule "eqSymm" (formula "9") (term "0,0,1"))
          (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_getTransactionDepth,result_getTransactionDepth,exc_0") (contract "javacard.framework.JCSystem[javacard.framework.JCSystem::getTransactionDepth()].JML normal_behavior operation contract.0") (modality "diamond"))
         (branch "Post (getTransactionDepth)"
             (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "eqSymm" (formula "10"))
            (rule "assignment" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "methodCallEmpty" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "emptyModality" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "notRight" (formula "11"))
            (rule "applyEq" (formula "11") (term "1") (ifseqformula "1"))
            (rule "throwUnfold" (formula "15") (term "1") (inst "#v0=a"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
            (rule "activeUseStaticFieldReadAccess" (formula "15") (term "1"))
            (rule "assignment_read_static_attribute" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallParamThrow" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "tryCatchThrow" (formula "15") (term "1"))
            (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=b_4"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "b_4"))
            (rule "equality_comparison_simple" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_right" (formula "15") (term "0,0,1,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "ifElseSplit" (formula "15"))
            (branch "if b_4 true"
                (builtin "One Step Simplification" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if b_4 false"
                (builtin "One Step Simplification" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "elim_double_block" (formula "15") (term "1"))
               (rule "ifElseSplit" (formula "15"))
               (branch "if a instanceof java.lang.Throwable true"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "e"))
                  (rule "delete_unnecessary_cast" (formula "15") (term "1"))
                   (builtin "One Step Simplification" (formula "16"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "15") (term "1"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "emptyModality" (formula "15") (term "1"))
                   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")) (ifInst ""  (formula "14")) (ifInst ""  (formula "4")) (ifInst ""  (formula "14")))
                  (rule "closeTrue" (formula "15"))
               )
               (branch "if a instanceof java.lang.Throwable false"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Exceptional Post (getTransactionDepth)"
             (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "11"))
         )
         (branch "Pre (getTransactionDepth)"
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch "if b_2 false"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "compound_greater_than_comparison_2" (formula "10") (term "1") (inst "#v1=s_1") (inst "#v0=s"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "s"))
         (rule "assignment" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "s_1"))
         (rule "compound_reference_cast_expression_primitive" (formula "10") (term "1") (inst "#v=i_1"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_1"))
         (rule "remove_parentheses_right" (formula "10") (term "1"))
         (rule "compound_subtraction_1" (formula "10") (term "1") (inst "#v=i_2"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_2"))
         (rule "assignment_read_length" (formula "10") (term "1"))
         (branch "Normal Execution (_bArray != null)"
             (builtin "One Step Simplification" (formula "11"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")))
            (rule "false_right" (formula "10"))
            (rule "assignmentSubtractionInt" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaSubInt" (formula "10") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,1,0"))
            (rule "narrowingShortCastInt" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaCastShort" (formula "10") (term "0,1,0"))
            (rule "greater_than_comparison_simple" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_gtToGeq" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,1,0"))
            (rule "blockEmpty" (formula "10") (term "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifSplit" (formula "12"))
            (branch "if b_1 true"
                (builtin "One Step Simplification" (formula "13"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "arrayLengthNotNegative" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
                (builtin "Evaluate Query" (formula "11") (term "0") (newnames "callee,queryResult,res_getTransactionDepth"))
               (rule "replaceKnownQuery00111_0" (formula "12") (term "0"))
               (rule "notLeft" (formula "1"))
               (rule "eqSymm" (formula "12") (term "0,0,1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "queryResult"))
               (rule "applyEqRigid" (formula "12") (term "0,0,0,1") (ifseqformula "11"))
               (rule "eqSymm" (formula "12") (term "0,0,1"))
                (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_getTransactionDepth,result_getTransactionDepth,exc_0") (contract "javacard.framework.JCSystem[javacard.framework.JCSystem::getTransactionDepth()].JML normal_behavior operation contract.0") (modality "diamond"))
               (branch "Post (getTransactionDepth)"
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "13"))
                  (rule "eqSymm" (formula "13"))
                  (rule "assignment" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "methodCallEmpty" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "emptyModality" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "notRight" (formula "14"))
                  (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
                  (rule "throwUnfold" (formula "18") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "18") (term "1"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "a"))
                  (rule "activeUseStaticFieldReadAccess" (formula "18") (term "1"))
                  (rule "assignment_read_static_attribute" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallParamThrow" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "tryCatchThrow" (formula "18") (term "1"))
                  (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=b_4"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "b_4"))
                  (rule "equality_comparison_simple" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "ifElseSplit" (formula "18"))
                  (branch "if b_4 true"
                      (builtin "One Step Simplification" (formula "19"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if b_4 false"
                      (builtin "One Step Simplification" (formula "19"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "elim_double_block" (formula "18") (term "1"))
                     (rule "ifElseSplit" (formula "18"))
                     (branch "if a instanceof java.lang.Throwable true"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                        (rule "true_left" (formula "1"))
                        (rule "variableDeclaration" (formula "18") (term "1") (newnames "e"))
                        (rule "delete_unnecessary_cast" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "19"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "emptyModality" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "4")) (ifInst ""  (formula "17")))
                        (rule "closeTrue" (formula "18"))
                     )
                     (branch "if a instanceof java.lang.Throwable false"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Exceptional Post (getTransactionDepth)"
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "12"))
                  (rule "close" (formula "15") (ifseqformula "14"))
               )
               (branch "Pre (getTransactionDepth)"
                   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "8")))
                  (rule "closeTrue" (formula "12"))
               )
            )
            (branch "if b_1 false"
                (builtin "One Step Simplification" (formula "13"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_leqRight" (formula "9"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "variableDeclarationFinalAssign" (formula "13") (term "1"))
               (rule "variableDeclarationFinal" (formula "13") (term "1") (newnames "changeTransient"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "remove_parentheses_right" (formula "13") (term "1"))
               (rule "compound_equality_comparison_1" (formula "13") (term "1") (inst "#v0=b_4"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_4"))
               (rule "arrayLengthNotNegative" (formula "1") (term "0"))
               (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
                (builtin "Evaluate Query" (formula "10") (term "0") (newnames "callee,queryResult,res_getTransactionDepth"))
               (rule "replaceKnownQuery10111_0" (formula "11") (term "0"))
               (rule "notLeft" (formula "1"))
               (rule "eqSymm" (formula "11") (term "0,0,1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "queryResult"))
               (rule "applyEqRigid" (formula "11") (term "0,0,0,1") (ifseqformula "10"))
               (rule "eqSymm" (formula "11") (term "0,0,1"))
                (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_getTransactionDepth,result_getTransactionDepth,exc_0") (contract "javacard.framework.JCSystem[javacard.framework.JCSystem::getTransactionDepth()].JML normal_behavior operation contract.0") (modality "diamond"))
               (branch "Post (getTransactionDepth)"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "12"))
                  (rule "eqSymm" (formula "12"))
                  (rule "assignment" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "methodCallEmpty" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "emptyModality" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "notRight" (formula "13"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "17") (term "1") (newnames "o#0") (inst "#v0=b_5"))
                  (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_5"))
                  (rule "variableDeclarationAssign" (formula "17") (term "1"))
                  (rule "variableDeclaration" (formula "17") (term "1") (newnames "o"))
                  (rule "assignment" (formula "17") (term "1"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "getJavaCardTransient" (formula "17"))
                  (branch "Normal Execution"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "blockEmpty" (formula "17") (term "1"))
                     (rule "assignment" (formula "17") (term "1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "equality_comparison_simple" (formula "17") (term "1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "ifSplit" (formula "17"))
                     (branch "if changeTransient true"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "staticMethodCallStaticViaTypereference" (formula "18") (term "1") (newnames "o#1,transientType#2"))
                        (rule "variableDeclarationAssign" (formula "18") (term "1"))
                        (rule "variableDeclaration" (formula "18") (term "1") (newnames "o_1"))
                        (rule "assignment" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "variableDeclarationAssign" (formula "18") (term "1"))
                        (rule "variableDeclaration" (formula "18") (term "1") (newnames "transientType"))
                        (rule "assignment" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "setJavaCardTransient" (formula "18"))
                        (branch "Normal Execution"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "for_to_while" (formula "18") (term "1") (inst "#outerLabel=_label3") (inst "#innerLabel=_label2"))
                           (rule "variableDeclarationAssign" (formula "18") (term "1"))
                           (rule "variableDeclaration" (formula "18") (term "1") (newnames "i"))
                           (rule "assignment" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "elim_double_block_3" (formula "18") (term "1"))
                           (rule "loopScopeInvDia" (formula "18") (term "1") (newnames "i_0,o_0,f") (inst "#variant=a") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "#x=b_6") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
                           (branch "Invariant Initially Valid"
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "qeq_literals" (formula "18") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "add_zero_right" (formula "18") (term "0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,1,0,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,1"))
                              (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "eqSymm" (formula "18") (term "1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0,1"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
                              (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,0,1"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,1"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,1"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,1"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,1"))
                              (rule "nnf_imp2or" (formula "18") (term "0,1"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0,1"))
                              (rule "cut_direct" (formula "18") (term "0"))
                              (branch "CUT: bArray.length >= bOffset TRUE"
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "allRight" (formula "19") (inst "sk=j_0"))
                                 (rule "orRight" (formula "19"))
                                 (rule "orRight" (formula "19"))
                                 (rule "orRight" (formula "21"))
                                 (rule "inEqSimp_leqRight" (formula "19"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "close" (formula "21") (ifseqformula "1"))
                              )
                              (branch "CUT: bArray.length >= bOffset FALSE"
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "false_right" (formula "19"))
                                 (rule "inEqSimp_geqRight" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "9") (term "0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "10"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "closeFalse" (formula "6"))
                              )
                           )
                           (branch "Invariant Preserved and Used"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "eqSymm" (formula "19") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
                              (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "19") (term "2,1,0,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,2,1,0,1,0,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "19") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "19") (term "0,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "19") (term "2,1,0,1,1,0,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,2,1,0,1,1,0,1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "19") (term "2,1,0,1,0,0,1,0,1"))
                              (rule "polySimp_addComm1" (formula "19") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_addComm1" (formula "19") (term "2,1,0,1,1,0,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "19") (term "0,2,1,0,1,0,0,1,0,1"))
                              (rule "polySimp_addComm0" (formula "19") (term "0,2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_addComm0" (formula "19") (term "0,2,1,0,1,1,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,1"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "h"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "h_1"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "h_2"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "a"))
                              (rule "variableDeclaration" (formula "19") (term "1,1,0,1") (newnames "b_6"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,1,0,0,1"))
                              (rule "elementOfArrayRange" (formula "19") (term "0,0,0,0,1,0,1,1,0,1,1,0,1") (inst "iv=iv"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                              (rule "nnf_imp2or" (formula "19") (term "0,1,0,0,1"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,0,1"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,1,0,0,1"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "19") (term "0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,1,1,0,1,1,0,1"))
                              (rule "emptyModality" (formula "19") (term "1"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "impRight" (formula "19"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "ifthenelse_to_or_left" (formula "5") (term "1,0"))
                              (rule "eqSymm" (formula "5") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "5") (term "1,1,1,0"))
                              (rule "inEqSimp_notLeq" (formula "5") (term "0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,1,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "5") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "5") (term "0"))
                              (rule "distr_forallAnd" (formula "5"))
                              (rule "andLeft" (formula "5"))
                              (rule "commute_or_2" (formula "6") (term "0"))
                              (rule "shift_paren_or" (formula "5") (term "0"))
                              (rule "commute_or_2" (formula "5") (term "0,0"))
                              (rule "shift_paren_or" (formula "6") (term "0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,0"))
                              (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=b_7"))
                              (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_7"))
                              (rule "less_than_comparison_simple" (formula "25") (term "1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if b_7 true"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eval_order_array_access2" (formula "26") (term "1") (inst "#v0=i_3") (inst "#ar1=b_arr"))
                                 (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                 (rule "variableDeclaration" (formula "26") (term "1") (newnames "b_arr"))
                                 (rule "assignment" (formula "26") (term "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                 (rule "variableDeclaration" (formula "26") (term "1") (newnames "i_3"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "assignmentAdditionInt" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
                                 (rule "assignment_to_primitive_array_component" (formula "25") (term "1"))
                                 (branch "Normal Execution (b_arr != null)"
                                     (builtin "One Step Simplification" (formula "26"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "blockEmpty" (formula "27") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "postincrement" (formula "25") (term "1"))
                                    (rule "compound_short_cast_expression" (formula "25") (term "1") (inst "#v=i_4"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "i_4"))
                                    (rule "remove_parentheses_right" (formula "25") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "25") (term "1"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "25") (term "0,1,0"))
                                    (rule "narrowingShortCastInt" (formula "25") (term "1"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "translateJavaCastShort" (formula "25") (term "0,1,0"))
                                    (rule "blockEmpty" (formula "25") (term "1"))
                                    (rule "lsContinue" (formula "25") (term "1"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "eqSymm" (formula "25") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "25") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "25") (term "0,1,1,0,0,0"))
                                    (rule "replace_known_left" (formula "25") (term "1,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "1,0,0,1,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,1,0,0,1,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "1,0,0,1,0,1,0,0"))
                                    (rule "dismissNonSelectedField" (formula "25") (term "0,0,1,1,0,0,0,1,0"))
                                    (rule "precOfInt" (formula "25") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,1,1"))
                                    (rule "add_literals" (formula "25") (term "1,1,0,1,1"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,1,1"))
                                    (rule "add_zero_right" (formula "25") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,1"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,1"))
                                    (rule "add_literals" (formula "25") (term "1,0,1,1"))
                                    (rule "times_zero_1" (formula "25") (term "0,1,1"))
                                    (rule "leq_literals" (formula "25") (term "1,1"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "25") (term "1,0,0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                                    (rule "times_zero_2" (formula "25") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                                    (rule "mul_literals" (formula "25") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                                    (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "25") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_subsumption1" (formula "25") (term "0,0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "25") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "andRight" (formula "25"))
                                    (branch
                                       (rule "allRight" (formula "25") (inst "sk=j_0"))
                                       (rule "cutUpperBound" (formula "25") (ifseqformula "5"))
                                       (branch
                                          (rule "crossInst" (formula "6") (inst "sk=j_1") (ifseqformula "26"))
                                          (rule "orRight" (formula "27"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "orRight" (formula "28"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "inEqSimp_leqRight" (formula "28"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                          (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "10") (term "1,2,1,0,0,1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "9") (term "1,2,1,0,0,1") (ifseqformula "3"))
                                          (rule "applyEqRigid" (formula "9") (term "0,0,0,0") (ifseqformula "8"))
                                          (rule "applyEqRigid" (formula "9") (term "0,1,0,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "9") (term "1,0,2,0,1") (ifseqformula "8"))
                                          (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch
                                          (rule "crossInst" (formula "6") (inst "sk=j_1") (ifseqformula "26"))
                                          (rule "orRight" (formula "27"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "orRight" (formula "28"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "inEqSimp_geqRight" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "29"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                          (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "8") (term "1,1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "8") (term "1,0,2,0,1") (ifseqformula "7"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "2"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0"))
                                          (rule "leq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "false_right" (formula "26"))
                                          (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "8") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "pullOutSelect" (formula "29") (term "1") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                          (rule "pullOutSelect" (formula "9") (term "0,1") (inst "selectSK=arr_1"))
                                          (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "9"))
                                          (rule "simplifySelectOfAnon" (formula "9"))
                                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "28")))
                                          (rule "eqSymm" (formula "10") (term "1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "9") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "dismissNonSelectedField" (formula "9") (term "2,0"))
                                          (rule "dismissNonSelectedField" (formula "9") (term "0,0,1,0,0"))
                                          (rule "replace_known_left" (formula "9") (term "0,1,0,0") (ifseqformula "23"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "9") (term "1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "9") (term "0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "9") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                          (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "9"))
                                          (rule "applyEqReverse" (formula "10") (term "1,1") (ifseqformula "9"))
                                          (rule "hideAuxiliaryEq" (formula "9"))
                                          (rule "eqSymm" (formula "9") (term "1"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch "j_0 <= i_0 TRUE"
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "3") (term "0,0"))
                                             (rule "add_zero_left" (formula "3") (term "0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "j_0 = i_0 TRUE"
                                                (rule "close" (formula "32") (ifseqformula "3"))
                                             )
                                             (branch "j_0 = i_0 FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "27"))
                                                (rule "inEqSimp_contradEq3" (formula "27") (ifseqformula "1"))
                                                (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                                (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "27") (term "0,0"))
                                                (rule "qeq_literals" (formula "27") (term "0"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "false_right" (formula "27"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0"))
                                                (rule "add_literals" (formula "1") (term "0"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "j_0 <= i_0 FALSE"
                                             (rule "inEqSimp_leqRight" (formula "30"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "2") (term "0,0") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "2") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "inEqSimp_subsumption1" (formula "9") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                                             (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                             (rule "qeq_literals" (formula "9") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "allLeft" (formula "10") (inst "t=j_0"))
                                             (rule "replaceKnownSelect_taclet10001000010111_2" (formula "10") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet10001000010111_3" (formula "10") (term "0,1"))
                                             (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                             (rule "leq_literals" (formula "10") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "allRight" (formula "25") (inst "sk=f_0"))
                                       (rule "allRight" (formula "25") (inst "sk=o_0_0"))
                                       (rule "orRight" (formula "25"))
                                       (rule "orRight" (formula "25"))
                                       (rule "eqSymm" (formula "25") (term "0,0,0,1"))
                                       (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "28"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "commute_and" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "1") (term "0,0"))
                                       (rule "allLeft" (formula "8") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,1,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,1,0,0"))
                                       (rule "qeq_literals" (formula "8") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "8") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0"))
                                       (rule "leq_literals" (formula "8") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=arr_0"))
                                       (rule "simplifySelectOfAnon" (formula "8"))
                                        (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "26")))
                                       (rule "eqSymm" (formula "9"))
                                       (rule "applyEqReverse" (formula "8") (term "1") (ifseqformula "9"))
                                       (rule "hideAuxiliaryEq" (formula "9"))
                                       (rule "dismissNonSelectedField" (formula "8") (term "2,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "dismissNonSelectedField" (formula "8") (term "0,0,1,0,0"))
                                       (rule "replace_known_left" (formula "8") (term "0,1,0,0") (ifseqformula "20"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "elementOfArrayRangeConcrete" (formula "8") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "8") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "8") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                       (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch "f_0 = java.lang.Object::<transient> & o_0_0 = bArray TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "applyEq" (formula "30") (term "1,0,0,1") (ifseqformula "2"))
                                          (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "false_right" (formula "30"))
                                          (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "closeTrue" (formula "30"))
                                       )
                                       (branch "f_0 = java.lang.Object::<transient> & o_0_0 = bArray FALSE"
                                          (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "cut_direct" (formula "29") (term "0,0"))
                                          (branch "CUT: o_0_0 = null TRUE"
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "false_right" (formula "30"))
                                             (rule "applyEqRigid" (formula "29") (term "0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "29") (term "0"))
                                             (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "26"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "false_right" (formula "29"))
                                             (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "26"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "29")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: o_0_0 = null FALSE"
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "notRight" (formula "30"))
                                             (rule "cut_direct" (formula "29") (term "0"))
                                             (branch "CUT: o_0_0 = bArray TRUE"
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                (rule "nnf_ex2all" (formula "29"))
                                                (rule "nnf_notAnd" (formula "1") (term "0"))
                                                (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                                (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
                                                (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "f_0 = arr(bOffset + i_0) TRUE"
                                                   (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "3"))
                                                   (rule "narrowSelectArrayType" (formula "30") (term "0") (ifseqformula "20") (ifseqformula "27"))
                                                   (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEq" (formula "26") (term "0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "26"))
                                                   (rule "false_right" (formula "26"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_or_2" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                                   (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,1"))
                                                   (rule "add_literals" (formula "1") (term "1,0,0,0,1"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                                   (rule "add_literals" (formula "5") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "5") (term "1,0"))
                                                   (rule "add_literals" (formula "5") (term "0"))
                                                   (rule "leq_literals" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                                (branch "f_0 = arr(bOffset + i_0) FALSE"
                                                   (rule "close" (formula "31") (ifseqformula "3"))
                                                )
                                             )
                                             (branch "CUT: o_0_0 = bArray FALSE"
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "false_right" (formula "30"))
                                                (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "31")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Null Reference (b_arr = null)"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Index Out of Bounds (b_arr != null, but i_3 Out of Bounds!)"
                                     (builtin "One Step Simplification" (formula "26"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                    (rule "blockThrow" (formula "26") (term "1"))
                                    (rule "blockThrow" (formula "26") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "leq_literals" (formula "1") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "1,0"))
                                    (rule "times_zero_1" (formula "6") (term "0"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "12"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "12") (term "0,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0"))
                                    (rule "applyEq" (formula "11") (term "0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "if b_7 false"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "inEqSimp_geqRight" (formula "22"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "0,1,0,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "26") (term "1,0,1,1,0") (ifseqformula "3"))
                                 (rule "polySimp_pullOutFactor2" (formula "26") (term "0,1,1,0"))
                                 (rule "add_literals" (formula "26") (term "1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "26") (term "0,1,1,0"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "1,0"))
                                 (rule "times_zero_1" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "6") (term "1,2,1,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "23") (term "1,2,1,0,1,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEq" (formula "5") (term "1,2,1,0,0,1,0") (ifseqformula "2"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "0,1,0,0"))
                                 (rule "leq_literals" (formula "6") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "elim_double_block_2" (formula "22") (term "1"))
                                 (rule "blockBreak" (formula "22") (term "1"))
                                 (rule "lsBreak" (formula "22") (term "1"))
                                 (rule "assignment" (formula "22") (term "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "ifSplit" (formula "22"))
                                 (branch "if changeTransient true"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "1"))
                                    (rule "staticMethodCallStaticViaTypereference" (formula "22") (term "1") (newnames "o#3,transientType#4"))
                                    (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                    (rule "variableDeclaration" (formula "22") (term "1") (newnames "o_2"))
                                    (rule "assignment" (formula "22") (term "1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                    (rule "variableDeclaration" (formula "22") (term "1") (newnames "transientType_1"))
                                    (rule "assignment" (formula "22") (term "1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "setJavaCardTransient" (formula "22"))
                                    (branch "Normal Execution"
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "blockEmpty" (formula "22") (term "1"))
                                       (rule "returnUnfold" (formula "22") (term "1") (inst "#v0=s_2"))
                                       (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                       (rule "variableDeclaration" (formula "22") (term "1") (newnames "s_2"))
                                       (rule "compound_reference_cast_expression_primitive" (formula "22") (term "1") (inst "#v=i_3"))
                                       (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                       (rule "variableDeclaration" (formula "22") (term "1") (newnames "i_3"))
                                       (rule "remove_parentheses_right" (formula "22") (term "1"))
                                       (rule "assignmentAdditionInt" (formula "22") (term "1"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
                                       (rule "narrowingShortCastInt" (formula "22") (term "1"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "translateJavaCastShort" (formula "22") (term "0,1,0"))
                                       (rule "methodCallReturn" (formula "22") (term "1"))
                                       (rule "assignment" (formula "22") (term "1"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "methodCallEmpty" (formula "22") (term "1"))
                                       (rule "tryEmpty" (formula "22") (term "1"))
                                       (rule "emptyModality" (formula "22") (term "1"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "eqSymm" (formula "22") (term "1,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "22") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "22") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,0,0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0,1,0,1,0"))
                                       (rule "applyEq" (formula "22") (term "1,1,0,0,1,0") (ifseqformula "2"))
                                       (rule "replace_known_left" (formula "22") (term "1,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "applyEq" (formula "22") (term "1,1,1,0,1,0,0,0,0,1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "22") (term "1,0,0") (ifseqformula "2"))
                                       (rule "polySimp_pullOutFactor2" (formula "22") (term "0,0"))
                                       (rule "add_literals" (formula "22") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "22") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "allRight" (formula "22") (inst "sk=f_0"))
                                       (rule "allRight" (formula "22") (inst "sk=o_0"))
                                       (rule "orRight" (formula "22"))
                                       (rule "orRight" (formula "22"))
                                       (rule "eqSymm" (formula "22") (term "0,0,0,1"))
                                       (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "commute_and" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch "f_0 = java.lang.Object::<transient> & o_0 = bArray TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                                          (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "false_right" (formula "24"))
                                          (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEqRigid" (formula "25") (term "2,0") (ifseqformula "1"))
                                          (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "15"))
                                          (rule "close" (formula "25") (ifseqformula "9"))
                                       )
                                       (branch "f_0 = java.lang.Object::<transient> & o_0 = bArray FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "o_2 is not null"
                                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "19")))
                                       (rule "closeTrue" (formula "22"))
                                    )
                                 )
                                 (branch "if changeTransient false"
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                        )
                        (branch "o_1 is not null"
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")))
                           (rule "closeTrue" (formula "18"))
                        )
                     )
                     (branch "if changeTransient false"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "for_to_while" (formula "18") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
                        (rule "variableDeclarationAssign" (formula "18") (term "1"))
                        (rule "variableDeclaration" (formula "18") (term "1") (newnames "i"))
                        (rule "assignment" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "elim_double_block_3" (formula "18") (term "1"))
                        (rule "loopScopeInvDia" (formula "18") (term "1") (newnames "i_0,o_0,f") (inst "#variant=a") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "#x=b_6") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
                        (branch "Invariant Initially Valid"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "add_zero_right" (formula "18") (term "0,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,1,0,0"))
                           (rule "qeq_literals" (formula "18") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "6")))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "eqSymm" (formula "18") (term "1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0,1"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
                           (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,0,1"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,1,0,1"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,1"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,1"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,1"))
                           (rule "nnf_imp2or" (formula "18") (term "0,1"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0,1"))
                           (rule "cut_direct" (formula "18") (term "0"))
                           (branch "CUT: bArray.length >= bOffset TRUE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "allRight" (formula "19") (inst "sk=j_0"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "20"))
                              (rule "orRight" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "21"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "20"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                           (branch "CUT: bArray.length >= bOffset FALSE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "false_right" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "9") (term "0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "closeFalse" (formula "9"))
                           )
                        )
                        (branch "Invariant Preserved and Used"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "2,1,0,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,2,1,0,1,0,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "0,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "2,1,0,1,1,0,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,2,1,0,1,1,0,1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "2,1,0,1,0,0,1,0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "2,1,0,1,1,0,1,0,0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,2,2,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,2,1,0,1,0,0,1,0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,2,1,0,1,1,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,1,1,0,1,1,0,1"))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "h"))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "h_1"))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "h_2"))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "a"))
                           (rule "variableDeclaration" (formula "19") (term "1,1,0,1") (newnames "b_6"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "elementOfArrayRange" (formula "19") (term "0,0,0,0,1,0,1,1,0,1,1,0,1") (inst "iv=iv"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,1"))
                           (rule "nnf_imp2or" (formula "19") (term "0,1,0,0,1"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,0,1"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,0,1"))
                           (rule "nnf_imp2or" (formula "19") (term "0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,1,1,0,1,1,0,1"))
                           (rule "emptyModality" (formula "19") (term "1"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "impRight" (formula "19"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "ifthenelse_to_or_left" (formula "5") (term "1,0"))
                           (rule "eqSymm" (formula "5") (term "1,1,1,0"))
                           (rule "eqSymm" (formula "5") (term "1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "5") (term "0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,1,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0,0,1,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "5") (term "0"))
                           (rule "distr_forallAnd" (formula "5"))
                           (rule "andLeft" (formula "5"))
                           (rule "commute_or_2" (formula "6") (term "0"))
                           (rule "shift_paren_or" (formula "5") (term "0"))
                           (rule "commute_or_2" (formula "5") (term "0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0"))
                           (rule "commute_or" (formula "6") (term "0,0,0"))
                           (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=b_7"))
                           (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_7"))
                           (rule "less_than_comparison_simple" (formula "25") (term "1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0"))
                           (rule "ifElseSplit" (formula "25"))
                           (branch "if b_7 true"
                               (builtin "One Step Simplification" (formula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "eval_order_array_access2" (formula "26") (term "1") (inst "#v0=i_3") (inst "#ar1=b_arr"))
                              (rule "variableDeclarationAssign" (formula "26") (term "1"))
                              (rule "variableDeclaration" (formula "26") (term "1") (newnames "b_arr"))
                              (rule "assignment" (formula "26") (term "1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "variableDeclarationAssign" (formula "26") (term "1"))
                              (rule "variableDeclaration" (formula "26") (term "1") (newnames "i_3"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "assignmentAdditionInt" (formula "25") (term "1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
                              (rule "assignment_to_primitive_array_component" (formula "25") (term "1"))
                              (branch "Normal Execution (b_arr != null)"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "blockEmpty" (formula "27") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "postincrement" (formula "25") (term "1"))
                                 (rule "compound_reference_cast_expression_primitive" (formula "25") (term "1") (inst "#v=i_4"))
                                 (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "i_4"))
                                 (rule "remove_parentheses_right" (formula "25") (term "1"))
                                 (rule "assignmentAdditionInt" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,1,0"))
                                 (rule "narrowingShortCastInt" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "translateJavaCastShort" (formula "25") (term "0,1,0"))
                                 (rule "blockEmpty" (formula "25") (term "1"))
                                 (rule "lsContinue" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "eqSymm" (formula "25") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,1"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "1,0,0,1,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,1,0,0,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "1,0,0,1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,1,1,0,0,0"))
                                 (rule "replace_known_left" (formula "25") (term "1,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "precOfInt" (formula "25") (term "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,1"))
                                 (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,1"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                                 (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,1,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,1,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,1,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,1"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,1"))
                                 (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,1"))
                                 (rule "add_literals" (formula "25") (term "1,0,1,1"))
                                 (rule "times_zero_1" (formula "25") (term "0,1,1"))
                                 (rule "leq_literals" (formula "25") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,0,0"))
                                 (rule "replace_known_left" (formula "25") (term "1,0,0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                                 (rule "times_zero_2" (formula "25") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                                 (rule "mul_literals" (formula "25") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                                 (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_subsumption1" (formula "25") (term "1,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq0" (formula "25") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
                                 (rule "qeq_literals" (formula "25") (term "0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_subsumption1" (formula "25") (term "0,0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "25") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "andRight" (formula "25"))
                                 (branch
                                    (rule "allRight" (formula "25") (inst "sk=j_0"))
                                    (rule "cutUpperBound" (formula "25") (ifseqformula "5"))
                                    (branch
                                       (rule "crossInst" (formula "6") (inst "sk=j_1") (ifseqformula "26"))
                                       (rule "orRight" (formula "27"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "orRight" (formula "28"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "inEqSimp_leqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                       (rule "applyEqRigid" (formula "9") (term "1,0,2,0,1") (ifseqformula "8"))
                                       (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "8"))
                                       (rule "applyEqRigid" (formula "9") (term "0,0,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "3"))
                                       (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
                                       (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch
                                       (rule "crossInst" (formula "6") (inst "sk=j_1") (ifseqformula "26"))
                                       (rule "orRight" (formula "27"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "orRight" (formula "28"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "inEqSimp_leqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                       (rule "applyEqRigid" (formula "8") (term "1,0,2,0,1") (ifseqformula "7"))
                                       (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "7"))
                                       (rule "applyEqRigid" (formula "8") (term "0,1,0,0") (ifseqformula "7"))
                                       (rule "applyEqRigid" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                                       (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0"))
                                       (rule "leq_literals" (formula "25") (term "0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "false_right" (formula "25"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "8") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "pullOutSelect" (formula "29") (term "1") (inst "selectSK=arr_0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                       (rule "pullOutSelect" (formula "9") (term "0,1") (inst "selectSK=arr_1"))
                                       (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "9"))
                                       (rule "simplifySelectOfAnon" (formula "9"))
                                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "28")) (ifInst ""  (formula "22")))
                                       (rule "eqSymm" (formula "10") (term "1"))
                                       (rule "elementOfArrayRangeConcrete" (formula "9") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "9") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "9") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "9") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                       (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "9"))
                                       (rule "applyEqReverse" (formula "10") (term "1,1") (ifseqformula "9"))
                                       (rule "hideAuxiliaryEq" (formula "9"))
                                       (rule "eqSymm" (formula "9") (term "1"))
                                       (rule "ifthenelse_split" (formula "30") (term "0"))
                                       (branch "j_0 <= i_0 TRUE"
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                          (rule "times_zero_1" (formula "4") (term "0,0"))
                                          (rule "add_zero_left" (formula "4") (term "0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "j_0 = i_0 TRUE"
                                             (rule "close" (formula "32") (ifseqformula "3"))
                                          )
                                          (branch "j_0 = i_0 FALSE"
                                             (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "26"))
                                             (rule "inEqSimp_contradEq3" (formula "26") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                             (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0"))
                                             (rule "qeq_literals" (formula "26") (term "0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "false_right" (formula "26"))
                                             (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0"))
                                             (rule "add_zero_right" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                       (branch "j_0 <= i_0 FALSE"
                                          (rule "inEqSimp_leqRight" (formula "30"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "2") (term "0,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "30"))
                                          (rule "inEqSimp_subsumption1" (formula "9") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                          (rule "qeq_literals" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "allLeft" (formula "10") (inst "t=j_0"))
                                          (rule "replaceKnownSelect_taclet1000110010111_2" (formula "10") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet1000110010111_3" (formula "10") (term "0,1"))
                                          (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                          (rule "leq_literals" (formula "10") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "10"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                                 (branch
                                    (rule "allRight" (formula "25") (inst "sk=f_0"))
                                    (rule "allRight" (formula "25") (inst "sk=o_0_0"))
                                    (rule "orRight" (formula "25"))
                                    (rule "orRight" (formula "25"))
                                    (rule "eqSymm" (formula "25") (term "0,0,0,1"))
                                    (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=f_0_0"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "eqSymm" (formula "1") (term "1,0,0"))
                                    (rule "eqSymm" (formula "1") (term "0,0,0"))
                                    (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                    (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                    (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "commute_and" (formula "1") (term "0,0"))
                                    (rule "allLeft" (formula "7") (inst "t=i_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,1,0,0"))
                                    (rule "qeq_literals" (formula "7") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "7") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "7") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=arr_0"))
                                    (rule "simplifySelectOfAnon" (formula "7"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "25")) (ifInst ""  (formula "19")))
                                    (rule "eqSymm" (formula "8"))
                                    (rule "applyEqReverse" (formula "7") (term "1") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "hideAuxiliaryEq" (formula "8"))
                                    (rule "elementOfArrayRangeConcrete" (formula "7") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                    (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "f_0 = arr(bOffset + i_0) & o_0_0 = bArray TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "applyEq" (formula "29") (term "1,0,0,1") (ifseqformula "2"))
                                       (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "false_right" (formula "29"))
                                       (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "28") (term "1,0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "1"))
                                       (rule "narrowSelectArrayType" (formula "29") (term "0") (ifseqformula "18") (ifseqformula "25"))
                                       (rule "nnf_ex2all" (formula "28"))
                                       (rule "nnf_notAnd" (formula "1") (term "0"))
                                       (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                       (rule "commute_or" (formula "1") (term "0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "1") (term "1,0,0,0,1"))
                                       (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "leq_literals" (formula "1") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "f_0 = arr(bOffset + i_0) & o_0_0 = bArray FALSE"
                                       (rule "close" (formula "30") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "Null Reference (b_arr = null)"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Index Out of Bounds (b_arr != null, but i_3 Out of Bounds!)"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                 (rule "blockThrow" (formula "26") (term "1"))
                                 (rule "blockThrow" (formula "26") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "leq_literals" (formula "1") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "10") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "11") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "if b_7 false"
                               (builtin "One Step Simplification" (formula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "21"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,0"))
                              (rule "times_zero_1" (formula "3") (term "0"))
                              (rule "leq_literals" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "applyEq" (formula "25") (term "1,2,1,0,1,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "5") (term "1,2,1,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "25") (term "1,0,1,1,0") (ifseqformula "2"))
                              (rule "polySimp_pullOutFactor2" (formula "25") (term "0,1,1,0"))
                              (rule "add_literals" (formula "25") (term "1,0,1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "0,1,1,0"))
                              (rule "applyEq" (formula "6") (term "1,2,1,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "2"))
                              (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "2"))
                              (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0"))
                              (rule "add_literals" (formula "6") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "6") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "6") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "blockBreak" (formula "22") (term "1"))
                              (rule "lsBreak" (formula "22") (term "1"))
                              (rule "assignment" (formula "22") (term "1"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "ifSplit" (formula "22"))
                              (branch "if changeTransient true"
                                  (builtin "One Step Simplification" (formula "23"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if changeTransient false"
                                  (builtin "One Step Simplification" (formula "23"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "returnUnfold" (formula "22") (term "1") (inst "#v0=s_2"))
                                 (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                 (rule "variableDeclaration" (formula "22") (term "1") (newnames "s_2"))
                                 (rule "compound_reference_cast_expression_primitive" (formula "22") (term "1") (inst "#v=i_3"))
                                 (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                 (rule "variableDeclaration" (formula "22") (term "1") (newnames "i_3"))
                                 (rule "remove_parentheses_right" (formula "22") (term "1"))
                                 (rule "assignmentAdditionInt" (formula "22") (term "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
                                 (rule "narrowingShortCastInt" (formula "22") (term "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "translateJavaCastShort" (formula "22") (term "0,1,0"))
                                 (rule "methodCallReturn" (formula "22") (term "1"))
                                 (rule "assignment" (formula "22") (term "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "methodCallEmpty" (formula "22") (term "1"))
                                 (rule "tryEmpty" (formula "22") (term "1"))
                                 (rule "emptyModality" (formula "22") (term "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "eqSymm" (formula "22") (term "1,0,0,1"))
                                 (rule "polySimp_homoEq" (formula "22") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "22") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_pullOutFactor2" (formula "22") (term "0,0,0"))
                                 (rule "add_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "applyEq" (formula "22") (term "1,1,0,0,0") (ifseqformula "2"))
                                 (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=f_0"))
                                 (rule "allRight" (formula "22") (inst "sk=o_0"))
                                 (rule "orRight" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "eqSymm" (formula "22") (term "0,0,0,1"))
                                 (rule "applyEq" (formula "22") (term "1,1,1,0,1") (ifseqformula "2"))
                                 (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                 (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
                  (branch "o is not null"
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")))
                     (rule "closeTrue" (formula "17"))
                  )
               )
               (branch "Exceptional Post (getTransactionDepth)"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "11"))
                  (rule "close" (formula "14") (ifseqformula "13"))
               )
               (branch "Pre (getTransactionDepth)"
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")))
                  (rule "closeTrue" (formula "11"))
               )
            )
         )
         (branch "Null Reference (_bArray = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
)
}
