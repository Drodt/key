\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_RESTRICTED",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_NONE",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource ".";

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.proof.init.FunctionalOperationContractPO",
    "contract" : "LCP[LCP::lcp([I,int,int)].JML normal_behavior operation contract.0",
    "name" : "LCP[LCP::lcp([I,int,int)].JML normal_behavior operation contract.0"
 }

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "c12e9dae06c00a26bb394e881da8d84a3a7e2ef1"))

(autoModeTime "1495")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "9"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "10") (term "1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "10") (term "1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "10") (term "1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "0,2,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "0,2,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,1,0,0,0,1"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "polySimp_sepNegMonomial" (formula "10") (term "1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "10") (term "1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "10") (term "0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_lcp,savedHeapBefore_lcp,_aBefore_lcp,_xBefore_lcp,_yBefore_lcp"))
 (builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "l"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "loopScopeInvDia" (formula "10") (term "1") (newnames "l_0,o,f") (inst "#variant=a_1") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "#x=b") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "10"))
   (rule "add_zero_left" (formula "10") (term "0,1,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,1,0,0"))
   (rule "leq_literals" (formula "10") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "eqSymm" (formula "10") (term "1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,1,0"))
   (rule "replace_known_right" (formula "10") (term "0,1,0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,0,0,1"))
   (rule "inEqSimp_subsumption1" (formula "10") (term "1,0") (ifseqformula "7"))
   (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
   (rule "qeq_literals" (formula "10") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "5"))
   (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0"))
   (rule "qeq_literals" (formula "10") (term "0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "allRight" (formula "10") (inst "sk=z_0"))
   (rule "impRight" (formula "10"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "11"))
   (rule "eqSymm" (formula "11") (term "0,0,1,0,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "0,1,0,0,0,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,1,0,0,1"))
   (rule "eqSymm" (formula "11") (term "0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "h"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "h_1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "h_2"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "a_1"))
   (rule "variableDeclaration" (formula "11") (term "1,1,0,1") (newnames "b"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0,1"))
   (rule "nnf_imp2or" (formula "11") (term "0,1,0,0,1"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,1"))
   (rule "nnf_imp2or" (formula "11") (term "0,1,0,0,1,1,0,1,1,0,1"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "emptyModality" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
   (rule "impRight" (formula "11"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm0" (formula "3") (term "1"))
   (rule "polySimp_addComm0" (formula "2") (term "1"))
   (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
   (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=b_1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
   (rule "compound_assignment_3_nonsimple" (formula "16") (term "1"))
   (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=b_2"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_2"))
   (rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=b_3"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_3"))
   (rule "compound_assignment_3_nonsimple" (formula "16") (term "1"))
   (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=b_4"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_4"))
   (rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=b_5"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_5"))
   (rule "compound_less_than_comparison_2" (formula "16") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "i"))
   (rule "assignmentAdditionInt" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_1"))
   (rule "assignment_read_length" (formula "16"))
   (branch "Normal Execution (_a != null)"
       (builtin "One Step Simplification" (formula "16"))
      (rule "less_than_comparison_simple" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
      (rule "compound_assignment_1_new" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "ifElseSplit" (formula "16"))
      (branch "if b_4 true"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "14"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1"))
         (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0"))
         (rule "add_literals" (formula "4") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "4") (term "0,0,0"))
         (rule "add_zero_left" (formula "4") (term "0,0"))
         (rule "applyEq" (formula "17") (term "1,0,1,1,0,0") (ifseqformula "2"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_pullOutFactor2" (formula "17") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "17") (term "1,0,0,1,1,0,0"))
         (rule "times_zero_1" (formula "17") (term "0,0,1,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,1,1,0,0"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "14"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,0"))
         (rule "times_zero_1" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0"))
         (rule "add_zero_right" (formula "11") (term "0"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1"))
         (rule "polySimp_elimOne" (formula "3") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1"))
         (rule "polySimp_rightDist" (formula "13") (term "1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "0,1"))
         (rule "mul_literals" (formula "13") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "polySimp_elimOne" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10"))
         (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "15"))
         (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "3"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0"))
         (rule "qeq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "false_right" (formula "15"))
         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
         (rule "leq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "12"))
         (rule "times_zero_1" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1"))
         (rule "polySimp_rightDist" (formula "11") (term "1"))
         (rule "mul_literals" (formula "11") (term "0,1"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0"))
         (rule "qeq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
         (rule "times_zero_1" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
         (rule "leq_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "compound_assignment_1_new" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "ifElseSplit" (formula "14"))
         (branch "if b_2 true"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSkipThen" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "blockBreak" (formula "14") (term "1"))
            (rule "lsBreak" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "methodCallReturn" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (rule "tryEmpty" (formula "14") (term "1"))
            (rule "emptyModality" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
            (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,1"))
            (rule "add_literals" (formula "14") (term "1,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "0,0,1"))
            (rule "leq_literals" (formula "14") (term "0,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "14") (term "1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1"))
            (rule "polySimp_addComm1" (formula "14") (term "0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0,1"))
            (rule "add_literals" (formula "14") (term "1,0,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "0,0,0,1"))
            (rule "add_zero_left" (formula "14") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1"))
            (rule "inEqSimp_subsumption0" (formula "14") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,1"))
            (rule "qeq_literals" (formula "14") (term "0,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_geqRight" (formula "14"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if b_2 false"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if b_4 false"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "qeq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "compound_less_than_comparison_2" (formula "16") (term "1") (inst "#v1=i_3") (inst "#v0=i_2"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_2"))
         (rule "assignmentAdditionInt" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_3"))
         (rule "assignment_read_length" (formula "16"))
         (branch "Normal Execution (_a != null)"
             (builtin "One Step Simplification" (formula "16"))
            (rule "less_than_comparison_simple" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1,0"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "ifElseSplit" (formula "16"))
            (branch "if b_2 true"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "notLeft" (formula "1"))
               (rule "ifElseSkipThen" (formula "17") (term "1"))
               (rule "inEqSimp_geqRight" (formula "14"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "17") (term "1,0,1,1,0") (ifseqformula "3"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,0"))
               (rule "polySimp_pullOutFactor2" (formula "17") (term "0,0,1,1,0"))
               (rule "add_literals" (formula "17") (term "1,0,0,1,1,0"))
               (rule "times_zero_1" (formula "17") (term "0,0,1,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,1,1,0"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "1,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0"))
               (rule "add_zero_right" (formula "14") (term "0"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,0"))
               (rule "times_zero_1" (formula "4") (term "0"))
               (rule "leq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "polySimp_elimOne" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "leq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "false_right" (formula "15"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "blockBreak" (formula "14") (term "1"))
               (rule "lsBreak" (formula "14") (term "1"))
               (rule "assignment" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "methodCallReturn" (formula "14") (term "1"))
               (rule "assignment" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "methodCallEmpty" (formula "14") (term "1"))
               (rule "tryEmpty" (formula "14") (term "1"))
               (rule "emptyModality" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")))
               (rule "applyEq" (formula "14") (term "0,1,1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1"))
               (rule "add_literals" (formula "14") (term "1,0,1,1"))
               (rule "times_zero_1" (formula "14") (term "0,1,1"))
               (rule "leq_literals" (formula "14") (term "1,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,0,1"))
               (rule "add_literals" (formula "14") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "14") (term "0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,1"))
               (rule "inEqSimp_subsumption1" (formula "14") (term "0") (ifseqformula "12"))
               (rule "leq_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_geqRight" (formula "14"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if b_2 false"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "compound_equality_comparison_2" (formula "16") (term "1") (inst "#v1=i_5") (inst "#v0=i_4"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_4"))
               (rule "eval_order_array_access5" (formula "16") (term "1") (inst "#v1=i_6") (inst "#ar1=i_arr"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_arr"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_6"))
               (rule "assignmentAdditionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
               (rule "assignment_array2" (formula "16"))
               (branch "Normal Execution (i_arr != null)"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_5"))
                  (rule "eval_order_array_access5" (formula "16") (term "1") (inst "#v1=i_7") (inst "#ar1=i_arr_1"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_arr_1"))
                  (rule "assignment" (formula "16") (term "1"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_7"))
                  (rule "assignmentAdditionInt" (formula "16") (term "1"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                  (rule "assignment_array2" (formula "16"))
                  (branch "Normal Execution (i_arr_1 != null)"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "equality_comparison_simple" (formula "16") (term "1"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "eqSymm" (formula "16") (term "0,0,1,0"))
                     (rule "blockEmpty" (formula "16") (term "1"))
                     (rule "ifElseSplit" (formula "16"))
                     (branch "if b_1 true"
                         (builtin "One Step Simplification" (formula "17"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "postincrement" (formula "17") (term "1"))
                        (rule "compound_int_cast_expression" (formula "17") (term "1") (inst "#v=i_8"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_8"))
                        (rule "remove_parentheses_right" (formula "17") (term "1"))
                        (rule "assignmentAdditionInt" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "17") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "lsContinue" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0"))
                        (rule "replace_known_left" (formula "17") (term "1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0"))
                        (rule "replace_known_left" (formula "17") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,0,0,1"))
                        (rule "precOfInt" (formula "17") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,1,1"))
                        (rule "add_literals" (formula "17") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "17") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "17") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "17") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,1"))
                        (rule "add_literals" (formula "17") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "17") (term "0,1,1"))
                        (rule "leq_literals" (formula "17") (term "1,1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
                        (rule "times_zero_2" (formula "17") (term "1,0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "17") (term "0,0") (ifseqformula "4"))
                        (rule "leq_literals" (formula "17") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "1"))
                        (branch "CUT: a.length >= 1 + l_0 TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "allRight" (formula "18") (inst "sk=z_0"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "inEqSimp_leqRight" (formula "18"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "19"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "allLeft" (formula "8") (inst "t=z_0"))
                           (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "8") (term "0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "9"))
                           (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "1,0"))
                           (rule "times_zero_1" (formula "9") (term "0"))
                           (rule "leq_literals" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEqRigid" (formula "21") (term "1,0,2,0") (ifseqformula "8"))
                           (rule "eqSymm" (formula "21"))
                           (rule "polySimp_addComm0" (formula "21") (term "0,2,1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "7"))
                           (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "6"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,2,1"))
                           (rule "close" (formula "19") (ifseqformula "2"))
                        )
                        (branch "CUT: a.length >= 1 + l_0 FALSE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (rule "inEqSimp_geqRight" (formula "17"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "12") (term "0,0"))
                           (rule "add_zero_left" (formula "12") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "closeFalse" (formula "15"))
                        )
                     )
                     (branch "if b_1 false"
                         (builtin "One Step Simplification" (formula "17"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elim_double_block_2" (formula "17") (term "1"))
                        (rule "blockBreak" (formula "17") (term "1"))
                        (rule "lsBreak" (formula "17") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "methodCallReturn" (formula "17") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "methodCallEmpty" (formula "17") (term "1"))
                        (rule "tryEmpty" (formula "17") (term "1"))
                        (rule "emptyModality" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "14")))
                        (rule "inEqSimp_subsumption1" (formula "17") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1"))
                        (rule "qeq_literals" (formula "17") (term "0,1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_geqRight" (formula "17"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch "Null Reference (i_arr_1 = null)"
                     (rule "false_right" (formula "17"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (i_arr_1 != null, but i_7 Out of Bounds!)"
                      (builtin "One Step Simplification" (formula "17"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                     (rule "false_right" (formula "17"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "13") (term "0,0"))
                     (rule "add_zero_left" (formula "13") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "closeFalse" (formula "13"))
                  )
               )
               (branch "Null Reference (i_arr = null)"
                  (rule "false_right" (formula "17"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (i_arr != null, but i_6 Out of Bounds!)"
                   (builtin "One Step Simplification" (formula "17"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                  (rule "false_right" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "10") (term "0,0"))
                  (rule "add_zero_left" (formula "10") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
         (branch "Null Reference (_a = null)"
            (rule "false_right" (formula "17"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (_a = null)"
      (rule "false_right" (formula "17"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
