\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_OFF",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_INVARIANT",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_INSTANTIATE",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "src";

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.proof.init.FunctionalOperationContractPO",
    "contract" : "LoopContractExamplesAll[LoopContractExamplesAll::sum_loopContract_onBlock([I)].JML normal_behavior operation contract.0",
    "name" : "LoopContractExamplesAll[LoopContractExamplesAll::sum_loopContract_onBlock([I)].JML normal_behavior operation contract.0"
 }

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "daniel" ) (keyVersion "c12e9dae06c00a26bb394e881da8d84a3a7e2ef1"))
(keyLog "2" (keyUser "daniel" ) (keyVersion "c12e9dae06c00a26bb394e881da8d84a3a7e2ef1"))

(autoModeTime "454")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "0,0,0,1"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
 (builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_sum_loopContract_onBlock,savedHeapBefore_sum_loopContract_onBlock,_arrBefore_sum_loopContract_onBlock,sumBefore_sum_loopContract_onBlock"))
 (builtin "One Step Simplification" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "sum_1"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "Loop Apply Head" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "arr_1"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "blockEmpty" (formula "5") (term "1"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "idx"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "blockEmpty" (formula "5") (term "1"))
 (builtin "Loop Contract (Internal)" (formula "5") (newnames "anonOut_heap,result_sum_loopContract_onBlock_0,exc_0,heap_Before_BLOCK,savedHeap_Before_BLOCK,sum_Before_BLOCK#21,idx#25_Before_BLOCK#26,idx#32_Before_BLOCK#27,heap_Before_BLOCK_NEXT,savedHeap_Before_BLOCK_NEXT,heap_Before_BLOCK_NEXT,savedHeap_Before_BLOCK_NEXT,sum_Before_BLOCK#21_NEXT,idx#25_Before_BLOCK#26_NEXT,idx#32_Before_BLOCK#27_NEXT,sum_Before_BLOCK#21_NEXT,idx#25_Before_BLOCK#26_NEXT,idx#32_Before_BLOCK#27_NEXT,o,f,o,f,anonOut_sum_1,anonOut_idx#25,anonOut_idx,anonOut_sum_1_0,anonOut_idx_0,init_anonOut_heap,init_anonOut_sum_1,init_anonOut_idx"))
(branch "Validity"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")))
   (rule "impRight" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "11") (term "1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,1,0,0,0,1"))
   (rule "eqSymm" (formula "11") (term "1,1,0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,1,0,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1,1,0,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,1,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,1,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0,1,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,0,1,1,1,1,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,0,1,1,1,1,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,1,0,1,1,1,1,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "3"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "4") (term "0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "4") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "add_literals" (formula "11") (term "1,1,0,1,0,1,1,0,1,1,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,1,0,1,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc_0_1"))
   (rule "assignment" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "cond"))
   (rule "assignment" (formula "11") (term "1,1,0,0,1"))
   (rule "assignment" (formula "11") (term "1,1,0,1"))
   (rule "blockEmpty" (formula "11") (term "1,1,1,0,0,1"))
   (rule "assignment" (formula "11") (term "1,1,1,1,1,1,0,1,1,1,0,1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclaration" (formula "11") (term "1,1,1,0,1") (newnames "el"))
   (rule "blockEmpty" (formula "11") (term "1,1,1,1,1,1,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1"))
   (rule "polySimp_elimOne" (formula "4") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,1,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,1,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,1,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,1,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,1,1,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,1,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,1,1,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,1,1,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,1,1,0,1,1,1,0,1"))
   (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfAnon" (formula "5"))
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
   (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
   (rule "hideAuxiliaryEq" (formula "5"))
   (rule "compound_less_than_comparison_2" (formula "9") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_1"))
   (rule "assignment_read_length" (formula "9") (term "1"))
   (branch "Normal Execution (arr_1 != null)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
      (rule "false_right" (formula "9"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0"))
      (rule "tryEmpty" (formula "9") (term "1"))
      (rule "blockEmptyLabel" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "assignment_array2" (formula "9") (term "1,1,1"))
      (branch "Normal Execution (arr_1 != null)"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
         (rule "orRight" (formula "9"))
         (rule "inEqSimp_leqRight" (formula "9"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_ltRight" (formula "10"))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
         (rule "pullOutSelect" (formula "10") (term "0,1,0") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
         (rule "applyEqReverse" (formula "11") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "qeq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "unusedLabel" (formula "9") (term "1"))
         (rule "compound_assignment_op_plus" (formula "9") (term "1"))
         (rule "compound_reference_cast_expression_primitive" (formula "9") (term "1") (inst "#v=i_2"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_2"))
         (rule "remove_parentheses_right" (formula "9") (term "1"))
         (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=i_4") (inst "#v0=i_3"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_3"))
         (rule "assignment" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_4"))
         (rule "remove_parentheses_right" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "assignmentAdditionInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaAddInt" (formula "9") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "postincrement" (formula "9") (term "1"))
         (rule "compound_int_cast_expression" (formula "9") (term "1") (inst "#v=i_5"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_5"))
         (rule "remove_parentheses_right" (formula "9") (term "1"))
         (rule "assignmentAdditionInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaAddInt" (formula "9") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "tryEmpty" (formula "9") (term "1"))
         (rule "blockEmptyLabel" (formula "9") (term "1"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "methodCallEmpty" (formula "9") (term "1"))
         (rule "emptyModality" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "8")))
         (rule "replaceKnownSelect_taclet0_0" (formula "9") (term "0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "9") (term "0,1,0,0"))
         (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_addAssoc" (formula "9") (term "1,1,0"))
         (rule "add_literals" (formula "9") (term "0,1,1,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0"))
         (rule "bsum_induction_upper_concrete" (formula "9") (term "0,1,0,0"))
         (rule "replaceKnownSelect_taclet000_2" (formula "9") (term "1,1,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "9") (term "1,1,0,1,0,0"))
         (rule "polySimp_homoEq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "9") (term "1,1,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,0,1,0,0"))
         (rule "replace_known_left" (formula "9") (term "0,0,1,0,0,1,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0"))
         (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0"))
         (rule "add_literals" (formula "9") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,0"))
         (rule "qeq_literals" (formula "9") (term "1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "apply_eq_monomials" (formula "9") (term "1,0,1,0") (ifseqformula "3"))
         (rule "polySimp_rightDist" (formula "9") (term "0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "1,0,1,0"))
         (rule "add_literals" (formula "9") (term "1,1,1,0,1,0"))
         (rule "times_zero_1" (formula "9") (term "1,1,0,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
         (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0"))
         (rule "add_literals" (formula "9") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
         (rule "mul_literals" (formula "9") (term "1,0"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0") (ifseqformula "2"))
         (rule "leq_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "tryEmpty" (formula "9") (term "1"))
         (rule "blockEmptyLabel" (formula "9") (term "1"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "methodCallEmpty" (formula "9") (term "1"))
         (rule "emptyModality" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "closeTrue" (formula "9"))
      )
      (branch "Null Reference (arr_1 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (arr_1 != null, but idx Out of Bounds!)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq0" (formula "10") (term "0,0,0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_contradInEq0" (formula "10") (term "0,1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,1"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,1"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,1"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,1"))
         (rule "leq_literals" (formula "10") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,0"))
         (rule "times_zero_1" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "tryEmpty" (formula "9") (term "1"))
         (rule "blockEmptyLabel" (formula "9") (term "1"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "methodCallEmpty" (formula "9") (term "1"))
         (rule "emptyModality" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "2"))
         (rule "close" (formula "9") (ifseqformula "3"))
      )
   )
   (branch "Null Reference (arr_1 = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Precondition"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "2")))
   (rule "bsum_lower_equals_upper" (formula "5") (term "1,1,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "leq_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "polySimp_elimSub" (formula "5") (term "0,1"))
   (rule "times_zero_2" (formula "5") (term "1,0,1"))
   (rule "add_zero_right" (formula "5") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_geqRight" (formula "5"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "eqSymm" (formula "5"))
   (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "elim_double_block_2" (formula "8") (term "1"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "b"))
   (rule "inequality_comparison_simple" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "replace_known_left" (formula "8") (term "0,0,1,0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "ifSplit" (formula "8"))
   (branch "if b true"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if b false"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "methodCallReturn" (formula "8") (term "1"))
      (rule "assignment" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "methodCallEmpty" (formula "8") (term "1"))
      (rule "tryEmpty" (formula "8") (term "1"))
      (rule "emptyModality" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "5")))
      (rule "allRight" (formula "8") (inst "sk=f_0"))
      (rule "allRight" (formula "8") (inst "sk=o_0"))
      (rule "orRight" (formula "8"))
      (rule "orRight" (formula "8"))
      (rule "eqSymm" (formula "10"))
      (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "closeTrue" (formula "11"))
   )
)
)
}
