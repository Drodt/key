\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_OFF",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource ".";

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.proof.init.FunctionalOperationContractPO",
    "contract" : "ArrayList[List::get(int)].JML normal_behavior operation contract.0",
    "name" : "ArrayList[List::get(int)].JML normal_behavior operation contract.0"
 }

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "c12e9dae06c00a26bb394e881da8d84a3a7e2ef1"))

(autoModeTime "630")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "expandInRangeInt" (formula "1") (term "1,0,1,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "castedGetAny" (formula "9") (term "1,1,1,0,1,0,0,0,1"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0,1,0,0,0,1"))
(rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,0,1,0,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Query_axiom_for_size__in_ArrayList" (formula "6") (term "0,1,0") (inst "size_sk=size_sk_0") (inst "#self=a") (inst "#res=i") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "boxToDiamond" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "expand_moduloInteger" (formula "10") (term "0,0,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "10") (term "0,0,1,0,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "10") (term "0,0,0,0,0,0,1"))
(rule "replace_int_RANGE" (formula "10") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "10") (term "0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "10") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_ArrayList" (formula "7") (inst "i=i") (inst "sk=sk_0") (ifseqformula "9"))
(branch "Use Axiom"
    (builtin "One Step Simplification" (formula "7"))
   (rule "expandInRangeInt" (formula "7") (term "1,1,0,0"))
   (rule "replace_int_MIN" (formula "7") (term "0,1,1,1,0,0"))
   (rule "replace_int_MAX" (formula "7") (term "1,0,1,1,0,0"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "8"))
   (rule "castedGetAny" (formula "7") (term "0,0,1,1,0"))
   (rule "castedGetAny" (formula "7") (term "1,1,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "JML_represents_clause_for_List_theList" (formula "7") (term "0,0,0,0,1,0") (inst "i=i") (inst "sk=sk_1") (inst "S=S") (ifseqformula "10"))
   (branch "Use Axiom"
      (rule "getOfSeqDef" (formula "7") (term "0,0,0,1,0"))
      (rule "castDel" (formula "7") (term "2,0,0,0,1,0"))
      (rule "castDel" (formula "7") (term "1,0,0,0,1,0"))
      (rule "add_zero_right" (formula "7") (term "0,2,1,0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,0,1,0"))
      (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "7") (term "1,1,0,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,0,1,0"))
      (rule "JML_represents_clause_for_List_theList" (formula "7") (term "0,0,0,1,1,0") (inst "i=i") (inst "sk=sk_2") (inst "S=S") (ifseqformula "10"))
      (branch "Use Axiom"
         (rule "getOfSeqDef" (formula "7") (term "0,0,1,1,0"))
         (rule "castDel" (formula "7") (term "1,0,0,1,1,0"))
         (rule "add_zero_right" (formula "7") (term "0,2,1,0,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,1,1,0"))
         (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,1,1,0"))
         (rule "JML_represents_clause_for_List_theList" (formula "7") (term "0,0,1,1,1,0") (inst "i=i") (inst "sk=sk_3") (inst "S=S") (ifseqformula "10"))
         (branch "Use Axiom"
            (rule "getOfSeqDef" (formula "7") (term "0,1,1,1,0"))
            (rule "castDel" (formula "7") (term "1,0,1,1,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,1,1,0"))
            (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,1,1,0"))
            (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,1,1,0"))
            (rule "JML_represents_clause_for_List_theList" (formula "7") (term "0,1,1,0,0") (inst "i=i") (inst "sk=sk_4") (inst "S=S") (ifseqformula "10"))
            (branch "Use Axiom"
               (rule "lenOfSeqDef" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,0,0"))
               (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_size,savedHeapBefore_size"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_get,savedHeapBefore_get"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "cnf_rightDist" (formula "7") (term "0"))
               (rule "distr_forallAnd" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "commute_or_2" (formula "7") (term "0"))
               (rule "commute_or" (formula "8") (term "0"))
               (rule "commute_or" (formula "7") (term "0,0"))
               (rule "cnf_rightDist" (formula "8") (term "0"))
               (rule "distr_forallAnd" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "commute_or" (formula "9") (term "0"))
               (rule "returnUnfold" (formula "11") (term "1") (inst "#v0=i_1"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_1"))
               (rule "eval_order_access2" (formula "11") (term "1") (inst "#v0=i_arr"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_arr"))
               (rule "assignment_read_attribute_this" (formula "11"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "assignment_read_length" (formula "11"))
               (branch "Normal Execution (i_arr != null)"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "returnUnfold" (formula "13") (term "1") (inst "#v0=i"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "i"))
                  (rule "eval_order_array_access4" (formula "13") (term "1") (inst "#v0=i_arr_1"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_arr_1"))
                  (rule "assignment_read_attribute_this" (formula "13"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "assignment_array2" (formula "13"))
                  (branch "Normal Execution (i_arr_1 != null)"
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "methodCallReturn" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "methodCallReturn" (formula "13") (term "1"))
                     (rule "assignment" (formula "13") (term "1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "methodCallEmpty" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "methodCallEmpty" (formula "13") (term "1"))
                     (rule "emptyModality" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "notRight" (formula "11"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "8") (term "0,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "8") (term "1,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "tryEmpty" (formula "13") (term "1"))
                     (rule "emptyModality" (formula "13") (term "1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "mod_axiom" (formula "13") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                     (rule "polySimp_homoEq" (formula "13") (term "0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "13") (term "0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                     (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,0,1,0,1") (inst "i=i_2") (inst "sk=sk_5") (inst "S=S") (ifseqformula "12"))
                     (branch "Use Axiom"
                        (rule "getOfSeqDef" (formula "13") (term "0,0,1,0,1"))
                        (rule "castDel" (formula "13") (term "1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "13") (term "0,2,1,0,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,1,0,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,1,0,1"))
                        (rule "replace_known_left" (formula "13") (term "0,0,0,0,1,0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,1,0,1"))
                        (rule "replace_known_left" (formula "13") (term "0,0,0,1,0,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,0,0,0,1") (inst "i=i_2") (inst "sk=sk_6") (inst "S=S") (ifseqformula "12"))
                        (branch "Use Axiom"
                           (rule "getOfSeqDef" (formula "13") (term "0,0,0,0,1"))
                           (rule "castDel" (formula "13") (term "2,0,0,0,0,1"))
                           (rule "castDel" (formula "13") (term "1,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "13") (term "0,2,1,0,0,0,0,1"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,0,0,1"))
                           (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "13") (term "1,1,0,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,1"))
                           (rule "replace_known_left" (formula "13") (term "0,0,0,0,0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,1") (ifseqformula "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0,1"))
                           (rule "replace_known_left" (formula "13") (term "0,0,0,0,0,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "exact_instance_definition_int" (formula "13") (term "0,0,1") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,1,0,0,0,0") (inst "i=i_2") (inst "sk=sk_7") (inst "S=S") (ifseqformula "12"))
                           (branch "Use Axiom"
                              (rule "getOfSeqDef" (formula "13") (term "1,0,0,0,0"))
                              (rule "castDel" (formula "13") (term "1,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,2,1,1,0,0,0,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0,0,0,0"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,1,0,1,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,0,0,0,0"))
                              (rule "replace_known_left" (formula "13") (term "0,0,1,0,0,0,0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,0,0,0"))
                              (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "polySimp_homoEq" (formula "13") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "13") (term "0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                              (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
                              (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,1,0,1") (inst "i=i_2") (inst "sk=sk_8") (inst "S=S") (ifseqformula "12"))
                              (branch "Use Axiom"
                                 (rule "getOfSeqDef" (formula "13") (term "0,1,0,1"))
                                 (rule "castDel" (formula "13") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1"))
                                 (rule "replace_known_left" (formula "13") (term "0,0,0,1,0,1") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "applyEq" (formula "13") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,1"))
                                 (rule "replace_known_left" (formula "13") (term "0,0,1,0,1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,0") (inst "i=i_2") (inst "sk=sk_9") (inst "S=S") (ifseqformula "12"))
                                 (branch "Use Axiom"
                                    (rule "getOfSeqDef" (formula "13") (term "0,0"))
                                    (rule "castDel" (formula "13") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,2,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0"))
                                    (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0,0") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "applyEq" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "polySimp_homoEq" (formula "13") (term "0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,0"))
                                    (rule "add_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0"))
                                    (rule "elimGcdEq" (formula "13") (term "0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
        int::select(heap,
                    int[]::select(heap,
                                  self,
                                  ArrayList::$a),
                    arr(idx))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,1,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "leq_literals" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "Class_invariant_axiom_for_ArrayList" (formula "13") (term "1,1") (inst "i=i_2") (inst "sk=sk_10") (ifseqformula "12"))
                                    (branch "Use Axiom"
                                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
                                       (rule "expandInRangeInt" (formula "13") (term "1,1,0,1,1"))
                                       (rule "replace_int_MIN" (formula "13") (term "0,1,1,1,0,1,1"))
                                       (rule "replace_int_MAX" (formula "13") (term "1,0,1,1,0,1,1"))
                                       (rule "castedGetAny" (formula "13") (term "1,1,1,1,0,1,1"))
                                       (rule "castedGetAny" (formula "13") (term "0,0,1,1,0,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,1"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,1"))
                                       (rule "nnf_imp2or" (formula "13") (term "0,1,1"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,1,1"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,1"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,1"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1"))
                                       (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,0,1,1,0,1,1") (inst "i=i_2") (inst "sk=sk_11") (inst "S=S") (ifseqformula "12"))
                                       (branch "Use Axiom"
                                          (rule "getOfSeqDef" (formula "13") (term "0,0,1,1,0,1,1"))
                                          (rule "castDel" (formula "13") (term "1,0,0,1,1,0,1,1"))
                                          (rule "add_zero_right" (formula "13") (term "0,2,1,0,0,1,1,0,1,1"))
                                          (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,1,1,0,1,1"))
                                          (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,0,1,1,0,1,1"))
                                          (rule "add_zero_right" (formula "13") (term "1,1,0,0,0,1,1,0,1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1,1,0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,1,1,0,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,1,1,0,1,1"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0,0,1,1,0,1,1") (ifseqformula "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,1,1,0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,1,1,0,1,1"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,1,1,0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,1,1,0,1,1"))
                                          (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,1,1,0,1,1"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,1,1,0,1,1"))
                                          (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,0,0,1,0,1,1") (inst "i=i_2") (inst "sk=sk_12") (inst "S=S") (ifseqformula "12"))
                                          (branch "Use Axiom"
                                             (rule "getOfSeqDef" (formula "13") (term "0,0,0,1,0,1,1"))
                                             (rule "castDel" (formula "13") (term "2,0,0,0,1,0,1,1"))
                                             (rule "castDel" (formula "13") (term "1,0,0,0,1,0,1,1"))
                                             (rule "add_zero_right" (formula "13") (term "0,2,1,0,0,0,1,0,1,1"))
                                             (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,0,1,0,1,1"))
                                             (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,0,0,1,0,1,1"))
                                             (rule "add_zero_right" (formula "13") (term "1,1,0,0,0,0,1,0,1,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,1,0,1,1"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,1,0,1,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,1,0,1,1"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0,0,0,1,0,1,1") (ifseqformula "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,1,0,1,1"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,1,0,1,1"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,1,0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,1,0,1,1"))
                                             (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,1,0,1,1"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,1,0,1,1"))
                                             (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,0,1,1,1,0,1,1") (inst "i=i_2") (inst "sk=sk_13") (inst "S=S") (ifseqformula "12"))
                                             (branch "Use Axiom"
                                                (rule "getOfSeqDef" (formula "13") (term "0,1,1,1,0,1,1"))
                                                (rule "castDel" (formula "13") (term "1,0,1,1,1,0,1,1"))
                                                (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,1,1,0,1,1"))
                                                (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,1,1,0,1,1"))
                                                (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,1,1,0,1,1"))
                                                (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,1,0,1,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,1,0,1,1"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,1,0,1,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,1,0,1,1"))
                                                (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0,1,1,1,0,1,1") (ifseqformula "1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1,1,0,1,1"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,1,1,0,1,1"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,1,1,0,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,1,1,0,1,1"))
                                                (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,1,1,0,1,1"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,1,1,0,1,1"))
                                                (rule "JML_represents_clause_for_List_theList" (formula "13") (term "0,1,1,0,0,1,1") (inst "i=i_2") (inst "sk=sk_14") (inst "S=S") (ifseqformula "12"))
                                                (branch "Use Axiom"
                                                   (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0,1,1"))
                                                   (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0,1,1"))
                                                   (rule "add_zero_right" (formula "13") (term "1,1,1,0,0,1,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0,1,1"))
                                                   (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,1,1"))
                                                   (rule "applyEq" (formula "13") (term "0,1,0,0,1,1,0,0,1,1") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,1") (ifseqformula "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,0,0,1,1"))
                                                   (rule "commute_and" (formula "13") (term "0,1"))
                                                   (rule "ifthenelse_split" (formula "10") (term "1,1,0,0"))
                                                   (branch "size_sk_0 >= 1 TRUE"
                                                      (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "replace_known_left" (formula "8") (term "0,1,1,0") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "replace_known_left" (formula "14") (term "0,1,1,0,0,1,1") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
                                                      (rule "leq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "div_axiom" (formula "14") (term "0,0") (inst "quotient=quotient_0"))
                                                      (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                                                      (rule "equal_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                                      (rule "add_literals" (formula "3") (term "0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "1"))
                                                      (rule "add_literals" (formula "3") (term "0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                      (rule "mul_literals" (formula "3") (term "0,1"))
                                                      (rule "allLeft" (formula "11") (inst "t=idx"))
                                                      (rule "replace_known_left" (formula "11") (term "0,0,0,0,0,0") (ifseqformula "9"))
                                                       (builtin "One Step Simplification" (formula "11"))
                                                      (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                                                      (rule "replace_known_left" (formula "11") (term "0,0,0,0,0") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "11"))
                                                      (rule "exact_instance_definition_int" (formula "11") (term "0,0") (inst "iv=iv"))
                                                       (builtin "One Step Simplification" (formula "11"))
                                                      (rule "true_left" (formula "11"))
                                                      (rule "allLeft" (formula "12") (inst "t=idx"))
                                                      (rule "replace_known_left" (formula "12") (term "0,0,0,1") (ifseqformula "9"))
                                                       (builtin "One Step Simplification" (formula "12"))
                                                      (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,1"))
                                                      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                                                      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
                                                      (rule "replace_known_left" (formula "12") (term "0,0,1") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "12"))
                                                      (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
                                                      (rule "leq_literals" (formula "12") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "12"))
                                                      (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "9"))
                                                      (rule "qeq_literals" (formula "12") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "12"))
                                                      (rule "replace_known_left" (formula "18") (term "1,0,1") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
                                                      (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                                                      (rule "leq_literals" (formula "2") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                                      (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0,0"))
                                                      (rule "qeq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "allLeft" (formula "16") (inst "t=idx"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0,0,1") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,1"))
                                                      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0,1") (ifseqformula "11"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                                                      (rule "leq_literals" (formula "16") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "10"))
                                                      (rule "qeq_literals" (formula "16") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
                                                      (rule "mul_literals" (formula "16") (term "0,0"))
                                                      (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                                      (rule "add_literals" (formula "16") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                                      (rule "mul_literals" (formula "16") (term "1"))
                                                      (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                                      (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                                                      (rule "leq_literals" (formula "16") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                                                      (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                                      (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "16") (term "0,0"))
                                                      (rule "leq_literals" (formula "16") (term "0"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "2"))
                                                      (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "22"))
                                                      (rule "allRight" (formula "22") (inst "sk=i_2_0"))
                                                      (rule "orRight" (formula "22"))
                                                      (rule "orRight" (formula "22"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "24") (term "0,0,0,0,1") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "23"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0,1,1"))
                                                      (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1,1"))
                                                      (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "18"))
                                                      (rule "times_zero_2" (formula "5") (term "1,1"))
                                                      (rule "add_zero_right" (formula "5") (term "1"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "17"))
                                                      (rule "leq_literals" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "16"))
                                                      (rule "times_zero_2" (formula "4") (term "1,1"))
                                                      (rule "add_zero_right" (formula "4") (term "1"))
                                                      (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "15"))
                                                      (rule "qeq_literals" (formula "16"))
                                                      (rule "true_left" (formula "16"))
                                                      (rule "applyEq" (formula "3") (term "1") (ifseqformula "15"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,1"))
                                                      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1"))
                                                      (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1"))
                                                      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1"))
                                                      (rule "replace_known_left" (formula "20") (term "0,0,0,1") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
                                                      (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0"))
                                                      (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "exact_instance_definition_int" (formula "20") (term "0") (inst "iv=iv"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,1"))
                                                      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
                                                      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
                                                      (rule "replace_known_left" (formula "20") (term "0,0,1") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "commute_and" (formula "20"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "5"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "19"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "allLeft" (formula "18") (inst "t=i_2_0"))
                                                      (rule "replace_known_left" (formula "18") (term "0,0,0,1") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,1"))
                                                      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                                                      (rule "replace_known_left" (formula "18") (term "0,0,1") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                                                      (rule "leq_literals" (formula "18") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "18") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "18"))
                                                       (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "1"))
                                                      (rule "leq_literals" (formula "19") (term "0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "true_left" (formula "19"))
                                                      (rule "allLeft" (formula "15") (inst "t=i_2_0"))
                                                      (rule "replace_known_left" (formula "15") (term "0,0,0,1") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,1"))
                                                      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
                                                      (rule "leq_literals" (formula "15") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "15") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "15") (term "0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "closeFalse" (formula "15"))
                                                   )
                                                   (branch "size_sk_0 >= 1 FALSE"
                                                      (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "11"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "replace_known_right" (formula "8") (term "0,1,1,0") (ifseqformula "11"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "replace_known_right" (formula "14") (term "0,1,1,0,0,1,1") (ifseqformula "11"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "inEqSimp_geqRight" (formula "11"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                                                      (rule "add_zero_right" (formula "8") (term "0"))
                                                      (rule "polySimp_rightDist" (formula "8") (term "0"))
                                                      (rule "mul_literals" (formula "8") (term "0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                                      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "8") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "Show Axiom Satisfiability"
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "closeTrue" (formula "13"))
                                                )
                                             )
                                             (branch "Show Axiom Satisfiability"
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "closeTrue" (formula "13"))
                                             )
                                          )
                                          (branch "Show Axiom Satisfiability"
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "closeTrue" (formula "13"))
                                          )
                                       )
                                       (branch "Show Axiom Satisfiability"
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "closeTrue" (formula "13"))
                                       )
                                    )
                                    (branch "Show Axiom Satisfiability"
                                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                                       (rule "closeTrue" (formula "13"))
                                    )
                                 )
                                 (branch "Show Axiom Satisfiability"
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "closeTrue" (formula "13"))
                                 )
                              )
                              (branch "Show Axiom Satisfiability"
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "closeTrue" (formula "13"))
                              )
                           )
                           (branch "Show Axiom Satisfiability"
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "closeTrue" (formula "13"))
                           )
                        )
                        (branch "Show Axiom Satisfiability"
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "closeTrue" (formula "13"))
                        )
                     )
                     (branch "Show Axiom Satisfiability"
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "closeTrue" (formula "13"))
                     )
                  )
                  (branch "Null Reference (i_arr_1 = null)"
                     (rule "false_right" (formula "14"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (i_arr_1 != null, but _idx Out of Bounds!)"
                     (rule "false_right" (formula "14"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "methodCallReturn" (formula "12") (term "1"))
                     (rule "assignment" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "methodCallEmpty" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "emptyModality" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "notRight" (formula "12"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "0,0,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "11") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "1,1,1,0") (ifseqformula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "8"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "Null Reference (i_arr = null)"
                   (builtin "One Step Simplification" (formula "12"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Show Axiom Satisfiability"
                (builtin "One Step Simplification" (formula "8"))
               (rule "closeTrue" (formula "8"))
            )
         )
         (branch "Show Axiom Satisfiability"
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "Show Axiom Satisfiability"
          (builtin "One Step Simplification" (formula "8"))
         (rule "closeTrue" (formula "8"))
      )
   )
   (branch "Show Axiom Satisfiability"
       (builtin "One Step Simplification" (formula "8"))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "Show Axiom Satisfiability"
    (builtin "One Step Simplification" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
)
}
