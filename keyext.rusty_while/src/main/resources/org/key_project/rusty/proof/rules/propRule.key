// This file contains rules that should always be present,
// but do not depend on a sort. In other words, mainly propositional logic.

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.

\schemaVariables {
    \formula b, c, d;
    \formula cutFormula;
    \formula [rigid] br, cr;
}

\rules {
    // closing goals
    close {
        \assumes(b ==>)
        \find( ==> b) \closegoal
        \displayname "close"
    };
    closeAntec {
        \assumes( ==> b)
        \find(b ==>) \closegoal
        \displayname "close"
    };
    closeFalse {
        \find(false ==>) \closegoal
    };
    closeTrue {
        \find( ==> true) \closegoal
    };

    // simplification rules
    replace_known_left {
        \assumes(b ==>)
        \find(b)
        \sameUpdateLevel
        \replacewith(true)
    };
    replace_known_right {
        \assumes( ==> b)
        \find(b)
        \sameUpdateLevel
        \replacewith(false)
    };

    // junctor rules
    true_left {
        \find(true ==>)
        \replacewith( ==>)
    };
    false_right {
        \find( ==> false)
        \replacewith( ==>)
    };

    notLeft {
        \find(!b ==>)
        \replacewith( ==> b)
    };
    notRight {
        \find( ==> !b)
        \replacewith(b ==>)
    };

    impLeft {
        \find(b -> c ==>)
        \replacewith( ==> b);
        \replacewith(c ==>)
    };
    doubleImpLeft {
        \find(b -> c -> d ==>)
        \replacewith( ==> b);
        \replacewith( ==> c);
        \replacewith(d ==>)
    };
    impRight {
        \find( ==> b -> c)
        \replacewith(b ==> c)
    };

    andLeft {
        \find(b & c ==>)
        \replacewith(b, c ==>)
    };
    andRight {
        \find( ==> b & c)
        \replacewith( ==> b);
        \replacewith( ==> c)
    };
    orLeft {
        \find(b | c ==>)
        "#b":
            \replacewith(b ==>);
        "#c":
            \replacewith(c ==>)
    };
    orRight {
        \find( ==> b | c)
        \replacewith( ==> b, c)
    };

    equiv_left {
        \find(b <-> c ==>)
        \replacewith(b, c ==>);
        \replacewith( ==> b, c)
    };

    equiv_right {
        \find( ==> b <-> c)
        "Case '->'":
            \replacewith(b ==> c);
        "Case '<-'":
            \replacewith(c ==> b)
    };

    /* These `recursive' rules are commented out, because this
       keyword is not yet supported.
    imp_left_rec { \find (b -> c ==>)  \recursive
             \replacewith(==> b);
                     \replacewith(c ==>) };
    and_right_rec { \find (==> b & c)  \recursive
              \replacewith(==> b);
                      \replacewith(==> c) };
    or_left_rec { \find (b | c ==>)  \recursive
            \replacewith(b ==>);
                    \replacewith(c ==>) };
    */

    split_or_strong {
        \find(b | c ==>)
        \replacewith(b ==>);
        \replacewith(c ==> b)
    };

    ///////////////////////////////////////////////////////////////////////////////

    rotate_and {
        \find(b & (c & d))
        \replacewith(c & (b & d))
    };
    rotate_or {
        \find(b | (c | d))
        \replacewith(c | (b | d))
    };

    // equivalence replacement
    insert_eqv_once_lr {
        \find(br <-> cr ==>)
        \addrules(
            insert_eqv {
                \find(br)
                \replacewith(cr)
            })
    };
    insert_eqv_once_rl {
        \find(br <-> cr ==>)
        \addrules(
            insert_eqv {
                \find(cr)
                \replacewith(br)
            })
    };

    insert_eqv_lr {
        \find(br <-> cr ==>)
        \addrules(
            insert_eqv {
                \find(br)
                \replacewith(cr)
            })
    };
    insert_eqv_rl {
        \find(br <-> cr ==>)
        \addrules(
            insert_eqv {
                \find(cr)
                \replacewith(br)
            })
    };

    // simplification
    double_not {
        \find(!(!b))
        \replacewith(b)
    };

    concrete_not_1 {
        \find(!true)
        \replacewith(false)
    };
    concrete_not_2 {
        \find(!false)
        \replacewith(true)
    };

    concrete_impl_1 {
        \find(true -> b)
        \replacewith(b)
    };
    concrete_impl_2 {
        \find(false -> b)
        \replacewith(true)
    };
    concrete_impl_3 {
        \find(b -> false)
        \replacewith(!b)
    };
    concrete_impl_4 {
        \find(b -> true)
        \replacewith(true)
    };

    concrete_and_1 {
        \find(true & b)
        \replacewith(b)
    };
    concrete_and_2 {
        \find(false & b)
        \replacewith(false)
    };
    concrete_and_3 {
        \find(b & true)
        \replacewith(b)
    };
    concrete_and_4 {
        \find(b & false)
        \replacewith(false)
    };

    concrete_or_1 {
        \find(true | b)
        \replacewith(true)
    };
    concrete_or_2 {
        \find(false | b)
        \replacewith(b)
    };
    concrete_or_3 {
        \find(b | true)
        \replacewith(true)
    };
    concrete_or_4 {
        \find(b | false)
        \replacewith(b)
    };

    concrete_or_5 {
        \find((c & b) | (c & (!b)))
        \replacewith(c)
        \displayname "distr_elim"
    };

    concrete_eq_1 {
        \find(true <-> b)
        \replacewith(b)
    };
    concrete_eq_2 {
        \find(false <-> b)
        \replacewith(!b)
    };
    concrete_eq_3 {
        \find(b <-> true)
        \replacewith(b)
    };
    concrete_eq_4 {
        \find(b <-> false)
        \replacewith(!b)
    };

    // other

    // NOTE (DS, 2019-02-20): Used by the "assume" command in
    //   proof scripts. Obviously unsound. I personally use it
    //   for coupling loops: There, I declare two anonymized
    //   loop counters to be equal to be able to perform relational
    //   reasoning.
    introduceAxiom {
        \add(cutFormula ==>)
    };

    cut {
        "CUT: #cutFormula TRUE":
            \add(cutFormula ==>);
        "CUT: #cutFormula FALSE":
            \add( ==> cutFormula)
    };

    cut_direct {
        \find(cutFormula)
        \sameUpdateLevel
        "CUT: #cutFormula TRUE":
            \replacewith(true) \add(cutFormula ==>);
        "CUT: #cutFormula FALSE":
            \replacewith(false) \add( ==> cutFormula)
    };

    cut_direct_r {
        \find( ==> b)
        \replacewith( ==> b);
        \add(b ==>)
    };
    cut_direct_l {
        \find(b ==>)
        \replacewith(b ==>);
        \add( ==> b)
    };

    // proofobl not parsed yet.
    // rule_cut { \addrules (rule); \add (==> proofobl(rule)) };

    hide_left {
        \find(b ==>)
        \replacewith( ==>)
        \addrules(
            insert_hidden {
                \add(b ==>)
            })
    };

    hide_right {
        \find( ==> b)
        \replacewith( ==>)
        \addrules(
            insert_hidden {
                \add( ==> b)
            })
    };

    case_distinction_r {
        \find( ==> b)
        \addrules(
            to_true {
                \find( ==> b)
                \replacewith( ==> true)
            });
        \addrules(
            to_false {
                \find( ==> b)
                \replacewith( ==> false)
            })
        \displayname "case_distinction"
    };

    case_distinction_l {
        \find(b ==>)
        \addrules(
            to_true {
                \find(b ==>)
                \replacewith(true ==>)
            });
        \addrules(
            to_false {
                \find(b ==>)
                \replacewith(false ==>)
            })
        \displayname "case_distinction"
    };
}
